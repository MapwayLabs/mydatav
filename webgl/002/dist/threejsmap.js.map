{"version":3,"sources":["webpack://TMap/webpack/universalModuleDefinition","webpack://TMap/webpack/bootstrap","webpack://TMap/./js/bounds.js","webpack://TMap/./js/color.js","webpack://TMap/./js/eventemiter.js","webpack://TMap/./js/index.js","webpack://TMap/./js/layers/bar-layer.js","webpack://TMap/./js/layers/custom-meshline.js","webpack://TMap/./js/layers/flyline-layer.js","webpack://TMap/./js/layers/geojson-layer.js","webpack://TMap/./js/layers/layer.js","webpack://TMap/./js/layers/point-layer.js","webpack://TMap/./js/layers/text-layer.js","webpack://TMap/./js/layers/text-sprite.js","webpack://TMap/./js/maphelper.js","webpack://TMap/./js/three-map.js","webpack://TMap/./js/tooltip.js","webpack://TMap/./js/util.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;;AAEA;AACA;;AAEP;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAEc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9VA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;;AAEe;;AAEA;;AAER;;AAEE;;AAEhB;AACvB;;AAEa;AACjB;;;;;;;;;;;;;;ACdd;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACU;AACL;;AAErC;AACe,uBAAuB,8CAAK;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mDAAkB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,6DAA4B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wBAAwB,oDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAmB;AACzC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4BAA4B;AACzC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B,GAAG,6BAA6B,GAAG,6BAA6B,GAAG,6BAA6B;AAClJ;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAW,QAAQ,YAAY;AAC1D,qC;AACA,SAAS;AACT;AACA;AACA,S;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA,4D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,IAAI,cAAc;AAChF,yCAAyC,OAAO,UAAU,oBAAoB,WAAW,sBAAsB;AAC/G;AACA;AACA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,eAAe;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,O;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,mDAAS;AACvC;AACA;AACA,C;;;;;;;;;;;;ACpdA;AAAA;AAAA;AAAA;AACA;AACO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF,WAAW,cAAc;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEO;;AAEP;AACA,uBAAuB;AACvB;AACA,yBAAyB;AACzB,yBAAyB;AACzB,qBAAqB;AACrB,sBAAsB;AACtB,uBAAuB;AACvB,mBAAmB;AACnB,0BAA0B;AAC1B,sBAAsB;AACtB,yBAAyB;AACzB,uBAAuB;AACvB;AACA,+BAA+B;AAC/B,8BAA8B;AAC9B,yBAAyB;AACzB,yBAAyB;AACzB,oBAAoB;AACpB,uBAAuB;AACvB,oBAAoB;AACpB,mBAAmB;AACnB,+BAA+B;AAC/B,qBAAqB;AACrB,2BAA2B;AAC3B,oBAAoB;AACpB,sBAAsB;AACtB,wBAAwB;AACxB,wBAAwB;AACxB;AACA,kBAAkB;AAClB,qBAAqB;AACrB,yBAAyB;AACzB,yBAAyB;AACzB;AACA,mCAAmC;AACnC;AACA,2BAA2B;AAC3B,qBAAqB;AACrB,wBAAwB;AACxB,gBAAgB;AAChB;AACA,EAAE;AACF;AACA,cAAc;AACd;AACA,gDAAgD;AAChD,wEAAwE;AACxE;AACA,qCAAqC;AACrC,cAAc;AACd;AACA,iDAAiD;AACjD,oDAAoD;AACpD,8CAA8C;AAC9C,0CAA0C;AAC1C;AACA,kDAAkD;AAClD,yCAAyC;AACzC,yCAAyC;AACzC;AACA,wDAAwD;AACxD,oDAAoD;AACpD;AACA,kCAAkC;AAClC,qCAAqC;AACrC,MAAM;AACN;AACA,cAAc;AACd,iEAAiE;AACjE,sEAAsE;AACtE,WAAW;AACX,mDAAmD;AACnD,mDAAmD;AACnD,wCAAwC;AACxC;AACA,6CAA6C;AAC7C,4CAA4C;AAC5C,2EAA2E;AAC3E;AACA,MAAM;AACN;AACA,yEAAyE;AACzE,yCAAyC;AACzC,wBAAwB;AACxB,sBAAsB;AACtB;AACA,mDAAmD;AACnD,mCAAmC;AACnC;AACA,iCAAiC;;AAEjC,iBAAiB;AACjB;AACA;AACA,kFAAkF;AAClF;AACA;AACA,yEAAyE;AACzE;AACA;AACA,yCAAyC;AACzC,8CAA8C;AAC9C,EAAE;AACF,EAAE;;AAEF;AACA;AACA,yBAAyB;AACzB;AACA,uBAAuB;AACvB,4BAA4B;AAC5B,sBAAsB;AACtB,2BAA2B;AAC3B,uBAAuB;AACvB,yBAAyB;AACzB,0BAA0B;AAC1B,yBAAyB;AACzB,0BAA0B;AAC1B,yBAAyB;AACzB,qBAAqB;AACrB,wBAAwB;AACxB,wBAAwB;AACxB;AACA,kBAAkB;AAClB,qBAAqB;AACrB,yBAAyB;AACzB,yBAAyB;AACzB;AACA,cAAc;AACd;AACA,gBAAgB;AAChB,2CAA2C;AAC3C,cAAc;AACd,GAAG;AACH,yBAAyB;AACzB;AACA;AACA,kDAAkD;AAClD;AACA;AACA,oCAAoC;AACpC;AACA;AACA,yBAAyB;AACzB,EAAE,OAAO;AACT,qBAAqB;AACrB,4DAA4D;AAC5D,0EAA0E;AAC1E,mCAAmC;AACnC,yBAAyB;AACzB,uFAAuF;AACvF,MAAM;AACN,sBAAsB;AACtB,mDAAmD;AACnD,EAAE;AACF,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,mCAAmC;AAClD,SAAS,6BAA6B;AACtC,YAAY,gCAAgC;AAC5C,cAAc,kCAAkC;AAChD,iBAAiB,qCAAqC;AACtD,WAAW,+BAA+B;AAC1C,aAAa,iCAAiC;AAC9C,gBAAgB,qCAAqC;AACrD,qBAAqB,yCAAyC;AAC9D,UAAU,8BAA8B;AACxC,SAAS,6BAA6B;AACtC,eAAe,mCAAmC;AAClD,gBAAgB,oCAAoC;AACpD,eAAe,mCAAmC;AAClD,aAAa,iCAAiC;AAC9C,gBAAgB,kCAAkC;AAClD,eAAe,iCAAiC;AAChD,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,E;;;;;;;;;;;;AC1fA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AAChC,WAAW,aAAa;AACqC;AACtB;;AAEvC;AACe,2BAA2B,8CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA,wBAAwB,4BAA4B;AACpD,mBAAmB,SAAS;AAC5B,oBAAoB,SAAS;AAC7B,qBAAqB,YAAY;AACjC,0BAA0B,UAAU;AACpC,uBAAuB,YAAY;AACnC,4BAA4B,WAAW;AACvC,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA,6CAA6C;AAC7C;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,oDAAU;AACzC;AACA;AACA,0B;AACA;AACA;AACA;;AAEA,+C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,2B;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,yDAAQ;AACjC;;AAEA;AACA;AACA;AACA,mCAAmC,iEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;AAC9B,2BAA2B;AAC3B,6BAA6B;AAC7B,4BAA4B;;AAE5B;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,yDAAQ;AACjC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,iEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,sCAAsC;AACtC,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;ACzYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACU;AACL;AACJ;AAC4B;AAC7D;AACe,2BAA2B,8CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,2BAA2B;AAC3B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gDAAO;AACvC;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,qCAAqC,oCAAoC;AACzE;AACA;AACA,SAAS;AACT,kCAAkC,mCAAmC;AACrE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4BAA4B;AAC3D;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iDAAiD,8CAA8C;AAC/F;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4CAA4C;AAC3E;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,yDAAwB;AACvD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAmB;AAC5C,aAAa;AACb,yBAAyB,oDAAmB;AAC5C,aAAa;AACb,yBAAyB,oDAAmB;AAC5C;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,8CAAa;AAChD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA,sBAAsB,2DAA0B;AAChD;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb,aAAa;;AAEb,aAAa;;AAEb,aAAa;AACb,yCAAyC,2CAA2C;AACpF;AACA;AACA,kDAAkD,8CAAa;AAC/D;AACA;AACA;AACA;;AAEA,aAAa;AACb,yCAAyC,2CAA2C;AACpF,6CAA6C,wDAAwD;AACrG;AACA;AACA,sDAAsD,8CAAa;AACnE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA,4D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA,iD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA,uBAAuB,2DAA0B;AACjD,yBAAyB,6DAA4B;AACrD;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,aAAa;AACb;AACA,a;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,sCAAsC,mDAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0CAA0C,mDAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,yBAAyB,yDAAQ;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4CAAW,EAAE,aAAa;AAClD;AACA;AACA,C;;;;;;;;;;;;AC9gBA;AAAA;AAAA;AAAA;AAAgC;AACS;AAC1B,oBAAoB,oDAAW;AAC9C;AACA;AACA;AACA,uBAAuB,4CAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACC;AACI;AACtB,yBAAyB,8CAAK;AAC7C;AACA,mBAAmB,kBAAkB,GAAG,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW,gC;AAClC;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA;AACA;AACA,gCAAgC,gDAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAW,EAAE,cAAc;;AAE5D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,8BAA8B,mDAAS,YAAY,8CAA8C;AACjG;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA,4D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AC3KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACO;AACsB;;AAE7D;AACe,wBAAwB,8CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;AAClC;AACA;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAU;AACrC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;;AAEhD;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,gEAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,uBAAuB,SAAS;AAChC;AACA,6BAA6B,SAAS;AACtC;AACA,oBAAoB,iEAAc;AAClC;AACA,iB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,C;;;;;;;;;;;;AC9IA;AAAA;AAAA;AAAgC;;AAEhC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,uBAAuB,GAAG,wBAAwB,GAAG,sBAAsB,GAAG,wBAAwB;AAC9H,yBAAyB,iDAAgB;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,6CAAY;AACxC,6BAA6B,6CAAY;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,4CAAW;AAC/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,uBAAuB,GAAG,wBAAwB,GAAG,6CAA6C,GAAG,wBAAwB;AACxJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,C;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAE9B,kBAAkB;AAClB;AACA,kBAAkB,+CAAM;;AAEjB;AACP;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,iCAAiC;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAM;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAM;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,oEAAoE,SAAS;AAC7E;AACA;AACA;AACA,SAAS;AACT,8CAA8C,SAAS;AACvD;AACA,2BAA2B,gBAAgB;AAC3C;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAM;AACzB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL,KAAK;;AAEL,KAAK;;AAEL,KAAK;AACL;AACA,KAAK;AACL;AACA,iCAAiC,2CAA2C;AAC5E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wE;AACA,yE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA,C;;;;;;;;;;;;ACrRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACT;AACU;AACG;;AAE7B,uBAAuB,oDAAW;AACjD;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,S;AACA,2B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAU;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,2CAAU;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B,2CAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8CAAa;AAClD,4BAA4B,yDAAwB;AACpD,0BAA0B,qDAAoB;AAC9C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAmB;AAC/C,iCAAiC,8CAAa;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAgB;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAmB;AACrD,aAAa;AACb,kCAAkC,oDAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,8CAAa;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,4CAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yE;AACA,yE;AACA;AACA;AACA,6F;AACA;AACA;AACA,iG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,4CAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2C;AACA,6C;AACA;AACA;AACA,gG;AACA;AACA;AACA,oG;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kEAAkE,aAAa;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAa,qBAAqB,8CAAa;AAC3D;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AC5dA;AAAA;AAAA;AAA+B;;AAEhB;AACf,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;AACA;AACA,QAAQ,8CAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAa;AACzB;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAgB;AAC5B;AACA,S;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO;AACP;AACA;;AAEO;AACP;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,WAAW,YAAY;;AAEvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,cAAc;AACd;AACA;AACA;;AAEA;AACO;;AAEP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,C","file":"threejsmap.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TMap\"] = factory();\n\telse\n\t\troot[\"TMap\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/index.js\");\n","export default class Bounds {\n    constructor (xmin, ymin, xmax, ymax) {\n        if (Array.isArray(xmin)) {\n            this.xmin = xmin[0];\n            this.xmax = ymin[0];\n            this.ymin = xmin[1];\n            this.ymax = ymin[1];\n        } else {\n            this.xmin = xmin;\n            this.xmax = xmax;\n            this.ymin = ymin;\n            this.ymax = ymax;\n        }\n    }\n    getWidth() {\n        return Math.abs(this.xmax - this.xmin);\n    }\n    getHeight() {\n        return Math.abs(this.ymax - this.ymin);\n    }\n    getCenter() {\n        let tx = (this.xmax - this.xmin) / 2;\n        let ty = (this.ymax - this.ymin) / 2;\n        return [tx + this.xmin, ty + this.ymin];\n    }\n    scale(m) {\n        this.xmin *= m;\n        this.ymin *= m;\n        this.xmax *= m;\n        this.ymax *= m;\n        return this;\n    }\n}","// code from https://github.com/d3/d3-color\nexport function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n}\n  \nexport function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) prototype[key] = definition[key];\n    return prototype;\n}\n  \nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex3 = /^#([0-9a-f]{3})$/,\n    reHex6 = /^#([0-9a-f]{6})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: function() {\n    return this.rgb().hex();\n  },\n  toString: function() {\n    return this.rgb() + \"\";\n  }\n});\n\nexport default function color(format) {\n  var m;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format])\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (0 <= this.r && this.r <= 255)\n        && (0 <= this.g && this.g <= 255)\n        && (0 <= this.b && this.b <= 255)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: function() {\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  },\n  toString: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\")\n        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export default class EventEmiter {\n    constructor() {\n        this._events = {};\n    }\n\n    on(event, cb, context) {\n        context = context || this;\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.on(event[i], cb, context);\n            }\n        } else {\n            (this._events[event] || (this._events[event] = [])).push({\n                callback: cb,\n                context: context\n            });\n        }\n        return this;\n    }\n\n    once(event, cb, context) {\n        context = context || this;\n        var self = this;\n\n        function on() {\n            self.off(event, cb, context);\n            cb.apply(context, arguments);\n        }\n        on.fn = cb;\n        this.on(event, on, context);\n        return this;\n    }\n\n    off(event, cb, context) {\n        context = context || this;\n        if (!arguments.length) {\n            this._events = Object.create(null);\n            return this;\n        }\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.off(event[i], cb, context);\n            }\n            return this;\n        }\n        if (!cb) {\n            this._events[event] = null;\n            return this;\n        }\n        if (cb) {\n            let cbs = this._events[event] || [];\n            let i = cbs.length;\n            while (i--) {\n                if ((cb === cbs[i].callback || cb === cbs[i].fn) && context === cbs[i].context) {\n                    cbs.splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        }\n    }\n\n    emit(event) {\n        let cbs = this._events[event];\n        let args = Array.prototype.slice.call(arguments, 1);\n        if (cbs) {\n            for (let i = 0, l = cbs.length; i < l; i++) {\n                cbs[i].callback.apply(cbs[i].context || this, args);\n            }\n        }\n    }\n}","export {default as ThreeMap} from './three-map';\n\nexport {default as GeoJSONLayer} from './layers/geojson-layer';\n\nexport {default as FlyLineLayer} from './layers/flyline-layer';\n\nexport {default as BarLayer} from './layers/bar-layer';\n\nexport {default as TextLayer} from './layers/text-layer';\n\nimport * as mapHelper from './maphelper';\nexport {mapHelper}\n\nimport * as Util from './util';\nexport {Util};\n\nexport { default as color } from './color';","import Layer from './layer';\nimport * as Util from '../util';\nimport * as mapHelper from '../maphelper';\nimport TextLayer from './text-layer';\n\n// 柱状图层\nexport default class BarLayer extends Layer {\n    constructor (data, options, geojsonLayer, tooltipHelper, bdpChart) {\n        super(data, options);\n\n        const defaultOptions = {\n            // 柱子显示是否与底图 geojson 数据匹配。\n            ///如果设置为 true，则会根据json数据来匹配 x 轴数据，只有匹配上的数据才会得到展示。\n            isMatchGeoJson: true, \n            // 是否自动适配尺寸。如果设置为 true，配置项中的 depth\\offset\\scale 等尺寸会根据当前行政区来自动适配，用户传入的值就无效了。\n            isAutoResize: true, \n            // 适配参数，仅当 isAutoResize 设置为 true 时有效。\n            resizeParam: {\n                barStyle: {\n                    width: 0.5,\n                    minHeight: 0.5,\n                    maxHeight: 7,\n                    bevelThickness: 0.1,\n                    bevelSize: 0.08\n                },\n                barText: {\n                    offset: 0.8,\n                    textStyle: {\n                        scale: 10\n                    }\n                }\n            }, \n            barStyle: {\n                width: 1, // 底边长\n                minHeight: 3, // 最小高度\n                maxHeight: 12, // 最大高度\n                bevelThickness: 0.1,\n                bevelSize: 0.08,\n                bevelSegments: 100,\n                defaultColor: ['#f00'],\n                grandientColor: null,\n                enumColor: null\n            },\n            barText: {\n                show: true,\n                offset: 1,\n                textStyle: {\n                    scale: 1,\n                    fontStyle: 'normal',\n                    fontWeight: 'normal',\n                    fontSize: '16px',\n                    fontFamily: 'Microsoft YaHei',\n                    fontColor: '#000',\n                    textAlign: 'center',\n                    textBaseline: 'middle',\n                    maxWidth: 512\n                }\n            },\n            barTooltip: {\n                show: true\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this.geojsonLayer = geojsonLayer;\n\n        this._barData = {\n            data: null,\n            vals: null,\n            min: null,\n            max: null\n        };\n\n        this._colorsData = {\n            data: [],\n            min: null,\n            max: null\n        };\n        \n        this._toolTipHelper = tooltipHelper;\n        this.bdpChart = bdpChart;\n\n        if (this.options.isAutoResize) {\n            this._initResizeOptions();\n        }\n        this._initBarData();\n        this._initColorData();\n        this._initMinMax();\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        this._textLayer && this._map.removeLayer(this._textLayer);\n        if (this.options.barTooltip.show) {\n            this._toolTipHelper && this._toolTipHelper.hideTooltip();\n            this._map.off('mousemove', this._mousemoveEvtHandler, this);\n        }\n    }\n    isMatch(featureIdVal, feature) {\n        if (featureIdVal == null || feature == null || Util.isEmptyObject(feature)) {\n            return false;\n        }\n        featureIdVal = String(featureIdVal);\n        if (featureIdVal === String(feature.id)) {\n            return true;\n        }\n        let props = feature.properties;\n        if (props == null || Util.isEmptyObject(props)) {\n            return false;\n        }\n        if ( featureIdVal === String(props.id) || new RegExp(props.name).test(featureIdVal)) {\n            return true;\n        }\n        return false;\n    }\n    getFormattedVal(value) {\n        if (!this.bdpChart) {return value;}\n        // TODO: bdp\n        let formattedVal = this.bdpChart.helper.dataLabelFormatter(this._data.y.formatter, value, this._data.y.aggregator);\n        // 如果未设置单位，则使用自定义单位\n        if (!this._data.y.formatter.num.unit || this._data.y.formatter.num.unit === '1') {\n            formattedVal += this._data.y.unit_adv;\n        }\n        return formattedVal;\n    }\n    _initResizeOptions() {\n        const ratio = this.geojsonLayer.getRatio();\n        const resizeParam = this.options.resizeParam;\n        this.options.barStyle.width = resizeParam.barStyle.width * ratio;\n        this.options.barStyle.minHeight = resizeParam.barStyle.minHeight * ratio;\n        this.options.barStyle.maxHeight = resizeParam.barStyle.maxHeight * ratio;\n        this.options.barStyle.bevelThickness = resizeParam.barStyle.bevelThickness * ratio;\n        this.options.barStyle.bevelSize = resizeParam.barStyle.bevelSize * ratio;\n        this.options.barText.offset = resizeParam.barText.offset * ratio;\n        this.options.barText.textStyle.scale = resizeParam.barText.textStyle.scale * ratio;\n    }\n    _initBarData() {\n        if (this.options.isMatchGeoJson) {\n            this._initMatchGeoBarData();\n        } else {\n            this._initNoMatchGeoBarData();\n        }\n    }\n    _initNoMatchGeoBarData() {\n        const x = this._data.x;\n        const y = this._data.y;\n        \n        let barData = [];\n        let vals = [];\n        let xlength = x.data.length;\n        for (let i = 0; i < xlength; i++) {\n            // 如果有位置数据，使用位置数据\n            let center;\n            if (x.location_data && x.location_data.length) {\n                center = [x.location_data[i].longitude, x.location_data[i].latitude];\n            }\n            if (!center) {\n                continue;\n            }\n            let value = Number(y.data[i]);\n            let tempobj = {\n                name: x.data[i],\n                xname: x.data[i],\n                ylabelName: y.name,\n                index: i,\n                center: center,\n                value: value,\n                formattedVal: this.getFormattedVal(value)\n            };\n            barData.push(tempobj);\n            vals.push(value);\n        }\n\n        this._barData.data = barData;\n        this._barData.vals = vals;\n    }\n    _initMatchGeoBarData() {\n        const features = this.geojsonLayer.getFeatures();\n        const x = this._data.x;\n        const y = this._data.y;\n        \n        let barData = [];\n        let vals = [];\n        features.forEach(f => {\n            let props = f.properties;\n            let xlength = x.data.length;\n            let i = 0;\n            for (; i < xlength; i++) {\n                let ismatch = this.isMatch(x.data[i], f);\n                // 如果匹配到底图\n                if (ismatch) {\n                    // 如果有位置数据，使用位置数据\n                    let center;\n                    if (x.location_data && x.location_data.length) {\n                        center = [x.location_data[i].longitude, x.location_data[i].latitude];\n                    } else {\n                        center = mapHelper.getNormalizeCenter(f);\n                    }\n                    let tempobj = {\n                        id: props.id || f.id,\n                        name: props.name,\n                        xname: x.data[i],\n                        ylabelName: y.name,\n                        index: i,\n                        center: center,\n                        value: Number(y.data[i])\n                    };\n                    tempobj.formattedVal = this.getFormattedVal(tempobj.value);\n                    barData.push(tempobj);\n                    vals.push(Number(tempobj.value));\n                    // 给 feature 打上标签，表示在它之上有柱子\n                    f.hasBarData = true;\n                    break;\n                }\n            }\n            // 当前 feature 上没有柱子\n            if (i === xlength) {\n                // 给 feature 打上标签，表示在它之上没有柱子\n                f.hasBarData = false;\n            }\n        });\n\n        this._barData.data = barData;\n        this._barData.vals = vals;\n    }\n    _initColorData() {\n        if (this._data.colors && this._data.colors.length) {\n            let cData = [];\n            this._barData.data.forEach(item => {\n                let d = Number(this._data.colors[item.index]);\n                cData.push(d);\n            });\n            this._colorsData.data = cData;\n            this._colorsData.min = Math.min(...cData);\n            this._colorsData.max = Math.max(...cData);\n        } else {\n            this._colorsData.data = this._barData.vals;\n            this._colorsData.min = this._barData.min;\n            this._colorsData.max = this._barData.max;\n        }\n    }\n    _initMinMax() {\n        if (this._barData.vals == null || !this._barData.vals.length) {return;}\n        const min = Math.min(...this._barData.vals);\n        const max = Math.max(...this._barData.vals);\n        this._barData.min = min;\n        this._barData.max = max;\n    }\n    getBarHeight(item) {\n        let xmin = this._barData.min;\n        let xmax = this._barData.max;\n        let ymin = this.options.barStyle.minHeight;\n        let ymax = this.options.barStyle.maxHeight;\n        /**调整比例关系 只有两类数时，柱子高度成比例*/\n        // 去重\n        let datavals = this._barData.vals.filter((val, index, arr) => arr.indexOf(val)===index);\n        if (datavals.length === 2 && xmax !== 0 && xmin !== 0 && xmax !== xmin) {\n            let ratio = 0;\n            if (xmax * xmin > 0) {\n                if (xmin > 0) {\n                    ratio = xmin / xmax;\n                } else {\n                    ratio = Math.abs(xmax / xmin);\n                }\n            } else {\n                ratio = 1 / (xmax - xmin);\n            }\n            ymin = Math.max(ymax * ratio, ymin);\n        }\n        let barHeight = Util.normalizeValue(item.value, xmin, xmax, ymin, ymax, 0);\n        return barHeight;\n    }\n    getBarColor(item, index) {\n        const barStyle = this.options.barStyle;\n        let color = \"#fff\";\n        let cLen = barStyle.defaultColor.length;\n        if (barStyle.grandientColor) {\n            let xmin = this._colorsData.min;\n            let xmax = this._colorsData.max;\n            let ymin = 1;\n            let ymax = 256;\n            let num = Util.normalizeValue(this._colorsData.data[index], xmin, xmax, ymin, ymax, 1);\n            if (isNaN(num)) {\n                throw new Error('柱形图颜色计算错误！');\n            }\n            color = this.getInterPolateColor(num, barStyle.grandientColor);\n        } else if (barStyle.enumColor) {\n           let enumcolor = barStyle.enumColor[item.name] || barStyle.enumColor[item.id];\n           color = enumcolor && enumcolor.color;\n           if(!color){\n            color = barStyle.defaultColor[index % cLen]\n           }\n        } else {\n            color = barStyle.defaultColor[index % cLen]\n        }\n        return color;\n    }\n    getInterPolateColor(num, g) {\n        num = Math.round(num);\n        g = g || [\n            { value: 1, color: '#EF6064'},\n            { value: 0, color: '#FFA9A9'}\n        ]\n        if (this._imgData == null) {\n            const canvas = document.createElement('canvas');\n            canvas.height = 1;\n            canvas.width = 256;\n            const ctx = canvas.getContext('2d');\n            const grandient = ctx.createLinearGradient(0, 0, 256, 0);\n            g.forEach(item => {\n                grandient.addColorStop(item.value, item.color);\n            })\n            ctx.fillStyle = grandient;\n            ctx.fillRect(0, 0, 256, 1);\n            this._imgData = ctx.getImageData(0, 0, 256, 1).data;\n        }\n        return `rgba(${this._imgData[4 * (num-1)]},${this._imgData[4 * (num-1)+1]},${this._imgData[4 * (num-1)+2]},${this._imgData[4 * (num-1)+3]})`\n    }\n    _draw() {\n        if (this._barData.data == null || !this._barData.data.length) {return;}\n        this._barData.data.forEach((item, index) => {\n            let barHeight = this.getBarHeight(item);\n            let barColor = this.getBarColor(item, index);\n            let yoffset = this.geojsonLayer ? this.geojsonLayer.getDepth() : 0;\n            // let projCenter = this._map.projectLngLat(item.center);\n            let bar = this._createBar(item.center, barHeight, barColor, yoffset);\n            bar.userData = Util.extend(true, {type: 'bar'}, item);\n            this._container.add(bar);   \n        });\n        if (this.options.barText.show) {\n            this._addTextLayer();\n        } \n        if (this.options.isMatchGeoJson) {\n            this.geojsonLayer.updateLabels(this);\n        }\n        if (this.options.barTooltip.show) {\n            this._map.on('mousemove', this._mousemoveEvtHandler, this);\n        }\n    }\n    _mousemoveEvtHandler(event) {\n        const mapSize = this._map.getContainerSize();\n        const camera = this._map.getCamera();\n        const sx = event.offsetX; \n        const sy = event.offsetY;\n        const cx = event.clientX;\n        const cy = event.clientY;\n        //屏幕坐标转标准设备坐标\n        const x = (sx / mapSize.width) * 2 - 1; \n        const y = -(sy / mapSize.height) * 2 + 1;\n        //标准设备坐标\n        const standardVector = new THREE.Vector3(x, y, 0.5); \n        //标准设备坐标转世界坐标\n        const worldVector = standardVector.unproject(camera);\n        //射线投射方向单位向量(worldVector坐标减相机位置坐标)\n        const ray = worldVector.sub(camera.position).normalize();\n        //创建射线投射器对象\n        const raycaster = new THREE.Raycaster(camera.position, ray);\n        //返回射线选中的对象\n        const intersects = raycaster.intersectObjects(this._container.children);\n      \n        // 避免连续选中\n        if (this._currentSelectObj) {\n            this._currentSelectObj.material.transparent = false;\n            this._currentSelectObj.material.opacity = 1;\n            this._currentSelectObj = null;\n            this._toolTipHelper && this._toolTipHelper.hideTooltip(); // TODO: bdp\n        }\n\n        for (var i = 0; i < intersects.length; i++) {\n            let object = intersects[i].object;\n            let udata = object.userData;\n            if (udata && udata.type === 'bar') {\n                let color = object.material.color.getHexString();\n                object.material.transparent = true;\n                object.material.opacity = 0.85;\n                this._currentSelectObj = object;\n                \n                let content = `\n                    <div class=\"mb4\" style=\"text-align:center;\">${udata['name']}</div>\n                    <div style=\"color:#${color};\"><span>${udata['ylabelName']}：</span> ${udata['formattedVal']}</div>\n                `;\n                // console.log(udata.name);\n                this._toolTipHelper && this._toolTipHelper.showTooltip(cx, cy, content); // TODO: bdp\n                break;\n            }\n        }\n        if (i === intersects.length) {\n            if (this._currentSelectObj) {\n                this._currentSelectObj.material.transparent = false;\n                this._currentSelectObj.material.opacity = 1;\n                this._currentSelectObj = null;\n                this._toolTipHelper && this._toolTipHelper.hideTooltip(); // TODO: bdp\n            }\n        }\n    }\n    _createBar(center, height, color, yoffset) {\n        const barStyle = this.options.barStyle;\n        const halfWidth = barStyle.width / 2;\n\n        const shape = new THREE.Shape();\n        shape.moveTo(-halfWidth, -halfWidth);\n        shape.lineTo(-halfWidth, halfWidth);\n        shape.lineTo(halfWidth, halfWidth);\n        shape.lineTo(halfWidth, -halfWidth);\n        shape.lineTo(-halfWidth, -halfWidth);\n  \n        const extrudeSettings = {\n          curveSegments: 0,\n          steps: 0,\n          depth: height,\n          bevelEnabled: true,\n          bevelThickness: barStyle.bevelThickness,\n          bevelSize: barStyle.bevelSize,\n          bevelSegments: barStyle.bevelSegments\n        };\n        const geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);\n        const material = new THREE.MeshPhongMaterial({ color: color });\n        const mesh = new THREE.Mesh(geometry, material);\n        let lnglat = [center[0], center[1], yoffset];\n        let projCenter = this._map.projectLngLat(lnglat);\n\n        if (this._map.options.type === 'plane') {\n            mesh.position.set(projCenter[0], projCenter[2], -projCenter[1]);\n            mesh.rotateX(-Math.PI / 2);\n        } else { \n            // 变换柱子，让其与球面垂直\n            // 先沿 Y 轴旋转，由于零度经线与z轴正半轴相差90度，故加经纬加90度偏移\n            mesh.rotateY(THREE.Math.degToRad(center[0] + 90));\n            // 坐标在xz平面投影向量\n            let v1 = new THREE.Vector3(projCenter[0], 0, projCenter[2]).normalize();\n            // y轴方向向量\n            let v2 = new THREE.Vector3(0, 1, 0).normalize();\n            // 原始坐标向量\n            let v3 = new THREE.Vector3(projCenter[0], projCenter[1], projCenter[2]).normalize();\n             // 法向量，clone防止原始向量被更改\n            let v = v1.clone().cross(v2.clone()).normalize();\n            // 旋转角\n            let deg = v1.angleTo(v3);\n            if (center[1] < 0) {\n                deg = -deg;\n            }\n            // 沿着法向量旋转纬度角，注意相对于世界坐标系\n            mesh.rotateOnWorldAxis(v, deg);\n            // 将柱子放到球面上\n            mesh.position.set(projCenter[0], projCenter[1], projCenter[2]);\n        }\n        return mesh;\n    }\n    _addTextLayer() {\n        let textData = [];\n        this._barData.data.forEach((item, index) => {\n            let barHeight = this.getBarHeight(item);\n            let yoffset = this.geojsonLayer.getDepth();\n            let tempobj = {};\n            tempobj.text = item.formattedVal;\n            tempobj.center = item.center;\n            tempobj.altitude = barHeight + yoffset + this.options.barText.offset;\n            textData.push(tempobj);\n        });\n        const options = {\n            textStyle: this.options.barText.textStyle\n        };\n        this._textLayer = new TextLayer(textData, options);\n        this._map.addLayer(this._textLayer);\n    }\n}","// code from: https://github.com/spite/THREE.MeshLine\n// I modify the shader code to display flyline effect.\nexport function MeshLine() {\n\n\tthis.positions = [];\n\n\tthis.previous = [];\n\tthis.next = [];\n\tthis.side = [];\n\tthis.width = [];\n\tthis.indices_array = [];\n\tthis.uvs = [];\n\tthis.counters = [];\n\tthis.geometry = new THREE.BufferGeometry();\n\n\tthis.widthCallback = null;\n\n}\n\nMeshLine.prototype.setGeometry = function( g, c ) {\n\n\tthis.widthCallback = c;\n\n\tthis.positions = [];\n\tthis.counters = [];\n\n\tif( g instanceof THREE.Geometry ) {\n\t\tfor( var j = 0; j < g.vertices.length; j++ ) {\n\t\t\tvar v = g.vertices[ j ];\n\t\t\tvar c = j/g.vertices.length;\n\t\t\tthis.positions.push( v.x, v.y, v.z );\n\t\t\tthis.positions.push( v.x, v.y, v.z );\n\t\t\tthis.counters.push(c);\n\t\t\tthis.counters.push(c);\n\t\t}\n\t}\n\n\tif( g instanceof THREE.BufferGeometry ) {\n\t\t// read attribute positions ?\n\t}\n\n\tif( g instanceof Float32Array || g instanceof Array ) {\n\t\tfor( var j = 0; j < g.length; j += 3 ) {\n\t\t\tvar c = j/g.length;\n\t\t\tthis.positions.push( g[ j ], g[ j + 1 ], g[ j + 2 ] );\n\t\t\tthis.positions.push( g[ j ], g[ j + 1 ], g[ j + 2 ] );\n\t\t\tthis.counters.push(c);\n\t\t\tthis.counters.push(c);\n\t\t}\n\t}\n\n\tthis.process();\n\n}\n\nMeshLine.prototype.compareV3 = function( a, b ) {\n\n\tvar aa = a * 6;\n\tvar ab = b * 6;\n\treturn ( this.positions[ aa ] === this.positions[ ab ] ) && ( this.positions[ aa + 1 ] === this.positions[ ab + 1 ] ) && ( this.positions[ aa + 2 ] === this.positions[ ab + 2 ] );\n\n}\n\nMeshLine.prototype.copyV3 = function( a ) {\n\n\tvar aa = a * 6;\n\treturn [ this.positions[ aa ], this.positions[ aa + 1 ], this.positions[ aa + 2 ] ];\n\n}\n\nMeshLine.prototype.process = function() {\n\n\tvar l = this.positions.length / 6;\n\n\tthis.previous = [];\n\tthis.next = [];\n\tthis.side = [];\n\tthis.width = [];\n\tthis.indices_array = [];\n\tthis.uvs = [];\n\n\tfor( var j = 0; j < l; j++ ) {\n\t\tthis.side.push( 1 );\n\t\tthis.side.push( -1 );\n\t}\n\n\tvar w;\n\tfor( var j = 0; j < l; j++ ) {\n\t\tif( this.widthCallback ) w = this.widthCallback( j / ( l -1 ) );\n\t\telse w = 1;\n\t\tthis.width.push( w );\n\t\tthis.width.push( w );\n\t}\n\n\tfor( var j = 0; j < l; j++ ) {\n\t\tthis.uvs.push( j / ( l - 1 ), 0 );\n\t\tthis.uvs.push( j / ( l - 1 ), 1 );\n\t}\n\n\tvar v;\n\n\tif( this.compareV3( 0, l - 1 ) ){\n\t\tv = this.copyV3( l - 2 );\n\t} else {\n\t\tv = this.copyV3( 0 );\n\t}\n\tthis.previous.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\tthis.previous.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\tfor( var j = 0; j < l - 1; j++ ) {\n\t\tv = this.copyV3( j );\n\t\tthis.previous.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\t\tthis.previous.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\t}\n\n\tfor( var j = 1; j < l; j++ ) {\n\t\tv = this.copyV3( j );\n\t\tthis.next.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\t\tthis.next.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\t}\n\n\tif( this.compareV3( l - 1, 0 ) ){\n\t\tv = this.copyV3( 1 );\n\t} else {\n\t\tv = this.copyV3( l - 1 );\n\t}\n\tthis.next.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\tthis.next.push( v[ 0 ], v[ 1 ], v[ 2 ] );\n\n\tfor( var j = 0; j < l - 1; j++ ) {\n\t\tvar n = j * 2;\n\t\tthis.indices_array.push( n, n + 1, n + 2 );\n\t\tthis.indices_array.push( n + 2, n + 1, n + 3 );\n\t}\n\n\tif (!this.attributes) {\n\t\tthis.attributes = {\n\t\t\tposition: new THREE.BufferAttribute( new Float32Array( this.positions ), 3 ),\n\t\t\tprevious: new THREE.BufferAttribute( new Float32Array( this.previous ), 3 ),\n\t\t\tnext: new THREE.BufferAttribute( new Float32Array( this.next ), 3 ),\n\t\t\tside: new THREE.BufferAttribute( new Float32Array( this.side ), 1 ),\n\t\t\twidth: new THREE.BufferAttribute( new Float32Array( this.width ), 1 ),\n\t\t\tuv: new THREE.BufferAttribute( new Float32Array( this.uvs ), 2 ),\n\t\t\tindex: new THREE.BufferAttribute( new Uint16Array( this.indices_array ), 1 ),\n\t\t\tcounters: new THREE.BufferAttribute( new Float32Array( this.counters ), 1 )\n\t\t}\n\t} else {\n\t\tthis.attributes.position.copyArray(new Float32Array(this.positions));\n\t\tthis.attributes.position.needsUpdate = true;\n\t\tthis.attributes.previous.copyArray(new Float32Array(this.previous));\n\t\tthis.attributes.previous.needsUpdate = true;\n\t\tthis.attributes.next.copyArray(new Float32Array(this.next));\n\t\tthis.attributes.next.needsUpdate = true;\n\t\tthis.attributes.side.copyArray(new Float32Array(this.side));\n\t\tthis.attributes.side.needsUpdate = true;\n\t\tthis.attributes.width.copyArray(new Float32Array(this.width));\n\t\tthis.attributes.width.needsUpdate = true;\n\t\tthis.attributes.uv.copyArray(new Float32Array(this.uvs));\n\t\tthis.attributes.uv.needsUpdate = true;\n\t\tthis.attributes.index.copyArray(new Uint16Array(this.indices_array));\n\t\tthis.attributes.index.needsUpdate = true;\n    }\n\n\tthis.geometry.addAttribute( 'position', this.attributes.position );\n\tthis.geometry.addAttribute( 'previous', this.attributes.previous );\n\tthis.geometry.addAttribute( 'next', this.attributes.next );\n\tthis.geometry.addAttribute( 'side', this.attributes.side );\n\tthis.geometry.addAttribute( 'width', this.attributes.width );\n\tthis.geometry.addAttribute( 'uv', this.attributes.uv );\n\tthis.geometry.addAttribute( 'counters', this.attributes.counters );\n\n\tthis.geometry.setIndex( this.attributes.index );\n\n}\n\nfunction memcpy (src, srcOffset, dst, dstOffset, length) {\n\tvar i\n\n\tsrc = src.subarray || src.slice ? src : src.buffer\n\tdst = dst.subarray || dst.slice ? dst : dst.buffer\n\n\tsrc = srcOffset ? src.subarray ?\n\tsrc.subarray(srcOffset, length && srcOffset + length) :\n\tsrc.slice(srcOffset, length && srcOffset + length) : src\n\n\tif (dst.set) {\n\t\tdst.set(src, dstOffset)\n\t} else {\n\t\tfor (i=0; i<src.length; i++) {\n\t\t\tdst[i + dstOffset] = src[i]\n\t\t}\n\t}\n\n\treturn dst\n}\n\n/**\n * Fast method to advance the line by one position.  The oldest position is removed.\n * @param position\n */\nMeshLine.prototype.advance = function(position) {\n\n\tvar positions = this.attributes.position.array;\n\tvar previous = this.attributes.previous.array;\n\tvar next = this.attributes.next.array;\n\tvar l = positions.length;\n\n\t// PREVIOUS\n\tmemcpy( positions, 0, previous, 0, l );\n\n\t// POSITIONS\n\tmemcpy( positions, 6, positions, 0, l - 6 );\n\n\tpositions[l - 6] = position.x;\n\tpositions[l - 5] = position.y;\n\tpositions[l - 4] = position.z;\n\tpositions[l - 3] = position.x;\n\tpositions[l - 2] = position.y;\n\tpositions[l - 1] = position.z;\n\n    // NEXT\n\tmemcpy( positions, 6, next, 0, l - 6 );\n\n\tnext[l - 6]  = position.x;\n\tnext[l - 5]  = position.y;\n\tnext[l - 4]  = position.z;\n\tnext[l - 3]  = position.x;\n\tnext[l - 2]  = position.y;\n\tnext[l - 1]  = position.z;\n\n\tthis.attributes.position.needsUpdate = true;\n\tthis.attributes.previous.needsUpdate = true;\n\tthis.attributes.next.needsUpdate = true;\n\n};\n\nexport function MeshLineMaterial( parameters ) {\n\n\tvar vertexShaderSource = [\n'precision highp float;',\n'',\n'attribute vec3 position;',\n'attribute vec3 previous;',\n'attribute vec3 next;',\n'attribute float side;',\n'attribute float width;',\n'attribute vec2 uv;',\n'attribute float counters;',\n'attribute float dist;',\n'attribute float distAll;',\n'attribute float start;',\n'',\n'uniform mat4 projectionMatrix;',\n'uniform mat4 modelViewMatrix;',\n'uniform vec2 resolution;',\n'uniform float lineWidth;',\n'uniform vec3 color;',\n'uniform float opacity;',\n'uniform float near;',\n'uniform float far;',\n'uniform float sizeAttenuation;',\n'uniform float speed;',\n'uniform float trailLength;',\n'uniform float time;',\n'uniform float period;',\n'uniform float spotSize;',\n'uniform bool hasEffect;',\n'',\n'varying vec2 vUV;',\n'varying vec4 vColor;',\n'varying float vCounters;',\n'varying float v_Percent;',\n'',\n'vec2 fix( vec4 i, float aspect ) {',\n'',\n'    vec2 res = i.xy / i.w;',\n'    res.x *= aspect;',\n'\t vCounters = counters;',\n'    return res;',\n'',\n'}',\n'',\n'void main() {',\n'',\n'    float aspect = resolution.x / resolution.y;',\n'\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);',\n'',\n'    vColor = vec4( color, opacity );',\n'    vUV = uv;',\n'',\n'    mat4 m = projectionMatrix * modelViewMatrix;',\n'    vec4 finalPosition = m * vec4( position, 1.0 );',\n'    vec4 prevPos = m * vec4( previous, 1.0 );',\n'    vec4 nextPos = m * vec4( next, 1.0 );',\n'',\n'    vec2 currentP = fix( finalPosition, aspect );',\n'    vec2 prevP = fix( prevPos, aspect );',\n'    vec2 nextP = fix( nextPos, aspect );',\n'',\n'\t float pixelWidth = finalPosition.w * pixelWidthRatio;',\n'    float w = 1.8 * pixelWidth * lineWidth * width;',\n'',\n'    if( sizeAttenuation == 1. ) {',\n'        w = 1.8 * lineWidth * width;',\n'    }',\n'',\n'    vec2 dir;',\n'    if( nextP == currentP ) dir = normalize( currentP - prevP );',\n'    else if( prevP == currentP ) dir = normalize( nextP - currentP );',\n'    else {',\n'        vec2 dir1 = normalize( currentP - prevP );',\n'        vec2 dir2 = normalize( nextP - currentP );',\n'        dir = normalize( dir1 + dir2 );',\n'',\n'        vec2 perp = vec2( -dir1.y, dir1.x );',\n'        vec2 miter = vec2( -dir.y, dir.x );',\n'        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );',\n'',\n'    }',\n'',\n'    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;',\n'    vec2 normal = vec2( -dir.y, dir.x );',\n'    normal.x /= aspect;',\n'    normal *= .5 * w;',\n'',\n'    vec4 offset = vec4( normal * side, 0.0, 1.0 );',\n'    finalPosition.xy += offset.xy;',\n'',\n'    gl_Position = finalPosition;',\n\n'if (hasEffect) {',\n\t'#ifdef CONSTANT_SPEED',\n\t'',\n\t'float t = mod((speed * time + start) / distAll, 1. + trailLength) - trailLength;',\n\t'#else',\n\t'',\n\t'float t = mod((time + start) / period, 1. + trailLength) - trailLength;',\n\t'#endif',\n\t'',\n\t'float trailLen = distAll * trailLength;',\n\t'v_Percent = (dist - t * distAll) / trailLen;',\n'} ',\n'}' ];\n\n\tvar fragmentShaderSource = [\n'#extension GL_OES_standard_derivatives : enable',\n'precision mediump float;',\n'',\n'uniform sampler2D map;',\n'uniform sampler2D alphaMap;',\n'uniform float useMap;',\n'uniform float useAlphaMap;',\n'uniform float useDash;',\n'uniform float dashArray;',\n'uniform float dashOffset;',\n'uniform float dashRatio;',\n'uniform float visibility;',\n'uniform float alphaTest;',\n'uniform vec2 repeat;',\n'uniform bool hasEffect;',\n'uniform vec4 baseColor;',\n'',\n'varying vec2 vUV;',\n'varying vec4 vColor;',\n'varying float vCounters;',\n'varying float v_Percent;',\n'',\n'void main() {',\n'',\n'if (hasEffect){',\n\t'if (v_Percent > 1.0 || v_Percent < 0.0) {',\n\t    'discard;',\n\t'}',\n\t'float fade = v_Percent;',\n\t'#ifdef SRGB_DECODE',\n\t'',\n\t'gl_FragColor = sRGBToLinear(baseColor * vColor);',\n\t'#else',\n\t'',\n\t'gl_FragColor = baseColor * vColor;',\n\t'#endif',\n\t'',\n\t'gl_FragColor.a *= fade;',\n'} else {',\n'    vec4 c = vColor;',\n'    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );',\n'    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;',\n'    if( c.a < alphaTest ) discard;',\n'    if( useDash == 1. ){',\n'        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));',\n'    }',\n'    gl_FragColor = c;',\n'    gl_FragColor.a *= step(vCounters, visibility);',\n'}',\n'}' ];\n\n\tfunction check( v, d ) {\n\t\tif( v === undefined ) return d;\n\t\treturn v;\n\t}\n\n\tTHREE.Material.call( this );\n\n\tparameters = parameters || {};\n\n\tthis.lineWidth = check( parameters.lineWidth, 1 );\n\tthis.map = check( parameters.map, null );\n\tthis.useMap = check( parameters.useMap, 0 );\n\tthis.alphaMap = check( parameters.alphaMap, null );\n\tthis.useAlphaMap = check( parameters.useAlphaMap, 0 );\n\tthis.color = check( parameters.color, new THREE.Color( 0xffffff ) );\n\tthis.opacity = check( parameters.opacity, 1 );\n\tthis.resolution = check( parameters.resolution, new THREE.Vector2( 1, 1 ) );\n\tthis.sizeAttenuation = check( parameters.sizeAttenuation, 1 );\n\tthis.near = check( parameters.near, 1 );\n\tthis.far = check( parameters.far, 1 );\n\tthis.dashArray = check( parameters.dashArray, 0 );\n\tthis.dashOffset = check( parameters.dashOffset, 0 );\n\tthis.dashRatio = check( parameters.dashRatio, 0.5 );\n\tthis.useDash = ( this.dashArray !== 0 ) ? 1 : 0;\n\tthis.visibility = check( parameters.visibility, 1 );\n\tthis.alphaTest = check( parameters.alphaTest, 0 );\n\tthis.repeat = check( parameters.repeat, new THREE.Vector2( 1, 1 ) );\n\n\tvar material = new THREE.RawShaderMaterial( {\n\t\tuniforms:{\n\t\t\tlineWidth: { type: 'f', value: this.lineWidth },\n\t\t\tmap: { type: 't', value: this.map },\n\t\t\tuseMap: { type: 'f', value: this.useMap },\n\t\t\talphaMap: { type: 't', value: this.alphaMap },\n\t\t\tuseAlphaMap: { type: 'f', value: this.useAlphaMap },\n\t\t\tcolor: { type: 'c', value: this.color },\n\t\t\topacity: { type: 'f', value: this.opacity },\n\t\t\tresolution: { type: 'v2', value: this.resolution },\n\t\t\tsizeAttenuation: { type: 'f', value: this.sizeAttenuation },\n\t\t\tnear: { type: 'f', value: this.near },\n\t\t\tfar: { type: 'f', value: this.far },\n\t\t\tdashArray: { type: 'f', value: this.dashArray },\n\t\t\tdashOffset: { type: 'f', value: this.dashOffset },\n\t\t\tdashRatio: { type: 'f', value: this.dashRatio },\n\t\t\tuseDash: { type: 'f', value: this.useDash },\n\t\t\tvisibility: {type: 'f', value: this.visibility},\n\t\t\talphaTest: {type: 'f', value: this.alphaTest},\n\t\t\trepeat: { type: 'v2', value: this.repeat }\n\t\t},\n\t\tvertexShader: vertexShaderSource.join( '\\r\\n' ),\n        fragmentShader: fragmentShaderSource.join( '\\r\\n' ),\n        // 如果不透明度低于此值，则不会渲染材质。默认值为0。\n        // 此处避免出现白色尾线\n\t\ttransparent: true,\n        alphaTest: 0.8\n\t});\n\n\tdelete parameters.lineWidth;\n\tdelete parameters.map;\n\tdelete parameters.useMap;\n\tdelete parameters.alphaMap;\n\tdelete parameters.useAlphaMap;\n\tdelete parameters.color;\n\tdelete parameters.opacity;\n\tdelete parameters.resolution;\n\tdelete parameters.sizeAttenuation;\n\tdelete parameters.near;\n\tdelete parameters.far;\n\tdelete parameters.dashArray;\n\tdelete parameters.dashOffset;\n\tdelete parameters.dashRatio;\n\tdelete parameters.visibility;\n\tdelete parameters.alphaTest;\n\tdelete parameters.repeat;\n\n\tmaterial.type = 'MeshLineMaterial';\n\n\tmaterial.setValues( parameters );\n\n\treturn material;\n\n};\n\nMeshLineMaterial.prototype = Object.create( THREE.Material.prototype );\nMeshLineMaterial.prototype.constructor = MeshLineMaterial;\n\nMeshLineMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.lineWidth = source.lineWidth;\n\tthis.map = source.map;\n\tthis.useMap = source.useMap;\n\tthis.alphaMap = source.alphaMap;\n\tthis.useAlphaMap = source.useAlphaMap;\n\tthis.color.copy( source.color );\n\tthis.opacity = source.opacity;\n\tthis.resolution.copy( source.resolution );\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\tthis.near = source.near;\n\tthis.far = source.far;\n\tthis.dashArray.copy( source.dashArray );\n\tthis.dashOffset.copy( source.dashOffset );\n\tthis.dashRatio.copy( source.dashRatio );\n\tthis.useDash = source.useDash;\n\tthis.visibility = source.visibility;\n\tthis.alphaTest = source.alphaTest;\n\tthis.repeat.copy( source.repeat );\n\n\treturn this;\n\n};","import Layer from './layer';\nimport * as Util from '../util';\n// import { lineShader } from './shader/line';\nimport {MeshLine, MeshLineMaterial} from './custom-meshline';\nimport PointLayer from './point-layer';\n\n// 飞线图层\nexport default class FlyLineLayer extends Layer {\n    constructor(data, options, geojsonLayer) {\n        super(data, options);\n        const defaultOptions = {\n            heightLimit: 30, // 飞线最高点高度\n            lngMaxRange: 60, // 经度间隔大于该值时需插入一个点\n            // 线样式\n            lineStyle: {\n                show: true,\n                color: '#0f0',\n                opacity: 0.5,\n                width: 1\n            },\n            pointStyle: {\n                show: false,\n                size: 3,\n                texture: '../../images/disc.png', //  url or null\n                color: '#0f0',\n                opacity: 1,\n                tooltip: true,\n                hightLight: true,\n                hightLightColor: '#f00',\n                pointText: {\n                    show: false,\n                    showField: 'name',\n                    yoffset: 1,\n                    textStyle: {\n                        fontStyle: 'normal',\n                        fontWeight: 'normal',\n                        fontSize: '12px',\n                        fontFamily: 'Microsoft YaHei',\n                        fontColor: '#000',\n                        textAlign: 'center',\n                        textBaseline: 'middle'\n                    }\n                }\n            },\n            // 飞线特效样式\n            effect: {\n                show: false,\n                segmentNumber: 1, // 飞线分段数，自然数，默认为1，不分段\n                period: 4, // 尾迹特效的周期\n                constantSpeed: null, // 尾迹特效是否是固定速度，设置后忽略period值\n                trailWidth: 4, // 尾迹宽度\n                trailLength: 0.1, // 尾迹长度，范围 0-1，为线条长度百分比\n                trailColor: null, // 尾迹颜色，默认跟线颜色相同\n                trailOpacity: null, // 尾迹不透明度，默认跟线相同\n                spotIntensity: 5.0 // 头部高亮部分强度（TODO:暂时不可用）\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this.geojsonLayer = geojsonLayer;\n\n        this.uniforms = {\n            baseColor: {value: [1.0, 1.0, 1.0, 1.0]},\n            time: {value: 0},\n            speed: {value: 0},\n            period: {value: 5000},\n            trailLength: {value:1.0},\n            spotSize: {value: 10.0},\n            spotIntensity: {value: 5.0},\n            hasEffect: { value: 0 }\n        };\n        this._maxDistance = 0;\n        this._pointsData = [];\n        this.animate();\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n        this._drawPoints();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        if (this._animateId) {\n            window.cancelAnimationFrame(this._animateId);\n        }\n        if (this._pointLayer) {\n            this._map.removeLayer(this._pointLayer);\n        }\n    }\n    animate(time) {\n        this._animateId = requestAnimationFrame(this.animate.bind(this));\n        this.uniforms.time.value  = time;\n    }\n    _draw() {\n        let depth = this.geojsonLayer ? this.geojsonLayer.getDepth() : 0;\n        let heightLimit = this.options.heightLimit;\n        this._data.forEach(item => {\n            let fname = item.from.data;\n            let tname = item.to.data;\n            let startLnglat = item.from.location.split(',').map(p => Number(p));\n            let endLnglat = item.to.location.split(',').map(p => Number(p));\n            let keyLngLats = this._getKeyLngLats(startLnglat, endLnglat);\n            \n            // 处理第三个坐标海拔高度\n            let len = keyLngLats.length;\n            for (let i = 0; i < len; i++) {\n                let lnglat = keyLngLats[i];\n                if (i === 0 || i === len-1) { // 起点和终点\n                    if(this._map.options.type === 'plane') {\n                        lnglat.push(depth);\n                    } else {\n                        lnglat.push(0);\n                    }\n                } else { // 中间点\n                    if(this._map.options.type === 'plane') {\n                        lnglat.push(heightLimit + depth);\n                    } else {\n                        lnglat.push(heightLimit);\n                    }\n                }\n            }\n            \n            // 投影到三维坐标\n            let projPoints = keyLngLats.map(lnglat => this._map.projectLngLat(lnglat));\n            \n            // 绘制\n            if (this.options.lineStyle.show) {\n                this._drawLine2(projPoints);\n            }\n            if (this.options.effect.show) {\n                this.uniforms.hasEffect.value = 1;\n                this._drawFlyLine(projPoints);\n            }\n\n            // 处理飞线点\n            if (this.options.pointStyle.show) {\n                let fromLngLat = keyLngLats[0];\n                let toLngLat = keyLngLats[len-1];\n                if(this._map.options.type === 'sphere') {\n                    const size = this.options.pointStyle.size;\n                    fromLngLat[2] = size/2;\n                    toLngLat[2] = size/2;\n                }\n                let tempPt1 = {\n                    points: [fromLngLat],\n                    info: { name: fname}\n                };\n                let tempPt2 = {\n                    points: [toLngLat],\n                    info: { name: tname }\n                };\n                this._addPoints(tempPt1, tempPt2);\n            }\n        });\n    }\n    // 获取中心点经纬度，考虑大圆航线\n    _getKeyLngLats(f, t) {\n        const keyPoints = [];\n        \n        // 插入起点\n        keyPoints.push(f);\n\n        // 插入中间点\n        if (this._map.options.type === 'plane') {\n            keyPoints.push([(f[0]+t[0])/2, (f[1]+t[1])/2]);\n        } else {\n            // 处理球面中间点\n            const interpolatePoint = (lPt, rPt) => {\n                // 计算中间最高点经纬度\n                let mPt, mLng, mLat;\n                const lngDiff = Math.abs(lPt[0]-rPt[0]);\n                let calculateLngDiff;\n                if (lngDiff > 180) {\n                    mLng = (lPt[0]+360+rPt[0])/2;\n                    calculateLngDiff = lPt[0] > 0 ? Math.abs(lPt[0]-360-rPt[0]) : Math.abs(lPt[0]+360-rPt[0]);\n                } else {\n                    mLng = (lPt[0]+rPt[0])/2;\n                    calculateLngDiff = lngDiff;\n                }\n                mLat = (lPt[1]+rPt[1])/2;\n                mPt = [mLng, mLat];\n    \n                // 经度间隔大于 LNG_STEP 度插入一个点\n                const LNG_STEP = this.options.lngMaxRange;\n                if(calculateLngDiff > LNG_STEP) {\n                    interpolatePoint(lPt, mPt);\n                    keyPoints.push(mPt);\n                    interpolatePoint(mPt, rPt);\n                } else {\n                    // 至少插入一个点\n                    if (keyPoints.length < 3) {\n                        keyPoints.push(mPt);\n                    }\n                }\n            }\n            interpolatePoint(f, t);\n        }\n\n        // 插入终点\n        keyPoints.push(t);\n\n        return keyPoints;\n    }\n    _addPoints() {\n        let ptArr = Array.from(arguments);\n        ptArr.forEach(ptObj => {\n            this._addPoint(ptObj);\n        });\n    }\n    _addPoint(ptObj) {\n        // 去重\n        let hasAdd = this._pointsData.some(item => {\n            let srcPt = item.points[0];\n            let targetPt = ptObj.points[0];\n            return srcPt[0] === targetPt[0] && srcPt[1] === targetPt[1];\n        });\n        if (!hasAdd) {\n            this._pointsData.push(ptObj);\n        }\n    }\n    _drawPoints() {\n        if (!this.options.pointStyle.show || !this._pointsData.length) {\n            return;\n        }\n        const pointStyle = this.options.pointStyle;\n        const pointOptions = {\n            size: pointStyle.size,\n            style: {\n                texture: pointStyle.texture, //  url or null\n                color: pointStyle.color,\n                opacity: pointStyle.opacity,\n            },\n            tooltip: {\n                show: !!pointStyle.tooltip\n            },\n            hightLight: {\n                show: !!pointStyle.hightLight,\n                color: pointStyle.hightLightColor\n            },\n            pointText: pointStyle.pointText\n        };\n        this._pointLayer = new PointLayer(this._pointsData, pointOptions);\n        this._map.addLayer(this._pointLayer);\n    }\n    _getCurve(keyPoints) { \n        const pointVectors = keyPoints.map(point => new THREE.Vector3(point[0], point[1], point[2]));\n        return new THREE.CatmullRomCurve3(pointVectors);;\n    }\n\n    _drawLine(startPoint, endPoint, midPoint) {  \n        const curve = this._getCurve(startPoint, endPoint, midPoint);\n        const points = curve.getPoints( 50 );\n        let geometry = new THREE.BufferGeometry().setFromPoints( points );\n        \n        let options = {\n            color: this.options.lineStyle.color,\n            linewidth: this.options.lineStyle.width\n        };\n        let material = new THREE.LineBasicMaterial( options );\n        material.transparent = true;\n        material.opacity = this.options.lineStyle.opacity;\n        \n        // Create the final object to add to the scene\n        let curveObject = new THREE.Line( geometry, material );\n        if (this._map.options.type === 'plane') {\n            curveObject.rotateX(-Math.PI/2);\n        }\n        \n        this._container.add(curveObject);\n\n    }\n    // 此方法绘制的线条可设置宽度\n    _drawLine2(keyPoints) {  \n        const size = this._map.getContainerSize();\n        const curve = this._getCurve(keyPoints);\n        const points = curve.getPoints( 50 );\n\n        const geometry = new THREE.Geometry().setFromPoints( points );\n        \n        const line = new MeshLine();\n        line.setGeometry(geometry);\n\n        const resolution = new THREE.Vector2(size.width, size.height);\n        const lineColor = new THREE.Color(this.options.lineStyle.color);\n        const opacity = this.options.lineStyle.opacity;\n        const shaderMaterial = new MeshLineMaterial({\n            resolution: resolution,\n            color: lineColor,\n            opacity: opacity,\n            sizeAttenuation: false,\n            lineWidth: this.options.lineStyle.width\n        });\n\n        const lineMesh = new THREE.Mesh(line.geometry, shaderMaterial);\n        if (this._map.options.type === 'plane') {\n            lineMesh.rotateX(-Math.PI/2);\n        }\n        \n        this._container.add(lineMesh);\n    }\n    _drawFlyLine(keyPoints) {\n        const curve = this._getCurve(keyPoints);\n        const points = curve.getPoints(50);\n        let segmentNum = this.options.effect.segmentNumber;\n        if (segmentNum <= 1) {\n            // 不分段\n            this._drawSegment(points);\n        } else {\n            let plen = points.length;\n            let step = Math.floor(plen / segmentNum);\n            if(step > 0) {\n                for (let count = 0; count < segmentNum; count++) {\n                    let startIndex = count * step;\n                    let endIndex = count * step + step + 1;\n                    if (count === segmentNum - 1) {\n                        endIndex = plen - 1;\n                    }\n                    let segPoints = points.slice(startIndex, endIndex);\n                    this._drawSegment(segPoints);\n                }\n            } else {\n                // 分段数大于所有点数时，不分段\n                this._drawSegment(points);\n            }\n        }\n    }\n    _drawSegment(points) {\n        const size = this._map.getContainerSize();\n        const effectOptions = this.options.effect;\n        const useConstantSpeed = effectOptions.constantSpeed != null;\n        const period = effectOptions.period * 1000;\n        \n        const verticeArr = []; // 顶点数组\n        const distArr = []; // 距离原点距离数组\n        const disAllArr = []; // 总距离数组\n        const startArr = []; // 起始位置数组\n        \n        let dist = 0;\n        for (let i = 0, len = points.length; i < len; i++) {\n            verticeArr.push(points[i].x, points[i].y, points[i].z);\n            if (i > 0) {\n                dist += points[i].distanceTo(points[i-1]);\n            }\n            distArr.push(dist);\n            distArr.push(dist);\n        }\n        this._maxDistance = Math.max(this._maxDistance, dist);\n        const randomStart = Math.random() * (useConstantSpeed ? dist : period);\n        for (let i = 0, len = points.length; i < len; i++) {\n            disAllArr.push(dist);\n            disAllArr.push(dist);\n            startArr.push(randomStart);\n            startArr.push(randomStart);\n        }\n        \n        const line = new MeshLine();\n        line.setGeometry(verticeArr);\n\n        const geometry = line.geometry;\n        geometry.addAttribute('dist', new THREE.BufferAttribute( new Float32Array(distArr), 1 ));\n        geometry.addAttribute('distAll', new THREE.BufferAttribute( new Float32Array(disAllArr), 1 ));\n        geometry.addAttribute('start', new THREE.BufferAttribute( new Float32Array(startArr), 1 ));\n        \n        this.uniforms.spotSize.value =  this._maxDistance * 0.1 * effectOptions.trailLength;\n        this.uniforms.trailLength.value = effectOptions.trailLength;\n        this.uniforms.spotIntensity.value = effectOptions.spotIntensity;\n        \n        const resolution = new THREE.Vector2(size.width, size.height);\n        const lineColor = new THREE.Color(effectOptions.trailColor || this.options.lineStyle.color);\n        const opacity = effectOptions.trailOpacity != null ? effectOptions.trailOpacity : this.options.lineStyle.opacity;\n        const shaderMaterial = new MeshLineMaterial({\n            resolution: resolution,\n            color: lineColor,\n            opacity: opacity,\n            sizeAttenuation: false,\n            lineWidth: effectOptions.trailWidth\n        });\n\n        if (useConstantSpeed) {\n            this.uniforms.speed.value = effectOptions.constantSpeed / 1000;\n            shaderMaterial.defines = { CONSTANT_SPEED: effectOptions.constantSpeed };\n        } else {\n            this.uniforms.period.value = period;\n        }\n        Object.assign(shaderMaterial.uniforms, this.uniforms);\n\n        const lineMesh = new THREE.Mesh(line.geometry, shaderMaterial);\n        if (this._map.options.type === 'plane') {\n            lineMesh.rotateX(-Math.PI/2);\n        }\n\n        this._container.add(lineMesh);\n    }\n}","import Layer from './layer';\nimport * as Util from '../util';\nimport * as mapHelper from '../maphelper';\nimport TextLayer from './text-layer';\nimport ToolTip from '../tooltip';\nimport {MeshLine, MeshLineMaterial} from './custom-meshline';\n// geojson 地图\nexport default class GeoJSONLayer extends Layer {\n    constructor(data, options) {\n        super(data, options);\n        const defaultOptions = {\n            // 是否自动适配尺寸。如果设置为 true，配置项中的 depth\\offset\\scale 等尺寸会根据当前行政区来自动适配，用户传入的值就无效了。\n            isAutoResize: true, \n            // 适配参数，仅当 isAutoResize 设置为 true 时有效。\n            resizeParam: {\n                depth: 1.5,\n                offset: 0,\n                scale1: 22,\n                scale2: 20\n            }, \n            isExtrude: true, // 是否拉伸面\n            depth: 16, // 拉伸厚度\n            forceBoundsCenter: false, // 地区中心点是否计算成外包矩形中心点\n            // 地区名字\n            areaText: {\n                show: true, // 是否显示【无数据】区域文字，不能控制无数据区域文字\n                offset: 1, // 文字离地面高度\n                textStyle: { // 有数据地区的名字样式\n                    show: true, // 是否显示有数据地区文字\n                    scale: 1, // 缩放比例\n                    fontStyle: 'normal',\n                    fontWeight: 'normal',\n                    fontSize: '16px',\n                    fontFamily: 'Microsoft YaHei',\n                    fontColor: '#000',\n                    textAlign: 'center',\n                    textBaseline: 'middle',\n                    maxWidth: 512,\n                    offsetY: 0\n                },\n                nullTextStyle: { // 无数据地区的名字样式\n                    scale: 1, // 缩放比例\n                    fontStyle: 'normal',\n                    fontWeight: 'normal',\n                    fontSize: '16px',\n                    fontFamily: 'Microsoft YaHei',\n                    fontColor: '#000',\n                    textAlign: 'center',\n                    textBaseline: 'middle',\n                    maxWidth: 512,\n                    offsetY: 0\n                }\n            },\n            lineOpacity: 1,\n            lineMaterial: {\n                color: 0x999999,\n                linewidth: 1.5\n            },\n            areaMaterial: { // 面材质配置\n                color: 0x00ff00,\n                side: THREE.DoubleSide\n            },\n            hightLight: {\n                show: false,\n                color: '#639fc0'\n            },\n            tooltip: {\n                show: true\n            },\n            outline: {\n                top: {\n                    show: false,\n                    color: 0x00ff00,\n                    width: 1,\n                    opacity: 1\n                },\n                bottom: {\n                    show: false,\n                    color: 0x00ff00,\n                    width: 1,\n                    opacity: 1\n                }\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this._initFeatures();\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._initBoundsAndCenter();\n        if (this.options.isAutoResize) {\n            this._initResizeOptions();\n        }\n        this._draw();\n        this.updateLabels();\n        if (this.options.hightLight.show) {\n            this._map.on('mousemove', this._mousemoveEvtHandler, this);\n        }\n        if (this.options.tooltip.show) {\n            this._tooltip = new ToolTip(this._map.getContainerElement());\n        }\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        this._textLayer && this._map.removeLayer(this._textLayer);\n        this._nulltextLayer && this._map.removeLayer(this._nulltextLayer);\n        this._map.off('mousemove', this._mousemoveEvtHandler, this);\n        this._tooltip && this._tooltip.remove();\n        this._tooltip = null;\n    }\n    getBounds() {\n        return this._bounds;\n    }\n    getCenter() {\n        return this._center;\n    }\n    getFeatures() {\n        return this._features || [];\n    }\n    getDepth() {\n        if (this.options.isExtrude) {\n            return this.options.depth;\n        } else {\n            return 0;\n        }\n    }\n    getRatio() {\n        return this._ratio;\n    }\n    createFeatureArray(json) {\n        var feature_array = [];\n        var temp_feature;\n\n        if (json.type == 'Feature') {\n            feature_array.push(json);\n        } else if (json.type == 'FeatureCollection') {\n            for (var feature_num = 0; feature_num < json.features.length; feature_num++) {\n                feature_array.push(json.features[feature_num]);\n            }\n        } else if (json.type == 'GeometryCollection') {\n            for (var geom_num = 0; geom_num < json.geometries.length; geom_num++) {\n                temp_feature = {\n                    geometry: json.geometries[geom_num]\n                }\n                feature_array.push(temp_feature);\n            }\n        } else {\n            throw new Error('The geoJSON is not valid.');\n        }\n        return feature_array;\n    }\n    createCoordinateArray(feature) {\n        //Loop through the coordinates and figure out if the points need interpolation.\n        var temp_array = [];\n        var interpolation_array = [];\n\n        for (var point_num = 0; point_num < feature.length; point_num++) {\n            var point1 = feature[point_num];\n            var point2 = feature[point_num - 1];\n\n            if (point_num > 0) {\n                if (this.needsInterpolation(point2, point1)) {\n                    interpolation_array = [point2, point1];\n                    interpolation_array = this.interpolatePoints(interpolation_array);\n\n                    for (var inter_point_num = 0; inter_point_num < interpolation_array.length; inter_point_num++) {\n                        temp_array.push(interpolation_array[inter_point_num]);\n                    }\n                } else {\n                    temp_array.push(point1);\n                }\n            } else {\n                temp_array.push(point1);\n            }\n        }\n        return temp_array;\n    }\n    needsInterpolation(point2, point1) {\n        //If the distance between two latitude and longitude values is\n        //greater than five degrees, return true.\n        var lon1 = point1[0];\n        var lat1 = point1[1];\n        var lon2 = point2[0];\n        var lat2 = point2[1];\n        var lon_distance = Math.abs(lon1 - lon2);\n        var lat_distance = Math.abs(lat1 - lat2);\n\n        if (lon_distance > 5 || lat_distance > 5) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    interpolatePoints(interpolation_array) {\n        //This function is recursive. It will continue to add midpoints to the\n        //interpolation array until needsInterpolation() returns false.\n        var temp_array = [];\n        var point1, point2;\n\n        for (var point_num = 0; point_num < interpolation_array.length - 1; point_num++) {\n            point1 = interpolation_array[point_num];\n            point2 = interpolation_array[point_num + 1];\n\n            if (this.needsInterpolation(point2, point1)) {\n                temp_array.push(point1);\n                temp_array.push(this.getMidpoint(point1, point2));\n            } else {\n                temp_array.push(point1);\n            }\n        }\n\n        temp_array.push(interpolation_array[interpolation_array.length - 1]);\n\n        if (temp_array.length > interpolation_array.length) {\n            temp_array = this.interpolatePoints(temp_array);\n        } else {\n            return temp_array;\n        }\n        return temp_array;\n    }\n    getMidpoint(point1, point2) {\n        var midpoint_lon = (point1[0] + point2[0]) / 2;\n        var midpoint_lat = (point1[1] + point2[1]) / 2;\n        var midpoint = [midpoint_lon, midpoint_lat];\n\n        return midpoint;\n    }\n    convertCoordinates(coordinateArray) {\n        return coordinateArray.map(lnglat => {\n            let mecatorPoint = mapHelper.wgs84ToMecator(lnglat);\n            return mecatorPoint.map(p => p / this._map.options.SCALE_RATIO);\n        });\n    }\n    _initBoundsAndCenter() {\n        let bounds;\n        let mapOptions = this._map.options;\n        if (mapOptions.type === 'plane') {\n            if (mapOptions.region === 'world') {\n                bounds = mapHelper.getBounds('world', mapOptions.crs);\n            } else if (mapOptions.region === 'china') {\n                bounds = mapHelper.getBounds('china', mapOptions.crs);\n            } else {\n                bounds = mapHelper.getBounds(this._data, mapOptions.crs);\n            }\n        } else {\n            // sphere\n        }\n        if (bounds) {\n            if (mapOptions.crs === mapHelper.CRS.epsg4326) {\n                this._bounds = bounds;\n                this._center = bounds.getCenter();\n            } else {\n                let scale = mapOptions.SCALE_RATIO;\n                this._bounds = bounds.scale(1/scale);\n                this._center = this._bounds.getCenter();\n            }\n        }\n    }\n    _initResizeOptions() {\n        const ratio = this._map.getRatio(this._bounds);\n        const resizeParam = this.options.resizeParam;\n        this.options.depth = resizeParam.depth * ratio;\n        this.options.areaText.offset = resizeParam.offset * ratio;\n        this.options.areaText.textStyle.scale = resizeParam.scale1 * ratio;\n        this.options.areaText.nullTextStyle.scale = resizeParam.scale2 * ratio;\n        this._ratio = ratio;\n    }\n    _initFeatures() {\n        this._features = this.createFeatureArray(this._data);\n    }\n    _draw() {\n        if (this._features == null || !this._features.length) {return;}\n        for (let i = 0, len = this._features.length; i < len; i++) {\n            let feature = this._features[i];\n            let geometry = feature.geometry;\n            let userData = {\n                name: mapHelper.getNormalizeName(feature)\n            };\n            let featureGroup = new THREE.Group();\n            this._container.add(featureGroup);\n            if (geometry == null) continue;\n            if (geometry.type == 'Point') {\n\n            } else if (geometry.type == 'MultiPoint') {\n\n            } else if (geometry.type == 'LineString') {\n\n            } else if (geometry.type == 'MultiLineString') {\n\n            } else if (geometry.type == 'Polygon') {\n                for (let segment_num = 0; segment_num < geometry.coordinates.length; segment_num++) {\n                    let coordinate_array = this.createCoordinateArray(geometry.coordinates[segment_num]);\n                    let convert_array = coordinate_array;\n                    if (this._map.options.crs === mapHelper.CRS.epsg3857) {\n                        convert_array = this.convertCoordinates(coordinate_array);\n                    }\n                    this.drawPolygon(convert_array, userData, featureGroup);\n                }\n\n            } else if (geometry.type == 'MultiPolygon') {\n                for (let polygon_num = 0; polygon_num < geometry.coordinates.length; polygon_num++) {\n                    for (let segment_num = 0; segment_num < geometry.coordinates[polygon_num].length; segment_num++) {\n                        let coordinate_array = this.createCoordinateArray(geometry.coordinates[polygon_num][segment_num]);\n                        let convert_array = coordinate_array;\n                        if (this._map.options.crs === mapHelper.CRS.epsg3857) {\n                            convert_array = this.convertCoordinates(coordinate_array);\n                        }\n                        this.drawPolygon(convert_array, userData, featureGroup);\n                    }\n                }\n            } else {\n                throw new Error('The geoJSON is not valid.');\n            }\n        }\n    }\n    _mousemoveEvtHandler(event) {\n        const mapSize = this._map.getContainerSize();\n        const camera = this._map.getCamera();\n        const sx = event.offsetX; \n        const sy = event.offsetY;\n        const cx = event.clientX;\n        const cy = event.clientY;\n        //屏幕坐标转标准设备坐标\n        const x = (sx / mapSize.width) * 2 - 1; \n        const y = -(sy / mapSize.height) * 2 + 1;\n        //标准设备坐标\n        const standardVector = new THREE.Vector3(x, y, 0.5); \n        //标准设备坐标转世界坐标\n        const worldVector = standardVector.unproject(camera);\n        //射线投射方向单位向量(worldVector坐标减相机位置坐标)\n        const ray = worldVector.sub(camera.position).normalize();\n        //创建射线投射器对象\n        const raycaster = new THREE.Raycaster(camera.position, ray);\n        //返回射线选中的对象\n        const intersects = raycaster.intersectObjects(this._container.children, true);\n      \n        // 避免连续选中\n        if (this._currentSelectGroup) {\n            this._currentSelectGroup.children.forEach(obj => {\n                obj.material.color = obj.userData.oldColor;\n            });\n            this._currentSelectGroup = null;\n            this._tooltip && this._tooltip.close();\n        }\n\n        for (var i = 0; i < intersects.length; i++) {\n            let object = intersects[i].object;\n            let udata = object.userData;\n            if (udata && udata.type === 'area') { \n                this._currentSelectGroup = object.parent;\n                this._currentSelectGroup.children.forEach(obj => {\n                    obj.userData.oldColor = obj.material.color;\n                    obj.material.color = new THREE.Color(this.options.hightLight.color);\n                });\n                let content = `${udata['name']}`;\n                this._tooltip && this._tooltip.open(sx, sy, content);\n                break;\n            }\n        }\n        if (i === intersects.length) {\n            if (this._currentSelectGroup) {\n                this._currentSelectGroup.children.forEach(obj => {\n                    obj.material.color = obj.userData.oldColor;\n                });\n                this._currentSelectGroup = null;\n                this._tooltip && this._tooltip.close();\n            }\n        }\n    }\n    updateLabels(barLayer) {\n        if (this._features == null || !this._features.length) {return;}\n        let barWidth = 0;\n        if (barLayer) {\n            barWidth = barLayer.options.barStyle.width;\n        }\n        let textData = [];\n        let nullTextData = [];\n        let forceBoundsCenter = this.options.forceBoundsCenter;\n        // if (this._map.options.region === 'china' || this._map.options.region === 'world') {\n        //     forceBoundsCenter = false;\n        // }\n\n        for (let i = 0, len = this._features.length; i < len; i++) {\n            let f = this._features[i];\n            let yoffset = this.getDepth();\n            let tempobj = {};\n            let name = mapHelper.getNormalizeName(f);\n            let center = mapHelper.getNormalizeCenter(f, forceBoundsCenter);\n            if (center == null || !Array.isArray(center)) {\n                continue; // geometry 为null时得不到center\n            }\n            // FIXME: 采用简单粗暴方法避免文字覆盖\n            tempobj.textAlign = 'center';\n            if (new RegExp(name).test('香港')) {\n                tempobj.textAlign = 'left'\n            } else if (new RegExp(name).test('澳门')) {\n                tempobj.textAlign = 'right'\n            } else if (new RegExp(name).test('广东')) {\n                tempobj.textBaseline = 'bottom'\n            } else if (new RegExp(name).test('北京')) {\n                tempobj.textAlign = 'right'\n            } else if (new RegExp(name).test('天津')) {\n                tempobj.textAlign = 'left'\n            }\n            tempobj.text = name;\n            tempobj.center = center;\n            tempobj.center[1] += barWidth*2; // TODO: 避免文字覆盖柱子\n            tempobj.altitude = yoffset + this.options.areaText.offset;\n            if (f.hasBarData) {\n                textData.push(tempobj);\n            } else {\n                nullTextData.push(tempobj);\n            }  \n        }\n        const textOptions = {\n            textStyle: this.options.areaText.textStyle\n        };\n        const nullTextOptions = {\n            textStyle: this.options.areaText.nullTextStyle\n        };\n        if (this.options.areaText.textStyle.show) {\n            if (this._textLayer) {\n                this._textLayer.update(textData);\n            } else {\n                this._textLayer = new TextLayer(textData, textOptions);\n                this._map.addLayer(this._textLayer);\n            }\n        }\n        if (this.options.areaText.show) {\n            if (this._nulltextLayer) {\n                this._nulltextLayer.update(nullTextData);\n            } else {\n                this._nulltextLayer = new TextLayer(nullTextData, nullTextOptions);\n                this._map.addLayer(this._nulltextLayer);\n            }\n        }\n    }\n    drawOutLine(points, mesh) {\n        // 画轮廓线\n        // 因为面是画在xy平面的，然后通过旋转而来，为了保持一致，轮廓线也绘制在xy平面，这样变换就能与面同步\n        let line_geom = new THREE.Geometry();\n        for (let i = 0, len=points.length; i < len ; i++) {\n            line_geom.vertices.push(new THREE.Vector3(points[i][0], points[i][1], 0));\n        }\n        let line_material = new THREE.LineBasicMaterial(this.options.lineMaterial);\n        line_material.transparent = false;\n        line_material.opacity = this.options.lineOpacity;\n        let line = new THREE.Line(line_geom, line_material);\n        if (this.options.isExtrude) {\n            line.translateZ(this.options.depth);\n        }\n        line.renderOrder = 98;\n        mesh.add(line);\n    }\n    drawOutLine2(points, mesh, isZoffset = false) {\n        const size = this._map.getContainerSize();\n\n        points = points.map(pt => new THREE.Vector3(pt[0], pt[1], 0));\n\n        const geometry = new THREE.Geometry().setFromPoints( points );\n        \n        const line = new MeshLine();\n        line.setGeometry(geometry);\n\n        const resolution = new THREE.Vector2(size.width, size.height);\n        const outlineOptions = this.options.outline;\n        let color = isZoffset ? outlineOptions.top.color : outlineOptions.bottom.color;\n        const lineColor = new THREE.Color(color);\n        const opacity = isZoffset ? outlineOptions.top.opacity : outlineOptions.bottom.opacity;\n        const linewidth = isZoffset ? outlineOptions.top.width : outlineOptions.bottom.width;\n        const shaderMaterial = new MeshLineMaterial({\n            resolution: resolution,\n            color: lineColor,\n            opacity: opacity,\n            sizeAttenuation: false,\n            lineWidth: linewidth\n        });\n\n        const lineMesh = new THREE.Mesh(line.geometry, shaderMaterial);\n        if (this.options.isExtrude && isZoffset) {\n            lineMesh.translateZ(this.options.depth);\n        }\n        lineMesh.renderOrder = 99;\n        mesh.add(lineMesh);\n    }\n    drawPolygon(points, userData, container) {\n        const shape = new THREE.Shape();\n        for (let i = 0; i < points.length; i++) {\n            let point = points[i];\n            if (i === 0) {\n                shape.moveTo(point[0], point[1]);\n            } else {\n                shape.lineTo(point[0], point[1]);\n            }\n        }\n        shape.closePath();\n\n        let geometry, material;\n\n        if (this.options.isExtrude) {\n            // 拉伸\n            let extrudeSettings = {\n                depth: this.options.depth, \n                bevelEnabled: false   // 是否用斜角\n            };\n            geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);\n            material = new THREE.MeshPhongMaterial(this.options.areaMaterial);\n        } else {\n            // 不拉伸\n            geometry = new THREE.ShapeBufferGeometry(shape);\n            material = new THREE.MeshBasicMaterial(this.options.areaMaterial);\n        }\n        \n        let mesh = new THREE.Mesh(geometry, material);\n        this.drawOutLine(points, mesh);\n        if (this.options.outline.top.show) {\n            this.drawOutLine2(points, mesh, true);\n        }\n        if (this.options.outline.bottom.show) {\n            this.drawOutLine2(points, mesh, false);\n        }\n        mesh.rotateX(-Math.PI/2);\n        mesh.userData = Util.extend({type: 'area'}, userData);\n        container.add(mesh);\n    }\n}","import * as Util from '../util';\nimport EventEmiter from '../eventemiter';\nexport default class Layer extends EventEmiter {\n    constructor(data, options) {\n        super();\n        var defaultOptions = {};\n        this.options = Util.extend(true, defaultOptions, options);\n        this._data = data;\n        this._container = new THREE.Group();\n    }\n    getContainer() {\n        return this._container;\n    }\n    getData() {\n        return this._data;\n    }\n    getMap() {\n        return this._map;\n    }\n    onAdd(map) {\n        this._map = map;\n    }\n    onRemove(map) {}\n}","import Layer from './layer';\nimport * as Util from '../util';\nimport ToolTip from '../tooltip';\nimport TextLayer from './text-layer';\nexport default class PointLayer extends Layer {\n    constructor(data, options) {\n        // data: [{points:[],info:{}}, {points:[],info:null}, ....]\n        super(data, options);\n        const defaultOptions = {\n            size: 3,\n            style: {\n                texture: '../../images/disc.png', //  url or null\n                color: '#0f0',\n                opacity: 1,\n            },\n            tooltip: {\n                show: false\n            },\n            hightLight: {\n                show: true,\n                color: '#f00'\n            },\n            pointText: {\n                show: false,\n                showField: 'name',\n                yoffset: 1,\n                textStyle: {\n                    fontStyle: 'normal',\n                    fontWeight: 'normal',\n                    fontSize: '12px',\n                    fontFamily: 'Microsoft YaHei',\n                    fontColor: '#000',\n                    textAlign: 'center',\n                    textBaseline: 'middle'\n                }\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options); \n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n        if (this.options.hightLight.show || this.options.tooltip.show) {\n            this._map.on('mousemove', this._mousemoveEvtHandler, this);\n        }\n        if (this.options.tooltip.show) {\n            this._tooltip = new ToolTip(this._map.getContainerElement());\n        }\n        if (this.options.pointText.show) {\n           this._addTextLayer();\n        }\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        this._map.off('mousemove', this._mousemoveEvtHandler, this);\n        if (this._textLayer) {\n            this._map.removeLayer(this._textLayer);\n        }\n    }\n    _draw() {\n        this._data.forEach(item => {\n            let points = item.points;\n            let info = item.info;\n            const materialOptions = {\n                color: this.options.style.color,\n                alphaTest: 0.1,\n                size: this.options.size,\n                opacity: this.options.style.opacity\n            };\n\n            if (this.options.style.texture) {\n                if (!this._loader) this._loader = new THREE.TextureLoader();\n                if (!this._texture) this._texture = this._loader.load( this.options.style.texture );\n                materialOptions.map = this._texture;\n            }\n            \n            points = points.map(pt => {\n                let prjPt = this._map.projectLngLat(pt);\n                if (this._map.options.type === 'sphere') {\n                    return new THREE.Vector3(prjPt[0], prjPt[1], prjPt[2]);\n                } else {\n                    return new THREE.Vector3(prjPt[0], pt[2], -prjPt[1]);\n                }\n            });\n\n            const pointGeometry = new THREE.BufferGeometry();\n            pointGeometry.setFromPoints(points);\n\n            const pointsMaterial = new THREE.PointsMaterial( materialOptions );\n            pointsMaterial.transparent = true;\n\n            const pointsObj = new THREE.Points( pointGeometry, pointsMaterial );\n            if (this._map.options.type === 'plane') {\n                // 球形地图不要加此属性\n                pointsObj.renderOrder=99;\n                pointsObj.material.depthTest=false;\n            }\n            pointsObj.userData = Util.extend({type: 'point'}, info);\n            \n            this._container.add(pointsObj);\n        });\n    }\n    _addTextLayer() {\n        let textData = [];\n        this._data.forEach(item => {\n            let info = item.info;\n            item.points.forEach(pt => {\n                let tempobj = {};\n                tempobj.center = [pt[0], pt[1]];\n                tempobj.altitude = this.options.pointText.yoffset +  pt[2];\n                tempobj.text = info ? info[this.options.pointText.showField] : '';\n                textData.push(tempobj);\n            });\n        });\n        this._textLayer = new TextLayer(textData, { textStyle: this.options.pointText.textStyle });\n        this._map.addLayer(this._textLayer);\n    }\n    _mousemoveEvtHandler(event) {\n        const mapSize = this._map.getContainerSize();\n        const camera = this._map.getCamera();\n        const sx = event.offsetX; \n        const sy = event.offsetY;\n        const cx = event.clientX;\n        const cy = event.clientY;\n        //屏幕坐标转标准设备坐标\n        const x = (sx / mapSize.width) * 2 - 1; \n        const y = -(sy / mapSize.height) * 2 + 1;\n        //标准设备坐标\n        const standardVector = new THREE.Vector3(x, y, 0.5); \n        //标准设备坐标转世界坐标\n        const worldVector = standardVector.unproject(camera);\n        //射线投射方向单位向量(worldVector坐标减相机位置坐标)\n        const ray = worldVector.sub(camera.position).normalize();\n        //创建射线投射器对象\n        const raycaster = new THREE.Raycaster(camera.position, ray);\n        //返回射线选中的对象\n        const intersects = raycaster.intersectObjects(this._container.children);\n      \n        // 避免连续选中\n        if (this._currentSelectObj) {\n            if (this.options.hightLight.show) {\n                this._currentSelectObj.material.color = this._currentSelectObj.userData.oldColor;\n            }\n            this._currentSelectObj = null;\n            this._tooltip && this._tooltip.close();\n        }\n\n        for (var i = 0; i < intersects.length; i++) {\n            let object = intersects[i].object;\n            let udata = object.userData;\n            if (udata && udata.type === 'point') {\n                if (this.options.hightLight.show) {\n                    object.userData.oldColor = object.material.color;\n                    object.material.color = new THREE.Color(this.options.hightLight.color);\n                }\n                this._currentSelectObj = object;\n                let content = `${udata['name']}`;\n                this._tooltip && this._tooltip.open(sx, sy, content);\n                break;\n            }\n        }\n        if (i === intersects.length) {\n            if (this._currentSelectObj) {\n                if (this.options.hightLight.show) {\n                    this._currentSelectObj.material.color = this._currentSelectObj.userData.oldColor;\n                }\n                this._currentSelectObj = null;\n                this._tooltip && this._tooltip.close();\n            }\n        }\n    }\n}","import Layer from './layer';\nimport * as Util from '../util';\nimport TextSprite from './text-sprite';\nimport { worldToScreen, isPOICollision } from '../maphelper';\n\n// 文字标注图层\nexport default class TextLayer extends Layer {\n    constructor(data, options) {\n        super(data, options);\n        const defaultOptions = {\n            isAvoidCollision: true, // 是否避免文字碰撞，默认为 true，即文字会根据缩放级别显示和隐藏，不会相互覆盖；若设置为 false，则文字会全部显示\n            textStyle: {\n                scale: 1, // 注意：此属性失效\n                fontStyle: 'normal',\n                fontWeight: 'normal',\n                fontSize: '16px',\n                fontFamily: 'Microsoft YaHei',\n                fontColor: '#000',\n                textAlign: 'center',\n                textBaseline: 'middle',\n                maxWidth: 512,\n                offsetY: 0, // 为避免文字覆盖柱子，设置文字偏移中心点\n                opacity: 0.85\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n        this._textSprites = [];\n        this._texts = [];\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n        if (this.options.isAvoidCollision) {\n            setTimeout(() => {\n                this._collisionDetect();\n            }, 0);\n            this._map.on('change', this._mapChangeEvtHandler, this);\n        }\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        this._map.off('change', this._mapChangeEvtHandler, this);\n    }\n    update(data) {\n        this._container.remove(...this._container.children);\n        this._data = data;\n        this._draw();\n        if (this.options.isAvoidCollision) {\n            setTimeout(() => {\n                this._collisionDetect();\n            }, 0);\n        }\n    }\n    updateScale() {\n        if (!this._map) {\n            return;\n        }\n        const camera = this._map.getCamera();\n        const size = this._map.getContainerSize();\n        this._textSprites.forEach(sprite => {\n            sprite.setScale(camera, size);\n        });\n    }\n    _draw() {\n        if (this._data == null || !this._data.length) {return;}\n        this._textSprites = [];\n        this._data.forEach(d => {\n            const projCenter = this._map.projectLngLat(d.center);\n            const altitude = d.altitude;\n            // 为了避免文字覆盖，对每个文字设置不同的对齐方式 \n            if (d.textAlign != null) {\n                this.options.textStyle.textAlign = d.textAlign;\n            }\n            const ts = new TextSprite(d.text, this.options.textStyle);\n            const textSprite = ts.getSprite();\n            // const scale = this.options.textStyle.scale;\n\n            // textSprite.scale.set(scale, scale, 1);\n            const offsetY = this.options.textStyle.offsetY;\n            textSprite.position.set(projCenter[0], altitude, -projCenter[1]-offsetY);\n            textSprite.rotateX(-Math.PI/2);\n\n            // 避免柱子遮挡地名\n            textSprite.renderOrder = 100;\n            textSprite.material.depthTest=false; // 是否采用深度测试，必须加\n            \n            this._textSprites.push(ts);\n            if (!this.options.isAvoidCollision) {\n                this._container.add(textSprite);\n            }\n        });\n    }\n\n    _mapChangeEvtHandler() {\n        this._collisionDetect();\n    }\n\n    // 文字碰撞检测 window.geojsonLayer._nulltextLayer._collisionDetect()\n    // TODO: 视口裁剪，只计算视口内的部分\n    _collisionDetect() {\n        this._texts = [];\n\n        this._textSprites.forEach(textSprite => {\n            // 碰撞检测\n            let obj = {};\n            const sprite = textSprite.getSprite();\n            const screenPoint = worldToScreen(sprite.position.toArray(), this._map, sprite);\n            const size = textSprite.getTextSize();\n            obj.x = screenPoint[0];\n            obj.y = screenPoint[1];\n            obj.w = size.width;\n            obj.h = size.height;\n            obj.show = true;\n            this._texts.push(obj);\n        });\n\n        const len = this._texts.length;\n        for (let i = 0; i < len; i++) {\n            let text1 = this._texts[i];\n            for (let j = i+1; j < len; j++) {\n                let text2 = this._texts[j];\n                if (isPOICollision(text1, text2)) {\n                    text2.show = false;\n                } \n            }\n        }\n\n        // 隐藏重叠元素\n        this._texts.forEach((text, index) => {\n            if (text.show) {\n                this._textSprites[index].show();\n            } else {\n                this._textSprites[index].hide();\n            }\n        });\n        \n        // draw\n        this._textSprites.forEach(textSprite => {\n            const sprite = textSprite.getSprite();\n            this._container.add(sprite);\n        });\n    }\n}","import * as Util from '../util';\n\n// 字体精灵\nexport default class TextSprite {\n    constructor(text, options) {\n        const defaultOptions = {\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            fontSize: '16px',\n            fontFamily: 'Microsoft YaHei',\n            fontColor: '#000',\n            textAlign: 'center',\n            textBaseline: 'middle',\n            opacity: 0.85,\n            maxWidth: 512\n        }\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this._textStr = text == null ? '' : String(text);\n\n        this._init();\n    }\n    getSprite() {\n        return this._textSprite;\n    }\n    // canvas 样式尺寸\n    getSize() {\n        return {\n            width: this._width,\n            height: this._height\n        };\n    }\n    // 实际显示文字的尺寸\n    getTextSize() {\n        return {\n            width: this._textWidth,\n            height: this._textHeight\n        };\n    }\n    // idea from https://www.cnblogs.com/dojo-lzz/p/7143276.html\n    setScale(camera, containerSize) {\n        const DEG2RAD = Math.PI / 180;\n        let pos = this._textSprite.position;\n        let distance = camera.position.distanceTo(pos);\n        let top = Math.tan(camera.fov / 2 * DEG2RAD) * distance;\n        let ratio = 2 * top / containerSize.height;\n        let scaleX = this._width * ratio;\n        let scaleY = this._height * ratio;\n        this._textSprite.scale.set(scaleX, scaleY, 1);\n    }\n\n    hide() {\n        this._textSprite.material.opacity = 0;\n    }\n\n    show() {\n        this._textSprite.material.opacity = this.options.opacity;\n    }\n\n    _init() {\n        const font = `${this.options.fontStyle} ${this.options.fontWeight} ${this.options.fontSize} ${this.options.fontFamily}`;\n        const textSize = Util.measureText(this._textStr, font);\n        \n        if (this.options.textAlign !== 'center') {\n            textSize.width *= 1.5;\n        }\n        if (this.options.textBaseline !== 'middle') {\n            textSize.height *= 1.5;\n        }\n\n        const canvasWidth = Util.wrapNum(textSize.width);\n        const canvasHeight = Util.wrapNum(textSize.height);\n        this._width = canvasWidth;\n        this._height = canvasHeight;\n        this._textWidth = textSize.width;\n        this._textHeight = textSize.height;\n\n        const canvas = document.createElement(\"canvas\");\n        // webgl 规定 canvas 宽高为2的n次幂，对老式GPU的支持\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        \n        // 适配高清屏：将 canvas 画布尺寸扩大 dpr 倍，视口尺寸设为原始值，并且 canvas 内部所有元素大小扩大 dpr 倍\n        const dpr = Util.getDpr();\n        canvas.style.width = canvasWidth + \"px\";\n        canvas.style.height = canvasHeight + \"px\";\n        canvas.height = canvasHeight * dpr;\n        canvas.width = canvasWidth * dpr;\n\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // draw\n        const drpFont = `${this.options.fontStyle} ${this.options.fontWeight} ${parseInt(this.options.fontSize) * dpr + 'px'} ${this.options.fontFamily}`;\n        ctx.font = drpFont;\n        ctx.fillStyle = this.options.fontColor;\n        ctx.textAlign = this.options.textAlign;\n        ctx.textBaseline = this.options.textBaseline;\n        ctx.fillText(this._textStr, canvas.width / 2, canvas.height / 2, this.options.maxWidth);\n\n        const texture = new THREE.Texture(canvas);\n        texture.needsUpdate = true;\n\n        const spriteMaterial = new THREE.SpriteMaterial({\n            map: texture,\n            transparent:true\n        });\n        spriteMaterial.opacity = this.options.opacity;\n        this._textSprite = new THREE.Sprite(spriteMaterial);\n    }\n}","import Bounds from './bounds';\n\nconst R = 6378137; // 地球半径（米）\nconst R_MINOR = 6356752.314245179;\nconst BOUND = new Bounds(-20037508.34279, -15496570.73972, 20037508.34279, 18764656.23138);\n\nexport const CRS = {\n    epsg4326: 'EPSG:4326',\n    epsg3857: 'EPSG:3857'\n}\n\n// 经纬度转墨卡托\nexport function wgs84ToMecator(lnglat) {\n    var d = Math.PI / 180,\n        r = R,\n        y = lnglat[1] * d,\n        tmp = R_MINOR / r,\n        e = Math.sqrt(1 - tmp * tmp),\n        con = e * Math.sin(y);\n\n    var ts = Math.tan(Math.PI / 4 - y / 2) / Math.pow((1 - con) / (1 + con), e / 2);\n    y = -r * Math.log(Math.max(ts, 1E-10));\n\n    return [lnglat[0] * d * r, y];\n}\n\n// 墨卡托转经纬度\nexport function mecatorToWgs84(point) {\n    var d = 180 / Math.PI,\n        r = R,\n        tmp = R_MINOR / r,\n        e = Math.sqrt(1 - tmp * tmp),\n        ts = Math.exp(-point[1] / r),\n        phi = Math.PI / 2 - 2 * Math.atan(ts);\n\n    for (var i = 0, dphi = 0.1, con; i < 15 && Math.abs(dphi) > 1e-7; i++) {\n        con = e * Math.sin(phi);\n        con = Math.pow((1 - con) / (1 + con), e / 2);\n        dphi = Math.PI / 2 - 2 * Math.atan(ts * con) - phi;\n        phi += dphi;\n    }\n\n    return [point[0] * d / r, phi * d];\n}\n\n// 根据geojson数据获取geo对象在墨卡托投影平面的范围\nexport function getBounds(geojson, crs) {\n    crs = crs || CRS.epsg4326;\n    // 中国和世界范围写死，避免大量计算\n    if (geojson === 'world') {\n        let xmin = -180;\n        let ymin = -58.502571;\n        let xmax = 180;\n        let ymax = 83.610184;\n        let lb = [xmin, ymin];\n        let rt = [xmax, ymax];\n        if (crs === CRS.epsg3857) {\n            lb = wgs84ToMecator(lb);\n            rt = wgs84ToMecator(rt);\n        }\n        return new Bounds(lb, rt);\n    } else if (geojson === 'china') {\n        let xmin = 73.4766;\n        let xmax = 135.0879;\n        let ymin = 18.1055;\n        let ymax = 53.5693;\n        let lb = [xmin, ymin];\n        let rt = [xmax, ymax];\n        if (crs === CRS.epsg3857) {\n            lb = wgs84ToMecator(lb);\n            rt = wgs84ToMecator(rt);\n        }\n        return new Bounds(lb, rt);\n    } else {\n        let bound = {\n            xmin: 180,\n            xmax: -180,\n            ymin: 90,\n            ymax: -90\n        };\n        let features = [];\n        let polygons = [];\n        if (geojson.type === \"FeatureCollection\") {\n            features = geojson.features;\n        } else if (geojson.type === \"Feature\") {\n            features.push(geojson);\n        }\n        features.forEach(f => {\n            if (f.geometry && f.geometry.type === \"Polygon\") {\n                polygons.push(f.geometry.coordinates);\n            } else if (f.geometry && f.geometry.type === \"MultiPolygon\") {\n                for (let i = 0, len = f.geometry.coordinates.length; i < len; i++) {\n                    polygons.push(f.geometry.coordinates[i]);\n                }\n            }\n        });\n        for (let i = 0, len = polygons.length; i < len; i++) {\n            let seg = polygons[i];\n            for (let j = 0; j < seg.length; j++) {\n                let coords = seg[j];\n                for (let k = 0; k < coords.length; k++) {\n                    let coord = coords[k];\n                    if (coord[0] < bound.xmin) {\n                        bound.xmin = coord[0];\n                    }\n                    if (coord[0] > bound.xmax) {\n                        bound.xmax = coord[0];\n                    }\n                    if (coord[1] < bound.ymin) {\n                        bound.ymin = coord[1];\n                    }\n                    if (coord[1] > bound.ymax) {\n                        bound.ymax = coord[1];\n                    }\n                }\n            }\n        }\n        let lb = [bound.xmin, bound.ymin];\n        let rt = [bound.xmax, bound.ymax];\n        if (crs === CRS.epsg3857) {\n            lb = wgs84ToMecator(lb);\n            rt = wgs84ToMecator(rt);\n        }\n        return new Bounds(lb, rt);\n    }\n}\n\nexport function getNormalizeCenter(feature, forceBoundsCenter = false) {\n    let props = feature.properties;\n    let center = props && (props.center || props.cp);\n    if (center && typeof center === 'string') {\n        center = center.split(',');\n    }\n    if (Array.isArray(center)) {\n        center = center.map(item => Number(item));\n    }\n    if (forceBoundsCenter || center == null) {\n        // let bounds = getBounds(feature);\n        // center = bounds.getCenter();\n        center = getCentroid(feature);\n    }\n    return center;\n}\n\nfunction createCoordinateArray(ring) {\n    //Loop through the coordinates and figure out if the points need interpolation.\n    let temp_array = [];\n\n    for (let point_num = 0; point_num < ring.length; point_num++) {\n        temp_array.push(ring[point_num]);\n    }\n    return temp_array;\n}\n\n// idea from turf.js\n// TODO: 更佳的文字排版方式参考 QGIS 软件实现\nexport function getCentroid(feature) {\n    let geometry = feature.geometry;\n    let coords = [];\n    if (geometry == null) {\n        return ;\n    }\n    if (geometry.type == 'Point') {\n\n    } else if (geometry.type == 'MultiPoint') {\n\n    } else if (geometry.type == 'LineString') {\n\n    } else if (geometry.type == 'MultiLineString') {\n\n    } else if (geometry.type == 'Polygon') {\n        coords = createCoordinateArray(geometry.coordinates[0]);\n    } else if (geometry.type == 'MultiPolygon') {\n        let maxPolygonNum = 0;\n        for (let polygon_num = 0; polygon_num < geometry.coordinates.length; polygon_num++) {\n            if (geometry.coordinates[polygon_num][0].length > geometry.coordinates[maxPolygonNum][0].length) {\n                maxPolygonNum = polygon_num;\n            }\n        }\n        coords = createCoordinateArray(geometry.coordinates[maxPolygonNum][0]);\n    } else {\n        throw new Error('The geoJSON is not valid.');\n    }\n    // 计算\n    let sumX = 0;\n    let sumY = 0;\n    let len = 0;\n    coords.forEach(point => {\n        sumX += point[0];\n        sumY += point[1];\n        len++;\n    });\n    return [sumX / len, sumY / len];\n}\n\n// 世界坐标转屏幕坐标\n// TODO: 有时会出现不准确现象。解决办法：放到 setTimeout 里面\nexport function worldToScreen(xyzPoint, map, obj) {\n    const mapSize = map.getContainerSize();\n    const camera = map.getCamera();\n\n    // 方法1\n    // 世界坐标\n    const worldVector = new THREE.Vector3(xyzPoint[0], xyzPoint[1], xyzPoint[2]);\n     // 世界坐标转标准设备坐标\n    const standartVector = worldVector.project(camera);\n    // 标准设备坐标转屏幕坐标\n    const sx = Math.round((0.5 + standartVector.x / 2) * mapSize.width); \n    const sy = Math.round((0.5 - standartVector.y / 2) * mapSize.height); \n    return [sx, sy];\n\n    // 或 方法2\n/*     const vector = new THREE.Vector3();\n    obj.updateMatrixWorld();\n    vector.setFromMatrixPosition(obj.matrixWorld);\n    vector.project(camera);\n    const widthHalf = mapSize.width/2;\n    const heightHalf = mapSize.height/2;\n    const sx = (vector.x * widthHalf) + widthHalf;\n    const sy = -(vector.y * heightHalf) + heightHalf;\n    return [sx, sy]; */\n}\n\n// 屏幕坐标转世界坐标\nexport function screenToWorld(screenPoint, map) {\n    const mapSize = map.getContainerSize();\n    const camera = map.getCamera();\n    //屏幕坐标转标准设备坐标\n    const x = (screenPoint[0] / mapSize.width) * 2 - 1;\n    const y = -(screenPoint[1] / mapSize.height) * 2 + 1;\n    //标准设备坐标\n    const standardVector = new THREE.Vector3(x, y, 0.5);\n    //标准设备坐标转世界坐标\n    const worldVector = standardVector.unproject(camera);\n    return [worldVector.x, worldVector.y, worldVector.z];\n}\n\n// 检测两个矩形是否碰撞\nexport function isPOICollision(sprite1, sprite2) {\n    let x1 = sprite1.x;\n    let y1 = sprite1.y;\n    let w1 = sprite1.w;\n    let h1 = sprite1.h;\n    let x2 = sprite2.x;\n    let y2 = sprite2.y;\n    let w2 = sprite2.w;\n    let h2 = sprite2.h;\n    if (x1 >= x2 && x1 >= x2 + w2) {\n        return false;\n    } else if (x1 <= x2 && x1 + w1 <= x2) {\n        return false;\n    } else if (y1 >= y2 && y1 >= y2 + h2) {\n        return false;\n    } else if (y1 <= y2 && y1 + h1 <= y2) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nexport function getNormalizeName(feature) {\n    let props = feature && feature.properties;\n    if (props) {\n        if (props.name) {\n            return props.name;\n        } else if (props.id) {\n            return props.id;\n        } else {\n            return '';\n        }\n    } else {\n        return feature.id || '';\n    }\n}\n\nexport function scalePoint(point, scale) {\n    return point.map(p => p * scale);\n}","import EventEmiter from './eventemiter';\nimport * as Util from './util';\nimport * as mapHelper from './maphelper';\nimport TextLayer from './layers/text-layer';\n\nexport default class ThreeMap extends EventEmiter {\n    constructor(el, options) {\n        super();\n        const defaultOptions = {\n            type: 'plane', // plane or sphere ,平面或球面\n            region: 'world', // china or world, 中国或世界地图\n            crs: mapHelper.CRS.epsg3857, // 地图采用的地理坐标系 EPSG:4326: 经纬度，EPSG:3857: 墨卡托\n            SCALE_RATIO: 100000, // 地球墨卡托平面缩放比例\n            containerClassName: 'three-map-container', // 地图容器类名\n            camera: {\n                fov: 45,\n                near: 0.1,\n                far: 2000,\n                distanceRatio: 1.35 // 相机离物理最佳距离（刚好看到物体全部）的倍数\n            },\n            orbitControlOptions: {\n                minDistance: 0, // 最小距离\n                maxDistance: Infinity, // 最大距离\n                // 垂直方向翻转角度，范围：0-180 度\n                minPolarAngle: 0, \n                maxPolarAngle: 180,\n                // 横向旋转角度，范围：-180-180 度，Infinity 表示不限制\n                minAzimuthAngle: -Infinity, \n                maxAzimuthAngle: Infinity\n            },\n            light: {\n                // 主光源：太阳光 THREE.DirectionalLight\n                main: {\n                    color: '#fff',\n                    intensity: 1, // 主光源的强度，0-1\n                    shadow: false, // 主光源是否投射阴影。默认关闭。开启阴影可以给场景带来更真实和有层次的光照效果。但是同时也会增加程序的运行开销。\n                    shadowQuality: 'medium', // 阴影的质量。可选'low', 'medium', 'high', 'ultra'\n                    alpha: 40, // 主光源绕 x 轴，即上下旋转的角度。配合 beta 控制光源的方向。\n                    beta: 40 // 主光源绕 y 轴，即左右旋转的角度。\n                },\n                // 环境光源 THREE.AmbientLight\n                ambient: {\n                    color: '#fff',\n                    intensity: 0.2\n                }\n            },\n            global: {\n                R: 220, // 球形地球半径\n                center: [170, 35], // 初始中心点\n                animation: true, // 是否转动\n                animationSpeed: 1, // 转动快慢\n                earthImgSrc: '../../images/earth.jpg', // 地球图片\n                light: {\n                    skyColor: '#fff',\n                    groundColor: '#333',\n                    intensity: 2\n                }\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this._layers = {};\n        \n        this._initBounds();\n        this._initContainer(el);\n        if (this.options.type === 'sphere') {\n            this._initGlobal();\n        } else {\n            this._init3D();\n        }  \n        this._initEvents();  \n    }\n    getBounds() {\n        return this._fullBound;\n    }\n    addLayer(layer) {\n        var id = Util.stamp(layer);\n        if (this._layers[id]) {\n            return this;\n        }\n\n        this._layers[id] = layer;\n        this._scene.add(layer.getContainer());\n\n        layer.onAdd(this);\n\n        return this;\n    }\n    removeLayer(layer) {\n        var id = Util.stamp(layer);\n        if (!this._layers[id]) {\n            return this;\n        }\n\n        delete this._layers[id];\n        this._scene.remove(layer.getContainer());\n\n        layer.onRemove(this);\n\n        return this;\n    }\n    hasLayer(layer) {\n        return !!layer && (Util.stamp(layer) in this._layers);\n    }\n    clearLayers() {\n        for (var id in this._layers) {\n            this.removeLayer(this._layers[id]);\n        }\n    }\n    projectLngLat(lnglat) {\n        if (this.options.type === 'plane') {\n            if (this.options.crs === mapHelper.CRS.epsg3857) {\n                let point = mapHelper.wgs84ToMecator(lnglat);\n                let spt = mapHelper.scalePoint(point, 1/this.options.SCALE_RATIO);\n                if (lnglat.length === 3) {\n                    spt.push(lnglat[2]);\n                }\n                return spt;\n            } else {\n                return lnglat;\n            }\n        } else {\n            // sphere\n            return this.lngLatToGlobal(lnglat[0], lnglat[1], lnglat[2]);\n        }\n    }\n    lngLatToGlobal(lng, lat, alt = 0) {\n        const phi = (90-lat)*(Math.PI/180);\n        const theta = (lng+180)*(Math.PI/180);\n        const radius = alt+this.options.global.R;\n        const x = -(radius * Math.sin(phi) * Math.cos(theta));\n        const z = (radius * Math.sin(phi) * Math.sin(theta));\n        const y = (radius * Math.cos(phi));\n        return [x, y, z];\n    }\n    updateSize() {\n        this._onContainerResize();\n    }\n    resetView() {\n        this._orbitControl.reset();\n    }\n    setView(bounds) {\n        // TODO: 自动适配\n        if (this.options.type === 'plane') {\n            if (this.options.region === 'world') {\n                // this._orbitControl.object.position.set(16.42515, 369.562538, 333.99466);\n                // this._orbitControl.target = new THREE.Vector3(10.06448, 51.62625, 6.71498);\n                let d = this.getDistance(bounds.getHeight());\n                let scaleD = d * this.options.camera.distanceRatio;\n                let center = bounds.getCenter();\n                this._orbitControl.object.position.set(center[0], scaleD, -center[1]);\n                this._orbitControl.target = new THREE.Vector3(center[0], 0, -center[1]);\n                // this._orbitControl.minDistance = d * 0.5;\n                this._orbitControl.maxDistance = d * 2;\n            } else if (this.options.region === 'china') {\n                let d = this.getDistance(bounds.getHeight());\n                let center = bounds.getCenter();\n                let scaleD = d * 0.2; \n                this._orbitControl.object.position.set(center[0], center[1], scaleD);\n                this._orbitControl.target = new THREE.Vector3(center[0], 0, -center[1]);\n                this._orbitControl.minDistance = d * 0.25;\n                this._orbitControl.maxDistance = d * 2;\n            } else {\n                let d = this.getDistance(bounds.getHeight());\n                let scaleD = d * this.options.camera.distanceRatio;\n                let center = bounds.getCenter();\n                this._orbitControl.object.position.set(center[0], scaleD, -center[1]);\n                this._orbitControl.target = new THREE.Vector3(center[0], 0, -center[1]);\n                this._orbitControl.minDistance = d * 0.5;\n                this._orbitControl.maxDistance = d * 2;\n            }\n        } else {\n            // sphere\n            let d = this.getDistance(this.options.global.R*2);\n            let scaleD = d * this.options.camera.distanceRatio;\n            this._orbitControl.object.position.set(0, 0, scaleD);\n            this._orbitControl.target = new THREE.Vector3(0, 0, 0);\n        }\n        this._orbitControl.update();\n    }\n    // 获取相机到物体的距离，看到全部物体时\n    getDistance(height) {\n        // 视角\n        const deg = THREE.Math.degToRad(this.options.camera.fov) / 2;\n        // 视区高度\n        const d = (height / 2) / Math.tan(deg);\n        return d;\n    }\n    // 获取适配比例\n    // 中国范围切换省市县行政区需要获取适配比例\n    getRatio(regionBounds) {\n        const chinaBounds = mapHelper.getBounds('china', this.options.crs);\n        if (this.options.crs === mapHelper.CRS.epsg3857) {\n            let scale = this.options.SCALE_RATIO;\n            chinaBounds.scale(1/scale);\n        }\n\n        const h0 = chinaBounds.getHeight();\n        const d0 = this.getDistance(h0);\n        const h1 = regionBounds.getHeight();\n        const d1 = this.getDistance(h1);\n\n        return d1 / d0;\n    }\n    getContainerElement() {\n        return this._el;\n    }\n    getContainerSize() {\n        const compStyle = Util.getCmpStyle(this._el);\n        const width = parseInt(compStyle.width);\n        const height = parseInt(compStyle.height);\n        return { width, height };\n    }\n    getCamera() {\n        return this._camera;\n    }\n    // TODO: addLegend bdp\n    addLegend(legendOptions) {\n        let Legend = Dalaba.Chart.Legend;\n        let legend = null;\n        const size = this.getContainerSize();\n        if (!this._legendCanvas) {\n            this._legendCanvas = document.createElement('canvas');\n            this._legendCanvas.width = this._renderer.domElement.width;\n            this._legendCanvas.height = this._renderer.domElement.height;\n            this._legendCanvas.style.width = size.width + 'px';\n            this._legendCanvas.style.height = size.height + 'px';\n            this._legendCanvas.className = 'three-map-legendcanvas';\n            this._el.appendChild(this._legendCanvas);\n        }\n        if (Legend && legendOptions.enabled) {\n            legend = new Legend(\n                this._legendCanvas,//this.addLayer(legendOptions.layer),\n                [{name: 9}],\n                legendOptions//selected为false不读取\n            );\n        }\n        return legend;\n    }\n    _initBounds() {\n        if (this.options.type === 'plane') {\n            if (this.options.region === 'china') {\n                this._fullBound = mapHelper.getBounds('china', this.options.crs);\n            } else {\n                this._fullBound = mapHelper.getBounds('world', this.options.crs);\n            }\n        }\n    }\n    _initContainer(el) {\n        this._container = typeof el === 'string' ? document.getElementById(el) : el;\n        if (!this._container) {\n            throw new Error(\"未提供父容器,请为地图提供一个父容器！\");\n        }\n\n        this._el = document.createElement('div');\n        this._el.style.height = '100%';\n        this._el.style.margin = 0;\n        this._el.style.padding = 0;\n        Util.addClass(this._el, this.options.containerClassName);\n\n        this._container.appendChild(this._el);\n    }\n    _init3D() {\n        if (THREE == undefined) throw new Error('需先引入 threejs 库！');\n        if (THREE.OrbitControls == undefined) throw new Error('需先引入 OrbitControls 组件！');\n\n        const size = this.getContainerSize();\n        const dpr = Util.getDpr();\n\n        // 初始化画布\n        this._renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            preserveDrawingBuffer: true\n        });\n        this._renderer.setPixelRatio(dpr);\n        this._renderer.setClearColor(0x000000, 0); // 背景透明 \n        this._renderer.setSize(size.width, size.height, true);\n        this._renderer.domElement.className = 'chart-canvas';\n        this._el.appendChild(this._renderer.domElement);\n\n        // 设置场景\n        this._scene = new THREE.Scene();\n\n        // 相机\n        const cameraOptions = this.options.camera;\n        this._camera = new THREE.PerspectiveCamera(cameraOptions.fov, size.width / size.height, cameraOptions.near, cameraOptions.far);\n\n        // 控件\n        const orbitControlOptions = this.options.orbitControlOptions;\n        this._orbitControl = new THREE.OrbitControls(this._camera, this._renderer.domElement);\n        // 距离相机的最小、最大距离，仅用于透视相机\n        this._orbitControl.minDistance = orbitControlOptions.minDistance; \n        this._orbitControl.maxDistance = orbitControlOptions.maxDistance; \n        // 最小、最大翻转角度 在哪个平面内就相对于哪个平面的坐标轴\n        this._orbitControl.minPolarAngle = Math.PI * orbitControlOptions.minPolarAngle / 180;\n        this._orbitControl.maxPolarAngle = Math.PI * orbitControlOptions.maxPolarAngle / 180; \n        // 最小、最大旋转角度\n        this._orbitControl.minAzimuthAngle = Math.PI * orbitControlOptions.minAzimuthAngle / 180;\n        this._orbitControl.maxAzimuthAngle = Math.PI * orbitControlOptions.maxAzimuthAngle / 180; \n        // OrbitControls加入后，托管了相机，所以必须通过它来改变相机参数\n        // camera.lookAt()失效问题https://stackoverflow.com/questions/10325095/threejs-camera-lookat-has-no-effect-is-there-something-im-doing-wrong\n        // this._orbitControl.object.position.set(0, 0, 100)\n        // this._orbitControl.target = new THREE.Vector3(12245143.987260092, 0, -3482189.0854086173)\n        this._orbitControl.saveState();\n        this._orbitControl.update();\n\n        this._orbitControl.addEventListener('change', e => {\n            this.emit('change', e);\n        });\n\n        // 灯光\n        const lightOptions = this.options.light;\n        const directionalLight = new THREE.DirectionalLight(lightOptions.main.color, lightOptions.main.intensity);\n        directionalLight.position.set(-1, 1, 1);\n        const ambientLight = new THREE.AmbientLight(lightOptions.ambient.color, lightOptions.ambient.intensity);\n        this._scene.add(directionalLight);\n        this._scene.add(ambientLight);\n        this._mainLight = directionalLight;\n        this._ambientLight = ambientLight;\n\n        // animate\n        this._animate();\n    }\n    // just a test function 画坐标轴\n    drawAxis(scene, len) {\n        if (len === undefined) {\n            len = 100;\n        }\n        // x 轴\n        var xline_geom = new THREE.Geometry();\n        xline_geom.vertices.push(new THREE.Vector3(0, 0, 0));\n        xline_geom.vertices.push(new THREE.Vector3(len, 0, 0));\n        var xline_material = new THREE.LineBasicMaterial({\n            color: 0xff0000\n        });\n        var xline = new THREE.Line(xline_geom, xline_material);\n        scene.add(xline);\n\n        // y 轴\n        var yline_geom = new THREE.Geometry();\n        yline_geom.vertices.push(new THREE.Vector3(0, 0, 0));\n        yline_geom.vertices.push(new THREE.Vector3(0, len, 0));\n        var yline_material = new THREE.LineBasicMaterial({\n            color: 0x00ff00\n        });\n        var yline = new THREE.Line(yline_geom, yline_material);\n        scene.add(yline);\n\n        // z 轴\n        var zline_geom = new THREE.Geometry();\n        zline_geom.vertices.push(new THREE.Vector3(0, 0, 0));\n        zline_geom.vertices.push(new THREE.Vector3(0, 0, len));\n        var zline_material = new THREE.LineBasicMaterial({\n            color: 0x0000ff\n        });\n        var zline = new THREE.Line(zline_geom, zline_material);\n        scene.add(zline);\n    }\n    _initGlobal() {\n        if (THREE == undefined) throw new Error('需先引入 threejs 库！');\n        if (THREE.OrbitControls == undefined) throw new Error('需先引入 OrbitControls 组件！');\n\n        const size = this.getContainerSize();\n        const dpr = Util.getDpr();\n\n        // 初始化画布\n        this._renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            preserveDrawingBuffer: true\n        });\n        this._renderer.setPixelRatio(dpr);\n        this._renderer.setClearColor(0x000000, 0); // 背景透明 \n        this._renderer.setSize(size.width, size.height, true);\n        this._renderer.domElement.className = 'chart-canvas';\n        this._el.appendChild(this._renderer.domElement);\n\n        // 设置场景\n        this._scene = new THREE.Scene();\n\n        // 相机\n        const cameraOptions = this.options.camera;\n        this._camera = new THREE.PerspectiveCamera(cameraOptions.fov, size.width / size.height, cameraOptions.near, cameraOptions.far);\n\n        // 控件\n        const orbitControlOptions = this.options.orbitControlOptions;\n        this._orbitControl = new THREE.OrbitControls(this._camera, this._renderer.domElement);\n        // 距离相机的最小、最大距离，仅用于透视相机\n        let d = this.getDistance(this.options.global.R*2);\n        this._orbitControl.minDistance = d; \n        this._orbitControl.maxDistance = d*2; \n        // 最小、最大翻转角度 在哪个平面内就相对于哪个平面的坐标轴\n        // this._orbitControl.minPolarAngle = Math.PI * orbitControlOptions.minPolarAngle / 180;\n        // this._orbitControl.maxPolarAngle = Math.PI * orbitControlOptions.maxPolarAngle / 180; \n        // 最小、最大旋转角度\n        // this._orbitControl.minAzimuthAngle = Math.PI * orbitControlOptions.minAzimuthAngle / 180;\n        // this._orbitControl.maxAzimuthAngle = Math.PI * orbitControlOptions.maxAzimuthAngle / 180; \n     \n        this._orbitControl.saveState();\n        this._orbitControl.update();\n\n        // 灯光\n        const lightOptions = this.options.global.light;\n        const hemisphereLight = new THREE.HemisphereLight(lightOptions.skyColor, lightOptions.groundColor, lightOptions.intensity);\n        hemisphereLight.position.x = 0;\n        hemisphereLight.position.y = 0;\n        hemisphereLight.position.z = -this.options.global.R;\n        this._scene.add(hemisphereLight);\n        \n        // 球面\n        const globeTextureLoader = new THREE.TextureLoader();\n        globeTextureLoader.load(this.options.global.earthImgSrc, texture => {\n            const globeGgeometry = new THREE.SphereGeometry(this.options.global.R, 100, 100);\n            const globeMaterial = new THREE.MeshStandardMaterial({map: texture});\n            // test code -start\n            // globeMaterial.transparent = true;\n            // globeMaterial.opacity = 0.6;\n            // test code - end\n            const globeMesh = new THREE.Mesh(globeGgeometry, globeMaterial);\n            this._scene.add(globeMesh);\n            this._scene.rotation.x = THREE.Math.degToRad(this.options.global.center[1]);\n            this._scene.rotation.y = THREE.Math.degToRad(this.options.global.center[0]);\n        });\n        \n        // test code -start\n        // this.drawAxis(this._scene, this.options.global.R*2);\n        // test code -end\n        \n        // animate\n        this._animate();\n    }\n    _initEvents() {\n        this._onContainerResize = this._onContainerResize.bind(this);\n        this._mousemoveEvtHandler = this._mousemoveEvtHandler.bind(this);\n        window.addEventListener('resize', this._onContainerResize, false);\n        this._renderer.domElement.addEventListener('mousemove', this._mousemoveEvtHandler, false);\n    }\n    _animate() {\n        this._animateId = requestAnimationFrame(this._animate.bind(this));\n        this._orbitControl.update();\n        if(this.options.type === 'sphere' && this.options.global.animation) {\n            this._scene.rotation.y -= 0.005 * this.options.global.animationSpeed;\n        }\n         // update text layer scale to fix size\n        for (let id in this._layers) {\n            let layer = this._layers[id];\n            if (layer instanceof TextLayer) {\n                layer.updateScale();\n            }\n        }\n        this._renderer.render(this._scene, this._camera);\n    }\n    _onContainerResize() {\n        const size = this.getContainerSize();\n\n        // 设置透视摄像机的长宽比\n        this._camera.aspect = size.width / size.height;\n        // 摄像机的 position 和 target 是自动更新的，而 fov、aspect、near、far 的修改则需要重新计算投影矩阵（projection matrix）\n        this._camera.updateProjectionMatrix();\n        // 设置渲染器输出的 canvas 的大小\n        this._renderer.setSize(size.width, size.height, true);\n    }\n    _mousemoveEvtHandler(e) {\n        this.emit('mousemove', e);\n    }\n    destroy() {\n        this.clearLayers();\n        window.removeEventListener('resize', this._onContainerResize, false);\n        this._renderer.domElement.removeEventListener('mousemove', this._mousemoveEvtHandler, false);\n        window.cancelAnimationFrame(this._animateId);\n        if (Util.isInPage(this._container) && Util.isInPage(this._el)) {\n            this._container.removeChild(this._el);\n            this._el = null;\n        }\n    }\n}","import * as Util from './util';\n\nexport default class ToolTip {\n    constructor(parentElement, options = {}) {\n        const defaultOptions = {\n            offsetX: 6,\n            offsetY: 8,\n            className: 'chart-map-3d-tooltip',\n            activeClassName: 'chart-map-3d-tooltip-active'\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n    \n        this._el = document.createElement(\"div\");\n        // Util.addClass(this._el, 'tooltip sankey-tooltip ' + this.options.className);\n        Util.addClass(this._el, this.options.className);\n        this._el.style.display = 'none';\n        this._el.style.position = 'absolute';\n        this._el.style.backgroundColor = '#fff';\n        this._el.style.borderRadius = '2px';\n        this._el.style.color = 'rgba(10, 18, 32, 0.64)';\n        this._el.style.fontSize = '12px';\n        this._el.style.lineHeight = 1.4;\n        this._el.style.opacity = 0.9;\n        this._el.style.padding = '8px 10px';\n        this._el.style.userSelect = 'none';\n       \n        if (!parentElement) {\n            throw new Error('未提供tootip父元素！');\n        }\n        parentElement.appendChild(this._el);\n    }\n    open(x, y, content) {\n        if (this._el) {\n            this._el.innerHTML = content;\n            this._el.style.left = x + this.options.offsetX + 'px';\n            this._el.style.top = y + this.options.offsetY + 'px';\n            Util.addClass(this._el, this.options.activeClassName);\n            this._el.style.display = 'block';\n        }\n    }\n    close() {\n        if (this._el) {\n            Util.removeClass(this._el, this.options.activeClassName);\n            this._el.style.display = 'none';\n        }   \n    }\n    remove() {\n        if (this._el && this._el.parentElement) {\n            this._el.parentElement.removeChild(this._el);\n            this._el = null;\n        }\n    }\n}","export function hasClass(el, className) {\n    return el.classList ? el.classList.contains(className) : new RegExp('(^|\\\\s)' + className + '(\\\\s|$)').test(el.className);\n}\n\nexport function addClass(el, className) {\n    if (el.classList !== undefined) {\n        var list = className.split(' ');\n        for (var i = 0, len = list.length; i < len; i++) {\n            el.classList.add(list[i]);\n        }\n    } else if (!hasClass(el, className)) {\n        el.className = (el.className ? el.className + ' ' : '') + className;\n    }\n}\n\nexport function removeClass(el, className) {\n    if (el.classList !== undefined) {\n        el.classList.remove(className);\n    } else {\n        el.className = ' ' + el.className + ' ';\n        el.className = el.className.replace(' ' + className + ' ', ' ');\n    }\n}\n\nexport function getCmpStyle(el) {\n    // FIXEME 兼容性写法\n    return getComputedStyle(el);\n}\n\nexport function isInPage(node) {\n    return (node === document.body) ? false : document.body.contains(node);\n}\n\nexport function getDpr() {\n    return window.devicePixelRatio || 1;\n}\n\nexport function isFunction( obj ) {\n\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n    // We don't want to classify *any* DOM node as a function.\n    return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n}\n\nexport function isPlainObject( obj ) {\n    var proto, Ctor;\n\n    // Detect obvious negatives\n    // Use toString instead of jQuery.type to catch host objects\n    if ( !obj || Object.prototype.toString.call( obj ) !== \"[object Object]\" ) {\n        return false;\n    }\n\n    proto = Object.getPrototypeOf( obj );\n\n    // Objects with no prototype (e.g., `Object.create( null )`) are plain\n    if ( !proto ) {\n        return true;\n    }\n\n    // Objects with prototype are plain iff they were constructed by a global Object function\n    Ctor = Object.prototype.hasOwnProperty.call( proto, \"constructor\" ) && proto.constructor;\n    return typeof Ctor === \"function\" && Object.prototype.hasOwnProperty.toString.call( Ctor ) === Object.prototype.hasOwnProperty.toString.call( Object );\n}\n\nexport function isEmptyObject( obj ) {\n    var name;\n\n    for ( name in obj ) {\n        return false;\n    }\n    return true;\n}\n\n// 浅拷贝\n// export function extend(srcObj) {\n//     var i, j, len, src;\n//     for (j = 1, len = arguments.length; j < len; j++) {\n//         src = arguments[j];\n//         for (var i in src) {\n//             srcObj[i] = src[i];\n//         }\n//     }\n//     return srcObj;\n// }\n\n// 深浅拷贝， 参考jquery\nexport function extend() {\n    var options, name, src, copy, copyIsArray, clone,\n    target = arguments[ 0 ] || {},\n    i = 1,\n    length = arguments.length,\n    deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && !isFunction( target ) ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                src = target[ name ];\n                copy = options[ name ];\n\n                // Prevent never-ending loop\n                if ( target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( isPlainObject( copy ) || ( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n                    if ( copyIsArray ) {\n                        copyIsArray = false;\n                        clone = src && Array.isArray( src ) ? src : [];\n\n                    } else {\n                        clone = src && isPlainObject( src ) ? src : {};\n                    }\n\n                    // Never move original objects, clone them\n                    target[ name ] = extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n    // Return the modified object\n    return target;\n}\n\nvar lastId;\nexport function stamp(obj) {\n    if (lastId == null) lastId = 0;\n    obj.__objstampid__ = obj.__objstampid__ || ++lastId;\n    return obj.__objstampid__;\n}\n\nexport function inherit (parentClass, childClass) {\n    var tempClass = function () {};\n    tempClass.prototype = parentClass.prototype;\n    childClass.prototype = new tempClass();\n    childClass.prototype.constructor = childClass;\n}\n\nexport function isNullOrUdf(val) {\n    return val == null;\n}\n\nexport function getRandomColor () {\n    return '#' + (function getColor(color) {\n        return (color += '0123456789abcdef' [Math.floor(Math.random() * 16)]) &&\n            (color.length == 6) ? color : getColor(color);\n    })('');\n}\n\nexport function isWebGLAvailable () {\n    try {\n        var canvas = document.createElement('canvas');\n        return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * 获取归一化的值，归一到区间[ymin, ymax]\n * xmax, xmin 目前数据的最大、最小值\n * ymax, ymin 目标区间的最大、最小值\n */\nexport function normalizeValue(value, xmin, xmax, ymin, ymax, type = 0) {\n    if (xmax === 0 && xmin === 0) {\n        return ymin;\n    }\n    if (xmin === xmax) {\n        // type =0 柱子高度相同时，取中值\n        // type !=0 颜色相同时，取最小值\n        if (type === 0) {return (ymax + ymin) / 2;}\n        else {return ymin;}\n    }\n    return ymin + (ymax - ymin) * (value - xmin) / (xmax - xmin);\n}\n\n// 获取一个颜色的高亮或更暗色 https://css-tricks.com/snippets/javascript/lighten-darken-color/\nexport function lightenDarkenColor(col, amt) {\n\n    var usePound = false;\n\n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n\n    var num = parseInt(col, 16);\n\n    var r = (num >> 16) + amt;\n\n    if (r > 255) r = 255;\n    else if (r < 0) r = 0;\n\n    var b = ((num >> 8) & 0x00FF) + amt;\n\n    if (b > 255) b = 255;\n    else if (b < 0) b = 0;\n\n    var g = (num & 0x0000FF) + amt;\n\n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n\n    return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\n// 缓存文字宽度，减少计算量\n// idea from echarts/zrender\nlet textWidthCache = {}; \nlet textWidthCacheCounter = 0;\nconst TEXT_CACHE_MAX = 5000;\nexport function measureText(text, font = 'normal normal 12px sans-serif') {\n    const key = text + ':' + font;\n    if (textWidthCache[key]) {\n        return textWidthCache[key];\n    }\n    const span = document.createElement(\"span\");\n    span.style.visibility = \"hidden\";\n    span.style.display = \"inline-block\";\n    document.body.appendChild(span);\n    let result = {\n        width: 0,\n        height: 0\n    };\n    span.style.font = font;\n    if (typeof span.textContent !== \"undefined\") {\n        span.textContent = text;\n    } else {\n        span.innerText = text;\n    }\n    const cmpStyle = window.getComputedStyle(span);\n    result.width = parseFloat(cmpStyle.width);\n    result.height = parseFloat(cmpStyle.height);\n    if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n        textWidthCache = {};\n        textWidthCacheCounter = 0;\n    }\n    textWidthCache[key] = result;\n    textWidthCacheCounter ++;\n    return result;\n}\n\nexport function wrapNum(num) {\n    let i = 2;\n    while (i < num) {\n        i *= 2;\n    }\n    return i;\n}"],"sourceRoot":""}