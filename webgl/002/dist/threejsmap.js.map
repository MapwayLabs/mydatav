{"version":3,"sources":["webpack://TMap/webpack/universalModuleDefinition","webpack://TMap/webpack/bootstrap","webpack://TMap/./js/bounds.js","webpack://TMap/./js/eventemiter.js","webpack://TMap/./js/index.js","webpack://TMap/./js/layers/bar-layer.js","webpack://TMap/./js/layers/flyline-layer.js","webpack://TMap/./js/layers/geojson-layer.js","webpack://TMap/./js/layers/layer.js","webpack://TMap/./js/layers/shader/line.js","webpack://TMap/./js/layers/text-layer.js","webpack://TMap/./js/layers/text-sprite.js","webpack://TMap/./js/maphelper.js","webpack://TMap/./js/three-map.js","webpack://TMap/./js/util.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AChCA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;;AAEe;;AAEA;;AAER;;AAEd;AACvB;;AAEa;;;;;;;;;;;;;ACX/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACU;AACL;;AAErC;AACe,uBAAuB,8CAAK;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,uDAAuD,mDAAkB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAmB;AACzC,oBAAoB,yDAAwB;AAC5C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAW,QAAQ,YAAY;AAC1D,qC;AACA,SAAS;AACT;AACA;AACA,S;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA,4D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,IAAI,cAAc;AAChF,yCAAyC,OAAO,UAAU,eAAe,WAAW,sBAAsB;AAC1G;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,eAAe;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,mDAAS;AACvC;AACA;AACA,C;;;;;;;;;;;;ACxTA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACW;;AAE3C;AACe,2BAA2B,8CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA,wBAAwB,4BAA4B;AACpD,mBAAmB,SAAS;AAC5B,oBAAoB,SAAS;AAC7B,qBAAqB,YAAY;AACjC,0BAA0B,UAAU;AACpC,uBAAuB,YAAY;AACnC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B,0BAA0B;AAC1B,yBAAyB;AACzB,2BAA2B;AAC3B,0BAA0B;;AAE1B;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,uDAAU;AACpC,4BAA4B,uDAAU;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;AChOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACU;AACL;;AAErC;AACe,2BAA2B,8CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,2BAA2B;AAC3B;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,4CAAW;;AAElC;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,qCAAqC,oCAAoC;AACzE;AACA;AACA,SAAS;AACT,kCAAkC,mCAAmC;AACrE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4BAA4B;AAC3D;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iDAAiD,8CAA8C;AAC/F;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4CAA4C;AAC3E;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,yDAAwB;AACvD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAmB;AAC5C,aAAa;AACb,yBAAyB,oDAAmB;AAC5C,aAAa;AACb,yBAAyB,oDAAmB;AAC5C;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,8CAAa;AAChD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;;AAEA,aAAa;;AAEb,aAAa;;AAEb,aAAa;;AAEb,aAAa;AACb,yCAAyC,2CAA2C;AACpF;AACA;AACA,kDAAkD,8CAAa;AAC/D;AACA;AACA;AACA;;AAEA,aAAa;AACb,yCAAyC,2CAA2C;AACpF,6CAA6C,wDAAwD;AACrG;AACA;AACA,sDAAsD,8CAAa;AACnE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA,4D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAA0B;AACrD,6BAA6B,6DAA4B;AACzD;AACA;AACA;AACA,aAAa;AACb;AACA,a;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kCAAkC,mDAAS;AAC3C;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC,mDAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AC3XA;AAAA;AAAA;AAAA;AAAgC;AACS;AAC1B,oBAAoB,oDAAW;AAC9C;AACA;AACA;AACA,uBAAuB,4CAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACpBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,C;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACO;;AAEvC;AACe,wBAAwB,8CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAW;AACnB;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,wC;AACA,mCAAmC,oDAAU;;AAE7C;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;;AAEhD;AACA,SAAS;AACT;AACA,C;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAgC;;AAEhC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,C;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAE9B,kBAAkB;AAClB;AACA,kBAAkB,+CAAM;;AAEjB;AACP;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,iCAAiC;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAM;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAM;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,oEAAoE,SAAS;AAC7E;AACA;AACA;AACA,SAAS;AACT,8CAA8C,SAAS;AACvD;AACA,2BAA2B,gBAAgB;AAC3C;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAM;AACzB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;AChKA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACT;AACU;;AAEzB,uBAAuB,oDAAW;AACjD;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,S;AACA,2B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAU;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,2CAAU;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B,2CAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8CAAa;AAClD,4BAA4B,yDAAwB;AACpD,uBAAuB,qDAAoB;AAC3C,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAgB;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAmB;AACrD,aAAa;AACb,kCAAkC,oDAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,8CAAa;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,4CAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yE;AACA,yE;AACA;AACA;AACA,6F;AACA;AACA;AACA,iG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,4CAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2C;AACA,6C;AACA;AACA;AACA,gG;AACA;AACA;AACA,oG;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kEAAkE,aAAa;AAC/E;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAa,qBAAqB,8CAAa;AAC3D;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AChYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO;AACP;AACA;;AAEO;AACP;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,WAAW,YAAY;;AAEvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA,SAAS,4BAA4B;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB,GAAG,uBAAuB,GAAG,uBAAuB,GAAG,uBAAuB;AACtH;;AAEA;AACO;;AAEP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,C","file":"threejsmap.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TMap\"] = factory();\n\telse\n\t\troot[\"TMap\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/index.js\");\n","export default class Bounds {\n    constructor (xmin, ymin, xmax, ymax) {\n        if (Array.isArray(xmin)) {\n            this.xmin = xmin[0];\n            this.xmax = ymin[0];\n            this.ymin = xmin[1];\n            this.ymax = ymin[1];\n        } else {\n            this.xmin = xmin;\n            this.xmax = xmax;\n            this.ymin = ymin;\n            this.ymax = ymax;\n        }\n    }\n    getWidth() {\n        return Math.abs(this.xmax - this.xmin);\n    }\n    getHeight() {\n        return Math.abs(this.ymax - this.ymin);\n    }\n    getCenter() {\n        let tx = (this.xmax - this.xmin) / 2;\n        let ty = (this.ymax - this.ymin) / 2;\n        return [tx + this.xmin, ty + this.ymin];\n    }\n    scale(m) {\n        this.xmin *= m;\n        this.ymin *= m;\n        this.xmax *= m;\n        this.ymax *= m;\n        return this;\n    }\n}","export default class EventEmiter {\n    constructor() {\n        this._events = {};\n    }\n\n    on(event, cb, context) {\n        context = context || this;\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.on(event[i], cb, context);\n            }\n        } else {\n            (this._events[event] || (this._events[event] = [])).push({\n                callback: cb,\n                context: context\n            });\n        }\n        return this;\n    }\n\n    once(event, cb, context) {\n        context = context || this;\n        var self = this;\n\n        function on() {\n            self.off(event, cb, context);\n            cb.apply(context, arguments);\n        }\n        on.fn = cb;\n        this.on(event, on, context);\n        return this;\n    }\n\n    off(event, cb, context) {\n        context = context || this;\n        if (!arguments.length) {\n            this._events = Object.create(null);\n            return this;\n        }\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.off(event[i], cb, context);\n            }\n            return this;\n        }\n        if (!cb) {\n            this._events[event] = null;\n            return this;\n        }\n        if (cb) {\n            let cbs = this._events[event] || [];\n            let i = cbs.length;\n            while (i--) {\n                if ((cb === cbs[i].callback || cb === cbs[i].fn) && context === cbs[i].context) {\n                    cbs.splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        }\n    }\n\n    emit(event) {\n        let cbs = this._events[event];\n        let args = Array.prototype.slice.call(arguments, 1);\n        if (cbs) {\n            for (let i = 0, l = cbs.length; i < l; i++) {\n                cbs[i].callback.apply(cbs[i].context || this, args);\n            }\n        }\n    }\n}","export {default as ThreeMap} from './three-map';\n\nexport {default as GeoJSONLayer} from './layers/geojson-layer';\n\nexport {default as FlyLineLayer} from './layers/flyline-layer';\n\nexport {default as BarLayer} from './layers/bar-layer';\n\nimport * as mapHelper from './maphelper';\nexport {mapHelper}\n\nimport * as Util from './util';\nexport {Util};","import Layer from './layer';\nimport * as Util from '../util';\nimport * as mapHelper from '../maphelper';\nimport TextLayer from './text-layer';\n\n// 柱状图层\nexport default class BarLayer extends Layer {\n    constructor (data, geojsonLayer, options) {\n        super(data, options);\n\n        const defaultOptions = {\n            barStyle: {\n                width: 1, // 底边长\n                minHeight: 3, // 最小高度\n                maxHeight: 12, // 最大高度\n                bevelThickness: 0.1,\n                bevelSize: 0.08,\n                bevelSegments: 100,\n                defaultColor: ['#f00'],\n                grandientColor: null,\n                enumColor: null\n            },\n            barText: {\n                show: true,\n                offset: 1,\n                textStyle: {\n                    fontWeight: 'normal',\n                    fontFamily: 'Microsoft YaHei',\n                    fontColor: '#000',\n                    textAlign: 'center',\n                    textBaseline: 'middle'\n                }\n            },\n            barTooltip: {\n                show: true\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this.geojsonLayer = geojsonLayer;\n\n        this._barData = {\n            data: null,\n            vals: null,\n            min: null,\n            max: null\n        };\n\n        this._colorsData = {\n            data: [],\n            min: null,\n            max: null\n        };\n\n        this._initBarData();\n        this._initColorData();\n        this._initMinMax();\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        this._textLayer && this._map.removeLayer(this._textLayer);\n        if (this.options.barTooltip.show) {\n            // this._toolTipHelper.hideTooltip(); // TODO: bdp\n            this._map.off('mousemove', this._mousemoveEvtHandler, this);\n        }\n    }\n    isMatch(featureIdVal, feature) {\n        if (featureIdVal == null || feature == null || Util.isEmptyObject(feature)) {\n            return false;\n        }\n        featureIdVal = String(featureIdVal);\n        if (featureIdVal === String(feature.id)) {\n            return true;\n        }\n        let props = feature.properties;\n        if (props == null || Util.isEmptyObject(props)) {\n            return false;\n        }\n        if ( featureIdVal === String(props.id) || new RegExp(props.name).test(featureIdVal)) {\n            return true;\n        }\n        return false;\n    }\n    getFormattedVal(value) {\n        // TODO: me\n        return value;\n        // bdp\n        let formattedVal = bdpChart.helper.dataLabelFormatter(this._data.y.formatter, value, this._data.y.aggregator);\n        // 如果未设置单位，则使用自定义单位\n        if (this._data.y.formatter.num.unit === '1') {\n            formattedVal += this._data.y.unit_adv;\n        }\n        return formattedVal;\n    }\n    _initBarData() {\n        const features = this.geojsonLayer.getFeatures();\n        const x = this._data.x;\n        const y = this._data.y;\n        \n        let barData = [];\n        let vals = [];\n        features.forEach(f => {\n            let props = f.properties;\n            let xlength = x.data.length;\n            let i = 0;\n            for (; i < xlength; i++) {\n                let ismatch = this.isMatch(x.data[i], f);\n                if (ismatch) {\n                    let tempobj = {\n                        id: props.id || f.id,\n                        name: props.name,\n                        xname: x.data[i],\n                        index: i,\n                        center: mapHelper.getNormalizeCenter(f),\n                        value: Number(y.data[i])\n                    };\n                    tempobj.formattedVal = this.getFormattedVal(tempobj.value);\n                    barData.push(tempobj);\n                    vals.push(Number(tempobj.value));\n                    // 给 feature 打上标签，表示在它之上有柱子\n                    f.hasBarData = true;\n                    break;\n                }\n            }\n            // 当前 feature 上没有柱子\n            if (i === xlength) {\n                // 给 feature 打上标签，表示在它之上没有柱子\n                f.hasBarData = false;\n            }\n        });\n\n        this._barData.data = barData;\n        this._barData.vals = vals;\n    }\n    _initColorData() {\n        if (this._data.colors && this._data.colors.length) {\n            let cData = [];\n            this._barData.data.forEach(item => {\n                let d = Number(this._data.colors[item.index]);\n                cData.push(d);\n            });\n            this._colorsData.data = cData;\n            this._colorsData.min = Math.min(...cData);\n            this._colorsData.max = Math.max(...cData);\n        } else {\n            this._colorsData.data = this._barData.data;\n            this._colorsData.min = this._barData.min;\n            this._colorsData.max = this._barData.max;\n        }\n    }\n    _initMinMax() {\n        if (this._barData.vals == null || !this._barData.vals.length) {return;}\n        const min = Math.min(...this._barData.vals);\n        const max = Math.max(...this._barData.vals);\n        this._barData.min = min;\n        this._barData.max = max;\n    }\n    getBarHeight(item) {\n        let xmin = this._barData.min;\n        let xmax = this._barData.max;\n        let ymin = this.options.barStyle.minHeight;\n        let ymax = this.options.barStyle.maxHeight;\n        let barHeight = Util.normalizeValue(item.value, xmin, xmax, ymin, ymax);\n        return barHeight;\n    }\n    getBarColor(item, index) {\n        const barStyle = this.options.barStyle;\n        let color = \"#fff\";\n        let cLen = barStyle.defaultColor.length;\n        if (barStyle.grandientColor) {\n            let xmin = this._colorsData.min;\n            let xmax = this._colorsData.max;\n            let ymin = 1;\n            let ymax = 256;\n            let num = Util.normalizeValue(this._colorsData[index], xmin, xmax, ymin, ymax);\n            color = Util.getInterPolateColor(num, barStyle.grandientColor);\n        } else if (barStyle.enumColor) {\n           let enumcolor = barStyle.enumColor[item.xname];\n           color = enumcolor && enumcolor.color;\n           if(!color){\n            color = barStyle.defaultColor[index % cLen]\n           }\n        } else {\n            color = barStyle.defaultColor[index % cLen]\n        }\n        return color;\n    }\n    _draw() {\n        if (this._barData.data == null || !this._barData.data.length) {return;}\n        this._barData.data.forEach((item, index) => {\n            let barHeight = this.getBarHeight(item);\n            let barColor = this.getBarColor(item, index);\n            let yoffset = this.geojsonLayer.getDepth();\n            let projCenter = this._map.projectLngLat(item.center);\n            let bar = this._createBar(projCenter, barHeight, barColor, yoffset);\n            bar.userData = Util.extend(true, {type: 'bar'}, item);\n            this._container.add(bar);   \n        });\n        if (this.options.barText.show) {\n            this._addTextLayer();\n        } \n        this.geojsonLayer.updateLabels();\n        if (this.options.barTooltip.show) {\n            // TODO: bdp\n            // this._toolTipHelper = TooltipHelper;\n            this._map.on('mousemove', this._mousemoveEvtHandler, this);\n        }\n    }\n    _mousemoveEvtHandler(event) {\n        const mapSize = this._map.getContainerSize();\n        const camera = this._map.getCamera();\n        const sx = event.offsetX; \n        const sy = event.offsetY;\n        const cx = event.clientX;\n        const cy = event.clientY;\n        //屏幕坐标转标准设备坐标\n        const x = (sx / mapSize.width) * 2 - 1; \n        const y = -(sy / mapSize.height) * 2 + 1;\n        //标准设备坐标\n        const standardVector = new THREE.Vector3(x, y, 0.5); \n        //标准设备坐标转世界坐标\n        const worldVector = standardVector.unproject(camera);\n        //射线投射方向单位向量(worldVector坐标减相机位置坐标)\n        const ray = worldVector.sub(camera.position).normalize();\n        //创建射线投射器对象\n        const raycaster = new THREE.Raycaster(camera.position, ray);\n        //返回射线选中的对象\n        const intersects = raycaster.intersectObjects(this._container.children);\n      \n        // 避免连续选中\n        if (this._currentSelectObj) {\n            this._currentSelectObj.material.transparent = false;\n            this._currentSelectObj.material.opacity = 1;\n            this._currentSelectObj = null;\n            // this._toolTipHelper.hideTooltip(); // TODO: bdp\n        }\n\n        for (var i = 0; i < intersects.length; i++) {\n            let object = intersects[i].object;\n            let udata = object.userData;\n            if (udata && udata.type === 'bar') {\n                let color = object.material.color.getHexString();\n                object.material.transparent = true;\n                object.material.opacity = 0.85;\n                this._currentSelectObj = object;\n                \n                let content = `\n                    <div class=\"mb4\" style=\"text-align:center;\">${udata['name']}</div>\n                    <div style=\"color:#${color};\"><span>${udata['yname']}：</span> ${udata['formattedVal']}</div>\n                `;\n                // console.log(udata.name);\n                // this._toolTipHelper.showTooltip(cx, cy, content); // TODO: bdp\n                break;\n            }\n        }\n        if (i === intersects.length) {\n            if (this._currentSelectObj) {\n                this._currentSelectObj.material.transparent = false;\n                this._currentSelectObj.material.opacity = 1;\n                this._currentSelectObj = null;\n                // this._toolTipHelper.hideTooltip(); // TODO: bdp\n            }\n        }\n    }\n    _createBar(center, height, color, yoffset) {\n        const barStyle = this.options.barStyle;\n        const halfWidth = barStyle.width / 2;\n\n        const shape = new THREE.Shape();\n        shape.moveTo(-halfWidth, -halfWidth);\n        shape.lineTo(-halfWidth, halfWidth);\n        shape.lineTo(halfWidth, halfWidth);\n        shape.lineTo(halfWidth, -halfWidth);\n        shape.lineTo(-halfWidth, -halfWidth);\n  \n        const extrudeSettings = {\n          curveSegments: 0,\n          steps: 0,\n          depth: height,\n          bevelEnabled: true,\n          bevelThickness: barStyle.bevelThickness,\n          bevelSize: barStyle.bevelSize,\n          bevelSegments: barStyle.bevelSegments\n        };\n        const geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);\n        const material = new THREE.MeshPhongMaterial({ color: color });\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.set(center[0], yoffset, -center[1]);\n        mesh.rotateX(-Math.PI / 2);\n        return mesh;\n    }\n    _addTextLayer() {\n        let textData = [];\n        this._barData.data.forEach((item, index) => {\n            let barHeight = this.getBarHeight(item);\n            let yoffset = this.geojsonLayer.getDepth();\n            let tempobj = {};\n            tempobj.text = item.formattedVal;\n            tempobj.center = item.center;\n            tempobj.altitude = barHeight + yoffset + this.options.barText.offset;\n            textData.push(tempobj);\n        });\n        const options = {\n            textStyle: this.options.barText.textStyle\n        };\n        this._textLayer = new TextLayer(textData, options);\n        this._map.addLayer(this._textLayer);\n    }\n}","import Layer from './layer';\nimport * as Util from '../util';\nimport { lineShader } from './shader/line';\n\n// 飞线图层\nexport default class FlyLineLayer extends Layer {\n    constructor(data, geojsonLayer, options) {\n        super(data, options);\n        const defaultOptions = {\n            heightLimit: 30, // 飞线最高点高度\n            // 线样式\n            lineStyle: {\n                show: true,\n                color: '#0f0',\n                opacity: 0.5,\n                width: 1\n            },\n            // 飞线特效样式\n            effect: {\n                show: false,\n                segmentNumber: 1, // 飞线分段数，自然数，默认为1，不分段\n                period: 4, // 尾迹特效的周期\n                constantSpeed: null, // 尾迹特效是否是固定速度，设置后忽略period值\n                trailWidth: 4, // 尾迹宽度(TODO:暂时不可用)\n                trailLength: 0.1, // 尾迹长度，范围 0-1，为线条长度百分比\n                trailColor: null, // 尾迹颜色，默认跟线颜色相同\n                trailOpacity: null, // 尾迹不透明度，默认跟线相同\n                spotIntensity: 5.0 // 头部高亮部分强度（TODO:暂时不可用）\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this.geojsonLayer = geojsonLayer;\n\n        this.uniforms = {\n            baseColor: {value: [1.0, 1.0, 1.0, 1.0]},\n            time: {value: 0},\n            speed: {value: 0},\n            period: {value: 5000},\n            trailLength: {value:1.0},\n            spotSize: {value: 10.0},\n            spotIntensity: {value: 5.0}\n        };\n        this._maxDistance = 0;\n        this.animate();\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        if (this._animateId) {\n            window.cancelAnimationFrame(this._animateId);\n        }\n    }\n    animate(time) {\n        this._animateId = requestAnimationFrame(this.animate.bind(this));\n        this.uniforms.time.value  = time;\n    }\n    _draw() {\n        this._data.forEach(item => {\n            let h = this.options.heightLimit;\n            let f = item.from.split(',').map(p => Number(p));\n            let t = item.to.split(',').map(p => Number(p));\n            let m = [(f[0]+t[0])/2, (f[1]+t[1])/2];\n            if (this._map.options.type === 'sphere') {\n                // 三维的第三个值表示海拔,需进行投影转换\n                m.push(h);\n            }\n            f = this._map.projectLngLat(f);\n            t = this._map.projectLngLat(t); \n            m = this._map.projectLngLat(m);\n            if(this._map.options.type === 'plane') {\n                // 二维的第三个值表示离地面距离，不需投影\n                m.push(h);\n            }\n            if (this.options.lineStyle.show) {\n                this._drawLine(f, t, m);\n            }\n            if (this.options.effect.show) {\n                this._drawFlyLine(f, t, m);\n            }\n        });\n    }\n    _getCurve(startPoint, endPoint, midPoint) {\n        const isGlobal = !!(this._map.options.type === 'sphere');\n        let geojsonLayer = this.geojsonLayer;\n        let depth = 0;\n        if (geojsonLayer && geojsonLayer.options.isExtrude) {\n            depth = geojsonLayer.options.depth;\n        }\n        let middleX = midPoint[0];\n        let middleY = midPoint[1];\n        let middleZ = isGlobal ? midPoint[2] : (0 + depth + midPoint[2]);\n        let sz = isGlobal ? startPoint[2] : (0 + depth);\n        let ez = isGlobal ? endPoint[2] : (0 + depth);\n        let startVector = new THREE.Vector3(startPoint[0], startPoint[1], sz);\n        let middleVector = new THREE.Vector3(middleX, middleY, middleZ);\n        let endVector = new THREE.Vector3(endPoint[0], endPoint[1], ez);\n\n        let curve = new THREE.CatmullRomCurve3([startVector, middleVector, endVector]);\n        return curve;\n    }\n    _drawPoint([x, y, z], color = \"#f00\") {\n        const pointGeometry = new THREE.SphereGeometry(2, 100, 100);\n        const pointMaterial = new THREE.MeshBasicMaterial( {color} );\n        const mesh = new THREE.Mesh(pointGeometry, pointMaterial);\n        mesh.position.set(x, y, z);\n        this._container.add(mesh);\n    }\n    _drawLine(startPoint, endPoint, midPoint) {  \n        const curve = this._getCurve(startPoint, endPoint, midPoint);\n        const points = curve.getPoints( 50 );\n        let geometry = new THREE.BufferGeometry().setFromPoints( points );\n        \n        let options = {\n            color: this.options.lineStyle.color,\n            linewidth: this.options.lineStyle.width\n        };\n        let material = new THREE.LineBasicMaterial( options );\n        material.transparent = true;\n        material.opacity = this.options.lineStyle.opacity;\n        \n        // Create the final object to add to the scene\n        let curveObject = new THREE.Line( geometry, material );\n        if (this._map.options.type === 'plane') {\n            curveObject.rotateX(-Math.PI/2);\n        }\n        \n        this._container.add(curveObject);\n\n    }\n    _drawFlyLine(startPoint, endPoint, midPoint) {\n        const curve = this._getCurve(startPoint, endPoint, midPoint);\n        const points = curve.getPoints(50);\n        let segmentNum = this.options.effect.segmentNumber;\n        if (segmentNum <= 1) {\n            // 不分段\n            this._drawSegment(points);\n        } else {\n            let plen = points.length;\n            let step = Math.floor(plen / segmentNum);\n            if(step > 0) {\n                for (let count = 0; count < segmentNum; count++) {\n                    let startIndex = count * step;\n                    let endIndex = count * step + step + 1;\n                    if (count === segmentNum - 1) {\n                        endIndex = plen - 1;\n                    }\n                    let segPoints = points.slice(startIndex, endIndex);\n                    this._drawSegment(segPoints);\n                }\n            } else {\n                // 分段数大于所有点数时，不分段\n                this._drawSegment(points);\n            }\n        }\n    }\n    _drawSegment(points) {\n        let effectOptions = this.options.effect;\n        let useConstantSpeed = effectOptions.constantSpeed != null;\n        let period = effectOptions.period * 1000;\n        \n        let verticeArr = []; // 顶点数组\n        let colorArr = []; // 颜色数组\n        let distArr = []; // 距离原点距离数组\n        let disAllArr = []; // 总距离数组\n        let startArr = []; // 起始位置数组\n        \n        let dist = 0;\n        for (let i = 0, len = points.length; i < len; i++) {\n            verticeArr.push(points[i].x, points[i].y, points[i].z);\n            let lineColor = new THREE.Color(effectOptions.trailColor || this.options.lineStyle.color);\n            colorArr.push(lineColor.r, lineColor.g, lineColor.b, effectOptions.trailOpacity != null ? effectOptions.trailOpacity : this.options.lineStyle.opacity);\n            if (i > 0) {\n                dist += points[i].distanceTo(points[i-1]);\n            }\n            distArr.push(dist);\n        }\n        this._maxDistance = Math.max(this._maxDistance, dist);\n        let randomStart = Math.random() * (useConstantSpeed ? dist : period);\n        for (let i = 0, len = points.length; i < len; i++) {\n            disAllArr.push(dist);\n            startArr.push(randomStart);\n        }\n        \n        let geometry = new THREE.BufferGeometry();\n        geometry.addAttribute('position', new THREE.BufferAttribute( new Float32Array(verticeArr), 3 ));\n        geometry.addAttribute('colors', new THREE.BufferAttribute( new Float32Array(colorArr), 4 ));\n        geometry.addAttribute('dist', new THREE.BufferAttribute( new Float32Array(distArr), 1 ));\n        geometry.addAttribute('distAll', new THREE.BufferAttribute( new Float32Array(disAllArr), 1 ));\n        geometry.addAttribute('start', new THREE.BufferAttribute( new Float32Array(startArr), 1 ));\n        \n        this.uniforms.spotSize.value =  this._maxDistance * 0.1 * effectOptions.trailLength;\n        this.uniforms.trailLength.value = effectOptions.trailLength;\n        this.uniforms.spotIntensity.value = effectOptions.spotIntensity;\n\n        let shaderMaterial = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: lineShader.vertexShader,\n            fragmentShader: lineShader.fragmentShader,\n            // 如果不透明度低于此值，则不会渲染材质。默认值为0。\n            // 此处避免出现白色尾线\n            transparent: true,\n            alphaTest: 0.8\n        });\n        // 由于OpenGL Core Profile与大多数平台上WebGL渲染器的限制，无论如何设置该值，线宽始终为1。\n        // shaderMaterial.linewidth = effectOptions.trailWidth;\n\n        if (useConstantSpeed) {\n            this.uniforms.speed.value = effectOptions.constantSpeed / 1000;\n            shaderMaterial.defines = { CONSTANT_SPEED: effectOptions.constantSpeed };\n        } else {\n            this.uniforms.period.value = period;\n        }\n        \n        let line = new THREE.Line(geometry, shaderMaterial);\n        if (this._map.options.type === 'plane') {\n            line.rotateX(-Math.PI/2);\n        }\n\n        this._container.add(line);\n    }\n}","import Layer from './layer';\nimport * as Util from '../util';\nimport * as mapHelper from '../maphelper';\nimport TextLayer from './text-layer';\n\n// geojson 地图\nexport default class GeoJSONLayer extends Layer {\n    constructor(data, options) {\n        super(data, options);\n        const defaultOptions = {\n            isExtrude: true, // 是否拉伸面\n            depth: 16, // 拉伸厚度\n            // 地区名字\n            areaText: {\n                show: true,\n                offset: 1,\n                textStyle: { // 有数据地区的名字样式\n                    fontWeight: 'normal',\n                    fontFamily: 'Microsoft YaHei',\n                    fontColor: '#f00',\n                    textAlign: 'center',\n                    textBaseline: 'middle'\n                },\n                nullTextStyle: { // 无数据地区的名字样式\n                    fontWeight: 'normal',\n                    fontFamily: 'Microsoft YaHei',\n                    fontColor: '#0f0',\n                    textAlign: 'center',\n                    textBaseline: 'middle' \n                }\n            },\n            lineOpacity: 1,\n            lineMaterial: {\n                color: 0x999999,\n                linewidth: 1.5\n            },\n            areaMaterial: { // 面材质配置\n                color: 0x00ff00,\n                side: THREE.DoubleSide\n            },\n            highLightColor: '#639fc0'\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this._initFeatures();\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._initBoundsAndCenter();\n        this._draw();\n        this.updateLabels();\n        this._map.on('mousemove', this._mousemoveEvtHandler, this);\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        this._textLayer && this._map.removeLayer(this._textLayer);\n        this._nulltextLayer && this._map.removeLayer(this._nulltextLayer);\n        this._map.off('mousemove', this._mousemoveEvtHandler, this);\n    }\n    getBounds() {\n        return this._bounds;\n    }\n    getCenter() {\n        return this._center;\n    }\n    getFeatures() {\n        return this._features || [];\n    }\n    getDepth() {\n        if (this.options.isExtrude) {\n            return this.options.depth;\n        } else {\n            return 0;\n        }\n    }\n    createFeatureArray(json) {\n        var feature_array = [];\n        var temp_feature;\n\n        if (json.type == 'Feature') {\n            feature_array.push(json);\n        } else if (json.type == 'FeatureCollection') {\n            for (var feature_num = 0; feature_num < json.features.length; feature_num++) {\n                feature_array.push(json.features[feature_num]);\n            }\n        } else if (json.type == 'GeometryCollection') {\n            for (var geom_num = 0; geom_num < json.geometries.length; geom_num++) {\n                temp_feature = {\n                    geometry: json.geometries[geom_num]\n                }\n                feature_array.push(temp_feature);\n            }\n        } else {\n            throw new Error('The geoJSON is not valid.');\n        }\n        return feature_array;\n    }\n    createCoordinateArray(feature) {\n        //Loop through the coordinates and figure out if the points need interpolation.\n        var temp_array = [];\n        var interpolation_array = [];\n\n        for (var point_num = 0; point_num < feature.length; point_num++) {\n            var point1 = feature[point_num];\n            var point2 = feature[point_num - 1];\n\n            if (point_num > 0) {\n                if (this.needsInterpolation(point2, point1)) {\n                    interpolation_array = [point2, point1];\n                    interpolation_array = this.interpolatePoints(interpolation_array);\n\n                    for (var inter_point_num = 0; inter_point_num < interpolation_array.length; inter_point_num++) {\n                        temp_array.push(interpolation_array[inter_point_num]);\n                    }\n                } else {\n                    temp_array.push(point1);\n                }\n            } else {\n                temp_array.push(point1);\n            }\n        }\n        return temp_array;\n    }\n    needsInterpolation(point2, point1) {\n        //If the distance between two latitude and longitude values is\n        //greater than five degrees, return true.\n        var lon1 = point1[0];\n        var lat1 = point1[1];\n        var lon2 = point2[0];\n        var lat2 = point2[1];\n        var lon_distance = Math.abs(lon1 - lon2);\n        var lat_distance = Math.abs(lat1 - lat2);\n\n        if (lon_distance > 5 || lat_distance > 5) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    interpolatePoints(interpolation_array) {\n        //This function is recursive. It will continue to add midpoints to the\n        //interpolation array until needsInterpolation() returns false.\n        var temp_array = [];\n        var point1, point2;\n\n        for (var point_num = 0; point_num < interpolation_array.length - 1; point_num++) {\n            point1 = interpolation_array[point_num];\n            point2 = interpolation_array[point_num + 1];\n\n            if (this.needsInterpolation(point2, point1)) {\n                temp_array.push(point1);\n                temp_array.push(this.getMidpoint(point1, point2));\n            } else {\n                temp_array.push(point1);\n            }\n        }\n\n        temp_array.push(interpolation_array[interpolation_array.length - 1]);\n\n        if (temp_array.length > interpolation_array.length) {\n            temp_array = this.interpolatePoints(temp_array);\n        } else {\n            return temp_array;\n        }\n        return temp_array;\n    }\n    getMidpoint(point1, point2) {\n        var midpoint_lon = (point1[0] + point2[0]) / 2;\n        var midpoint_lat = (point1[1] + point2[1]) / 2;\n        var midpoint = [midpoint_lon, midpoint_lat];\n\n        return midpoint;\n    }\n    convertCoordinates(coordinateArray) {\n        return coordinateArray.map(lnglat => {\n            let mecatorPoint = mapHelper.wgs84ToMecator(lnglat);\n            return mecatorPoint.map(p => p / this._map.options.SCALE_RATIO);\n        });\n    }\n    _initBoundsAndCenter() {\n        let bounds;\n        let mapOptions = this._map.options;\n        if (mapOptions.type === 'plane') {\n            if (mapOptions.region === 'world') {\n                bounds = mapHelper.getBounds('world', mapOptions.crs);\n            } else if (mapOptions.region === 'china') {\n                bounds = mapHelper.getBounds('china', mapOptions.crs);\n            } else {\n                bounds = mapHelper.getBounds(this._data, mapOptions.crs);\n            }\n        } else {\n            // sphere\n        }\n        if (bounds) {\n            if (mapOptions.crs === mapHelper.CRS.epsg4326) {\n                this._bounds = bounds;\n                this._center = bounds.getCenter();\n            } else {\n                let scale = mapOptions.SCALE_RATIO;\n                this._bounds = bounds.scale(1/scale);\n                this._center = this._bounds.getCenter();\n            }\n        }\n    }\n    _initFeatures() {\n        this._features = this.createFeatureArray(this._data);\n    }\n    _draw() {\n        if (this._features == null || !this._features.length) {return;}\n        for (let i = 0, len = this._features.length; i < len; i++) {\n            let feature = this._features[i];\n            let geometry = feature.geometry;\n            if (geometry == null) continue;\n            if (geometry.type == 'Point') {\n\n            } else if (geometry.type == 'MultiPoint') {\n\n            } else if (geometry.type == 'LineString') {\n\n            } else if (geometry.type == 'MultiLineString') {\n\n            } else if (geometry.type == 'Polygon') {\n                for (let segment_num = 0; segment_num < geometry.coordinates.length; segment_num++) {\n                    let coordinate_array = this.createCoordinateArray(geometry.coordinates[segment_num]);\n                    let convert_array = coordinate_array;\n                    if (this._map.options.crs === mapHelper.CRS.epsg3857) {\n                        convert_array = this.convertCoordinates(coordinate_array);\n                    }\n                    this.drawPolygon(convert_array);\n                }\n\n            } else if (geometry.type == 'MultiPolygon') {\n                for (let polygon_num = 0; polygon_num < geometry.coordinates.length; polygon_num++) {\n                    for (let segment_num = 0; segment_num < geometry.coordinates[polygon_num].length; segment_num++) {\n                        let coordinate_array = this.createCoordinateArray(geometry.coordinates[polygon_num][segment_num]);\n                        let convert_array = coordinate_array;\n                        if (this._map.options.crs === mapHelper.CRS.epsg3857) {\n                            convert_array = this.convertCoordinates(coordinate_array);\n                        }\n                        this.drawPolygon(convert_array);\n                    }\n                }\n            } else {\n                throw new Error('The geoJSON is not valid.');\n            }\n        }\n    }\n    _mousemoveEvtHandler(event) {\n        const mapSize = this._map.getContainerSize();\n        const camera = this._map.getCamera();\n        const sx = event.offsetX; \n        const sy = event.offsetY;\n        const cx = event.clientX;\n        const cy = event.clientY;\n        //屏幕坐标转标准设备坐标\n        const x = (sx / mapSize.width) * 2 - 1; \n        const y = -(sy / mapSize.height) * 2 + 1;\n        //标准设备坐标\n        const standardVector = new THREE.Vector3(x, y, 0.5); \n        //标准设备坐标转世界坐标\n        const worldVector = standardVector.unproject(camera);\n        //射线投射方向单位向量(worldVector坐标减相机位置坐标)\n        const ray = worldVector.sub(camera.position).normalize();\n        //创建射线投射器对象\n        const raycaster = new THREE.Raycaster(camera.position, ray);\n        //返回射线选中的对象\n        const intersects = raycaster.intersectObjects(this._container.children);\n      \n        // 避免连续选中\n        if (this._currentSelectObj) {\n            this._currentSelectObj.material.color = this._currentSelectObj.userData.oldColor;\n            this._currentSelectObj = null;\n        }\n\n        for (var i = 0; i < intersects.length; i++) {\n            let object = intersects[i].object;\n            let udata = object.userData;\n            if (udata && udata.type === 'area') {\n                object.userData.oldColor = object.material.color;\n                object.material.color = new THREE.Color(this.options.highLightColor);\n                this._currentSelectObj = object;\n                break;\n            }\n        }\n        if (i === intersects.length) {\n            if (this._currentSelectObj) {\n                this._currentSelectObj.material.color = this._currentSelectObj.userData.oldColor;\n                this._currentSelectObj = null;\n            }\n        }\n    }\n    updateLabels() {\n        if (this._features == null || !this._features.length) {return;}\n        let textData = [];\n        let nullTextData = [];\n        this._features.forEach(f => {\n            let yoffset = this.getDepth();\n            let tempobj = {};\n            tempobj.text = mapHelper.getNormalizeName(f);\n            tempobj.center = mapHelper.getNormalizeCenter(f);\n            tempobj.altitude = yoffset + this.options.areaText.offset;\n            if (f.hasBarData) {\n                textData.push(tempobj);\n            } else {\n                nullTextData.push(tempobj);\n            }  \n        });\n        const textOptions = {\n            textStyle: this.options.areaText.textStyle\n        };\n        const nullTextOptions = {\n            textStyle: this.options.areaText.nullTextStyle\n        };\n        if (this._textLayer) {\n            this._textLayer.update(textData);\n        } else {\n            this._textLayer = new TextLayer(textData, textOptions);\n            this._map.addLayer(this._textLayer);\n        }\n        if (this._nulltextLayer && this.options.areaText.show) {\n            this._nulltextLayer.update(nullTextData);\n        } else if(this._nulltextLayer == null && this.options.areaText.show){\n            this._nulltextLayer = new TextLayer(nullTextData, nullTextOptions);\n            this._map.addLayer(this._nulltextLayer);\n        }\n    }\n    drawOutLine(points, mesh) {\n        // 画轮廓线\n        // 因为面是画在xy平面的，然后通过旋转而来，为了保持一致，轮廓线也绘制在xy平面，这样变换就能与面同步\n        let line_geom = new THREE.Geometry();\n        for (let i = 0, len=points.length; i < len ; i++) {\n            line_geom.vertices.push(new THREE.Vector3(points[i][0], points[i][1], 0));\n        }\n        let line_material = new THREE.LineBasicMaterial(this.options.lineMaterial);\n        line_material.transparent = false;\n        line_material.opacity = this.options.lineOpacity;\n        let line = new THREE.Line(line_geom, line_material);\n        if (this.options.isExtrude) {\n            line.translateZ(this.options.depth);\n        }\n        line.renderOrder = 98;\n        mesh.add(line);\n    }\n    drawPolygon(points) {\n        const shape = new THREE.Shape();\n        for (let i = 0; i < points.length; i++) {\n            let point = points[i];\n            if (i === 0) {\n                shape.moveTo(point[0], point[1]);\n            } else {\n                shape.lineTo(point[0], point[1]);\n            }\n        }\n        shape.closePath();\n\n        let geometry, material;\n\n        if (this.options.isExtrude) {\n            // 拉伸\n            let extrudeSettings = {\n                depth: this.options.depth, \n                bevelEnabled: false   // 是否用斜角\n            };\n            geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);\n            material = new THREE.MeshPhongMaterial(this.options.areaMaterial);\n        } else {\n            // 不拉伸\n            geometry = new THREE.ShapeBufferGeometry(shape);\n            material = new THREE.MeshBasicMaterial(this.options.areaMaterial);\n        }\n        \n        let mesh = new THREE.Mesh(geometry, material);\n        this.drawOutLine(points, mesh);\n        mesh.rotateX(-Math.PI/2);\n        mesh.userData = {\n            type: 'area'\n        };\n        this._container.add(mesh);\n    }\n}","import * as Util from '../util';\nimport EventEmiter from '../eventemiter';\nexport default class Layer extends EventEmiter {\n    constructor(data, options) {\n        super();\n        var defaultOptions = {};\n        this.options = Util.extend(true, defaultOptions, options);\n        this._data = data;\n        this._container = new THREE.Group();\n    }\n    getContainer() {\n        return this._container;\n    }\n    getData() {\n        return this._data;\n    }\n    onAdd(map) {\n        this._map = map;\n    }\n    onRemove(map) {}\n}","export const lineShader = {\n   vertexShader: `\n      attribute float dist;\n      attribute float distAll;\n      attribute float start;\n      attribute vec4 colors;\n\n      uniform float speed;\n      uniform float trailLength;\n      uniform float time;\n      uniform float period;\n      uniform float spotSize;\n\n      varying vec4 v_Color;\n      varying float v_Percent;\n      varying float v_SpotPercent;\n\n      void main()\t{\n         vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n         gl_Position = projectionMatrix * mvPosition;\n            \n         #ifdef CONSTANT_SPEED\n            float t = mod((speed * time + start) / distAll, 1. + trailLength) - trailLength;\n         #else\n            float t = mod((time + start) / period, 1. + trailLength) - trailLength;\n         #endif\n         \n         float trailLen = distAll * trailLength;\n         v_Percent = (dist - t * distAll) / trailLen;\n         v_Color = colors;\n         v_SpotPercent = spotSize / distAll;\n      }`,\n   fragmentShader: `            \n      uniform vec4 baseColor;\n      uniform float spotIntensity;\n      varying vec4 v_Color;\n      varying float v_Percent;\n      varying float v_SpotPercent;\n\n      void main( void ) {\n        if (v_Percent > 1.0 || v_Percent < 0.0) {\n            discard;\n        }\n        float fade = v_Percent;\n\n      #ifdef SRGB_DECODE\n         gl_FragColor = sRGBToLinear(baseColor * v_Color);\n      #else\n         gl_FragColor = baseColor * v_Color;\n      #endif\n   \n      //   if (v_Percent > (1.0 - v_SpotPercent)) {\n      //       gl_FragColor.rgb *= spotIntensity;\n      //   }\n        gl_FragColor.a *= fade;\n      }`\n}","import Layer from './layer';\nimport * as Util from '../util';\nimport TextSprite from './text-sprite';\n\n// 文字标注图层\nexport default class TextLayer extends Layer {\n    constructor(data, options) {\n        super(data, options);\n        const defaultOptions = {\n            textStyle: {\n                fontWeight: 'normal',\n                fontFamily: 'Microsoft YaHei',\n                fontColor: '#000',\n                textAlign: 'center',\n                textBaseline: 'middle'\n            }\n        };\n        Util.extend(true, defaultOptions, options);\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n    }\n    update(data) {\n        this._container.remove(...this._container.children);\n        this._data = data;\n        this._draw();\n    }\n    _draw() {\n        if (this._data == null || !this._data.length) {return;}\n        this._data.forEach(d => {\n            const projCenter = this._map.projectLngLat(d.center);\n            const altitude = d.altitude; \n            const textSprite = new TextSprite(d.text, this.options.textStyle).getSprite();\n\n            textSprite.scale.set(32, 32, 1);\n            textSprite.position.set(projCenter[0], altitude, -projCenter[1]);\n            textSprite.rotateX(-Math.PI/2);\n\n            // 避免柱子遮挡地名\n            textSprite.renderOrder = 100;\n            textSprite.material.depthTest=false; // 是否采用深度测试，必须加\n    \n            this._container.add(textSprite);\n        });\n    }\n}","import * as Util from '../util';\n\n// 字体精灵\nexport default class TextSprite {\n    constructor(text, options) {\n        const defaultOptions = {\n            fontWeight: 'normal',\n            fontFamily: 'Microsoft YaHei',\n            fontColor: '#000',\n            textAlign: 'center',\n            textBaseline: 'middle'\n        }\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this._textStr = text == null ? '' : String(text);\n\n        this._init();\n    }\n    getSprite() {\n        return this._textSprite;\n    }\n    _init() {\n        const canvas = document.createElement(\"canvas\");\n        // webgl 规定 canvas 宽高为2的n次幂\n        canvas.width = 256;\n        canvas.height = 256;\n\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // draw\n        const options = this.options;\n        ctx.font = \"16px \" + options.fontWeight + \" \" + options.fontFamily;\n        ctx.fillStyle = options.fontColor;\n        ctx.textAlign = options.textAlign;\n        ctx.textBaseline = options.textBaseline;\n        ctx.fillText(this._textStr, canvas.width / 2, canvas.height / 2 + 5);\n\n        const texture = new THREE.Texture(canvas);\n        texture.needsUpdate = true;\n\n        const spriteMaterial = new THREE.SpriteMaterial({\n            map: texture,\n            transparent:true\n        });\n        this._textSprite = new THREE.Sprite(spriteMaterial);\n    }\n}","import Bounds from './bounds';\n\nconst R = 6378137; // 地球半径（米）\nconst R_MINOR = 6356752.314245179;\nconst BOUND = new Bounds(-20037508.34279, -15496570.73972, 20037508.34279, 18764656.23138);\n\nexport const CRS = {\n    epsg4326: 'EPSG:4326',\n    epsg3857: 'EPSG:3857'\n}\n\n// 经纬度转墨卡托\nexport function wgs84ToMecator(lnglat) {\n    var d = Math.PI / 180,\n        r = R,\n        y = lnglat[1] * d,\n        tmp = R_MINOR / r,\n        e = Math.sqrt(1 - tmp * tmp),\n        con = e * Math.sin(y);\n\n    var ts = Math.tan(Math.PI / 4 - y / 2) / Math.pow((1 - con) / (1 + con), e / 2);\n    y = -r * Math.log(Math.max(ts, 1E-10));\n\n    return [ lnglat[0] * d * r, y ];\n}\n\n// 墨卡托转经纬度\nexport function mecatorToWgs84(point) {\n    var d = 180 / Math.PI,\n        r = R,\n        tmp = R_MINOR / r,\n        e = Math.sqrt(1 - tmp * tmp),\n        ts = Math.exp(-point[1] / r),\n        phi = Math.PI / 2 - 2 * Math.atan(ts);\n\n    for (var i = 0, dphi = 0.1, con; i < 15 && Math.abs(dphi) > 1e-7; i++) {\n        con = e * Math.sin(phi);\n        con = Math.pow((1 - con) / (1 + con), e / 2);\n        dphi = Math.PI / 2 - 2 * Math.atan(ts * con) - phi;\n        phi += dphi;\n    }\n\n    return [ point[0] * d / r, phi * d ];\n}\n\n// 根据geojson数据获取geo对象在墨卡托投影平面的范围\nexport function getBounds(geojson, crs) {\n    crs = crs || CRS.epsg4326;\n    // 中国和世界范围写死，避免大量计算\n    if (geojson === 'world') {\n        let xmin = -180;\n        let ymin = -85;\n        let xmax = 180;\n        let ymax = 85;\n        let lb = [xmin, ymin];\n        let rt = [xmax, ymax];\n        if (crs === CRS.epsg3857) {\n            lb = wgs84ToMecator(lb);\n            rt = wgs84ToMecator(rt);\n        }\n        return new Bounds(lb, rt);\n    } else if (geojson === 'china') {\n        let xmin = 73.4766;\n        let xmax = 135.0879;\n        let ymin = 18.1055;\n        let ymax = 53.5693;\n        let lb = [xmin, ymin];\n        let rt = [xmax, ymax];\n        if (crs === CRS.epsg3857) {\n            lb = wgs84ToMecator(lb);\n            rt = wgs84ToMecator(rt);\n        }\n        return new Bounds(lb, rt);\n    } else {\n        let bound = {\n            xmin: 180,\n            xmax: -180,\n            ymin: 90,\n            ymax: -90\n        };\n        let features = [];\n        let polygons = [];\n        if (geojson.type === \"FeatureCollection\") {\n            features = geojson.features;\n        } else if (geojson.type === \"Feature\") {\n            features.push(geojson);\n        }\n        features.forEach(f => {\n            if (f.geometry && f.geometry.type === \"Polygon\") {\n                polygons.push(f.geometry.coordinates);\n            } else if (f.geometry && f.geometry.type === \"MultiPolygon\") {\n                for (let i = 0, len = f.geometry.coordinates.length; i < len; i++) {\n                    polygons.push(f.geometry.coordinates[i]);\n                }\n            }\n        });\n        for (let i = 0, len = polygons.length; i < len; i++) {\n            let seg = polygons[i];\n            for (let j = 0; j < seg.length; j++) {\n                let coords = seg[j];\n                for (let k = 0; k < coords.length; k++) {\n                    let coord = coords[k];\n                    if (coord[0] < bound.xmin) {\n                        bound.xmin = coord[0];\n                    }\n                    if (coord[0] > bound.xmax) {\n                        bound.xmax = coord[0];\n                    }\n                    if (coord[1] < bound.ymin) {\n                        bound.ymin = coord[1];\n                    }\n                    if (coord[1] > bound.ymax) {\n                        bound.ymax = coord[1];\n                    }\n                }\n            }\n        }\n        let lb = [bound.xmin, bound.ymin];\n        let rt = [bound.xmax, bound.ymax];\n        if (crs === CRS.epsg3857) {\n            lb = wgs84ToMecator(lb);\n            rt = wgs84ToMecator(rt);\n        }\n        return new Bounds(lb, rt);\n    }\n}\n\nexport function getNormalizeCenter(feature) {\n    let props = feature.properties;\n    let center = props && (props.center || props.cp);\n    if (center && typeof center === 'string') {\n        center = center.split(',');\n    }\n    if (Array.isArray(center)) {\n        center = center.map(item => Number(item));\n    }\n    if (center == null) {\n        let bounds = getBounds(feature);\n        center = bounds.getCenter();\n    }\n    return center;\n}\n\nexport function getNormalizeName(feature) {\n    let props = feature && feature.properties;\n    if (props) {\n        if(props.name) {\n            return props.name;\n        } else if (props.id) {\n            return props.id;\n        } else {\n            return '';\n        }\n    } else {\n        return feature.id || '';\n    }\n}\n\nexport function scalePoint(point, scale) {\n    return point.map(p => p * scale);\n}\n","import EventEmiter from './eventemiter'\nimport * as Util from './util'\nimport * as mapHelper from './maphelper'\n\nexport default class ThreeMap extends EventEmiter {\n    constructor(el, options) {\n        super();\n        const defaultOptions = {\n            type: 'plane', // plane or sphere ,平面或球面\n            region: 'world', // china or world, 中国或世界地图\n            crs: mapHelper.CRS.epsg3857, // 地图采用的地理坐标系 EPSG:4326: 经纬度，EPSG:3857: 墨卡托\n            SCALE_RATIO: 100000, // 地球墨卡托平面缩放比例\n            containerClassName: 'three-map-container', // 地图容器类名\n            camera: {\n                fov: 45,\n                near: 0.1,\n                far: 2000\n            },\n            orbitControlOptions: {\n                minDistance: 0, // 最小距离\n                maxDistance: Infinity, // 最大距离\n                // 垂直方向翻转角度，范围：0-180 度\n                minPolarAngle: 0, \n                maxPolarAngle: 180,\n                // 横向旋转角度，范围：-180-180 度，Infinity 表示不限制\n                minAzimuthAngle: -Infinity, \n                maxAzimuthAngle: Infinity\n            },\n            light: {\n                // 主光源：太阳光 THREE.DirectionalLight\n                main: {\n                    color: '#fff',\n                    intensity: 1, // 主光源的强度，0-1\n                    shadow: false, // 主光源是否投射阴影。默认关闭。开启阴影可以给场景带来更真实和有层次的光照效果。但是同时也会增加程序的运行开销。\n                    shadowQuality: 'medium', // 阴影的质量。可选'low', 'medium', 'high', 'ultra'\n                    alpha: 40, // 主光源绕 x 轴，即上下旋转的角度。配合 beta 控制光源的方向。\n                    beta: 40 // 主光源绕 y 轴，即左右旋转的角度。\n                },\n                // 环境光源 THREE.AmbientLight\n                ambient: {\n                    color: '#fff',\n                    intensity: 0.2\n                }\n            },\n            global: {\n                R: 220, // 球形地球半径\n                center: [170, 35], // 初始中心点\n                animation: true, // 是否转动\n                animationSpeed: 10, // 转动快慢\n                earthImgSrc: '../../images/earth.jpg', // 地球图片\n                light: {\n                    skyColor: '#fff',\n                    groundColor: '#333',\n                    intensity: 2\n                }\n            }\n        };\n        this.options = Util.extend(true, defaultOptions, options);\n\n        this._layers = {};\n        \n        this._initBounds();\n        this._initContainer(el);\n        if (this.options.type === 'sphere') {\n            this._initGlobal();\n        } else {\n            this._init3D();\n        }  \n        this._initEvents();  \n    }\n    getBounds() {\n        return this._fullBound;\n    }\n    addLayer(layer) {\n        var id = Util.stamp(layer);\n        if (this._layers[id]) {\n            return this;\n        }\n\n        this._layers[id] = layer;\n        this._scene.add(layer.getContainer());\n\n        layer.onAdd(this);\n\n        return this;\n    }\n    removeLayer(layer) {\n        var id = Util.stamp(layer);\n        if (!this._layers[id]) {\n            return this;\n        }\n\n        delete this._layers[id];\n        this._scene.remove(layer.getContainer());\n\n        layer.onRemove(this);\n\n        return this;\n    }\n    hasLayer(layer) {\n        return !!layer && (Util.stamp(layer) in this._layers);\n    }\n    clearLayers() {\n        for (var id in this._layers) {\n            this.removeLayer(this._layers[id]);\n        }\n    }\n    projectLngLat(lnglat) {\n        if (this.options.type === 'plane') {\n            if (this.options.crs === mapHelper.CRS.epsg3857) {\n                let point = mapHelper.wgs84ToMecator(lnglat);\n                return mapHelper.scalePoint(point, 1/this.options.SCALE_RATIO);\n            } else {\n                return lnglat;\n            }\n        } else {\n            // sphere\n            return this.lngLatToGlobal(lnglat[0], lnglat[1], lnglat[2]);\n        }\n    }\n    lngLatToGlobal(lng, lat, alt = 0) {\n        const phi = (90-lat)*(Math.PI/180);\n        const theta = (lng+180)*(Math.PI/180);\n        const radius = alt+this.options.global.R;\n        const x = -(radius * Math.sin(phi) * Math.cos(theta));\n        const z = (radius * Math.sin(phi) * Math.sin(theta));\n        const y = (radius * Math.cos(phi));\n        return [x, y, z];\n    }\n    updateSize() {\n        this._onContainerResize();\n    }\n    resetView() {\n        this._orbitControl.reset();\n    }\n    setView(bounds) {\n        // TODO: 自动适配\n        if (this.options.type === 'plane') {\n            if (this.options.region === 'world') {\n                this._orbitControl.object.position.set(16.42515, 369.562538, 333.99466);\n                this._orbitControl.target = new THREE.Vector3(10.06448, 51.62625, 6.71498);\n            } else {\n                let cameraOptions = this.options.camera;\n                let a = (Math.PI / 180) * (cameraOptions.fov / 2);\n                // let b = Math.max(bounds.getWidth(), bounds.getHeight()) / 2;\n                let b = bounds.getHeight() / 2;\n                let distance = b / Math.tan(a);\n                let center = bounds.getCenter();\n                this._orbitControl.object.position.set(0, 0, distance);\n                this._orbitControl.object.translateX(center[0]);\n                this._orbitControl.object.translateY(center[1]);\n                this._orbitControl.target = new THREE.Vector3(center[0], center[1], 0);\n            }\n        } else {\n            // sphere\n            let d = this.getDistance(this.options.global.R*2);\n            d*=1.5;\n            this._orbitControl.object.position.set(0, 0, d);\n            this._orbitControl.target = new THREE.Vector3(0, 0, 0);\n        }\n        this._orbitControl.update();\n    }\n    getDistance(height) {\n        // 视角\n        const deg = THREE.Math.degToRad(this.options.camera.fov) / 2;\n        // 视区高度\n        const d = (height / 2) / Math.tan(deg);\n        return d;\n    }\n    getContainerElement() {\n        return this._el;\n    }\n    getContainerSize() {\n        const compStyle = Util.getCmpStyle(this._el);\n        const width = parseInt(compStyle.width);\n        const height = parseInt(compStyle.height);\n        return { width, height };\n    }\n    getCamera() {\n        return this._camera;\n    }\n    // TODO: addLegend bdp\n    addLegend(legendOptions) {\n        let Legend = Dalaba.Chart.Legend;\n        let legend = null;\n        const size = this.getContainerSize();\n        if (!this._legendCanvas) {\n            this._legendCanvas = document.createElement('canvas');\n            this._legendCanvas.width = this._renderer.domElement.width;\n            this._legendCanvas.height = this._renderer.domElement.height;\n            this._legendCanvas.style.width = size.width + 'px';\n            this._legendCanvas.style.height = size.height + 'px';\n            this._legendCanvas.className = 'three-map-legendcanvas';\n            this._el.appendChild(this._legendCanvas);\n        }\n        if (Legend && legendOptions.enabled) {\n            legend = new Legend(\n                this._legendCanvas,//this.addLayer(legendOptions.layer),\n                [{name: 9}],\n                legendOptions//selected为false不读取\n            );\n        }\n        return legend;\n    }\n    _initBounds() {\n        if (this.options.type === 'plane') {\n            if (this.options.region === 'china') {\n                this._fullBound = mapHelper.getBounds('china', this.options.crs);\n            } else {\n                this._fullBound = mapHelper.getBounds('world', this.options.crs);\n            }\n        }\n    }\n    _initContainer(el) {\n        this._container = typeof el === 'string' ? document.getElementById(el) : el;\n        if (!this._container) {\n            throw new Error(\"未提供父容器,请为地图提供一个父容器！\");\n        }\n\n        this._el = document.createElement('div');\n        this._el.style.height = '100%';\n        this._el.style.margin = 0;\n        this._el.style.padding = 0;\n        Util.addClass(this._el, this.options.containerClassName);\n\n        this._container.appendChild(this._el);\n    }\n    _init3D() {\n        if (THREE == undefined) throw new Error('需先引入 threejs 库！');\n        if (THREE.OrbitControls == undefined) throw new Error('需先引入 OrbitControls 组件！');\n\n        const size = this.getContainerSize();\n        const dpr = Util.getDpr();\n\n        // 初始化画布\n        this._renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            preserveDrawingBuffer: true\n        });\n        this._renderer.setPixelRatio(dpr);\n        this._renderer.setClearColor(0x000000, 0); // 背景透明 \n        this._renderer.setSize(size.width, size.height, true);\n        this._renderer.domElement.className = 'chart-canvas';\n        this._el.appendChild(this._renderer.domElement);\n\n        // 设置场景\n        this._scene = new THREE.Scene();\n\n        // 相机\n        const cameraOptions = this.options.camera;\n        this._camera = new THREE.PerspectiveCamera(cameraOptions.fov, size.width / size.height, cameraOptions.near, cameraOptions.far);\n\n        // 控件\n        const orbitControlOptions = this.options.orbitControlOptions;\n        this._orbitControl = new THREE.OrbitControls(this._camera, this._renderer.domElement);\n        // 距离相机的最小、最大距离，仅用于透视相机\n        this._orbitControl.minDistance = orbitControlOptions.minDistance; \n        this._orbitControl.maxDistance = orbitControlOptions.maxDistance; \n        // 最小、最大翻转角度 在哪个平面内就相对于哪个平面的坐标轴\n        this._orbitControl.minPolarAngle = Math.PI * orbitControlOptions.minPolarAngle / 180;\n        this._orbitControl.maxPolarAngle = Math.PI * orbitControlOptions.maxPolarAngle / 180; \n        // 最小、最大旋转角度\n        this._orbitControl.minAzimuthAngle = Math.PI * orbitControlOptions.minAzimuthAngle / 180;\n        this._orbitControl.maxAzimuthAngle = Math.PI * orbitControlOptions.maxAzimuthAngle / 180; \n        // OrbitControls加入后，托管了相机，所以必须通过它来改变相机参数\n        // camera.lookAt()失效问题https://stackoverflow.com/questions/10325095/threejs-camera-lookat-has-no-effect-is-there-something-im-doing-wrong\n        // this._orbitControl.object.position.set(0, 0, 100)\n        // this._orbitControl.target = new THREE.Vector3(12245143.987260092, 0, -3482189.0854086173)\n        this._orbitControl.saveState();\n        this._orbitControl.update();\n\n        // 灯光\n        const lightOptions = this.options.light;\n        const directionalLight = new THREE.DirectionalLight(lightOptions.main.color, lightOptions.main.intensity);\n        directionalLight.position.set(-1, 1, 1);\n        const ambientLight = new THREE.AmbientLight(lightOptions.ambient.color, lightOptions.ambient.intensity);\n        this._scene.add(directionalLight);\n        this._scene.add(ambientLight);\n        this._mainLight = directionalLight;\n        this._ambientLight = ambientLight;\n\n        // animate\n        this._animate();\n    }\n    _initGlobal() {\n        if (THREE == undefined) throw new Error('需先引入 threejs 库！');\n        if (THREE.OrbitControls == undefined) throw new Error('需先引入 OrbitControls 组件！');\n\n        const size = this.getContainerSize();\n        const dpr = Util.getDpr();\n\n        // 初始化画布\n        this._renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            preserveDrawingBuffer: true\n        });\n        this._renderer.setPixelRatio(dpr);\n        this._renderer.setClearColor(0x000000, 0); // 背景透明 \n        this._renderer.setSize(size.width, size.height, true);\n        this._renderer.domElement.className = 'chart-canvas';\n        this._el.appendChild(this._renderer.domElement);\n\n        // 设置场景\n        this._scene = new THREE.Scene();\n\n        // 相机\n        const cameraOptions = this.options.camera;\n        this._camera = new THREE.PerspectiveCamera(cameraOptions.fov, size.width / size.height, cameraOptions.near, cameraOptions.far);\n\n        // 控件\n        const orbitControlOptions = this.options.orbitControlOptions;\n        this._orbitControl = new THREE.OrbitControls(this._camera, this._renderer.domElement);\n        // 距离相机的最小、最大距离，仅用于透视相机\n        let d = this.getDistance(this.options.global.R*2);\n        this._orbitControl.minDistance = d; \n        this._orbitControl.maxDistance = d*2; \n        // 最小、最大翻转角度 在哪个平面内就相对于哪个平面的坐标轴\n        // this._orbitControl.minPolarAngle = Math.PI * orbitControlOptions.minPolarAngle / 180;\n        // this._orbitControl.maxPolarAngle = Math.PI * orbitControlOptions.maxPolarAngle / 180; \n        // 最小、最大旋转角度\n        // this._orbitControl.minAzimuthAngle = Math.PI * orbitControlOptions.minAzimuthAngle / 180;\n        // this._orbitControl.maxAzimuthAngle = Math.PI * orbitControlOptions.maxAzimuthAngle / 180; \n     \n        this._orbitControl.saveState();\n        this._orbitControl.update();\n\n        // 灯光\n        const lightOptions = this.options.global.light;\n        const hemisphereLight = new THREE.HemisphereLight(lightOptions.skyColor, lightOptions.groundColor, lightOptions.intensity);\n        hemisphereLight.position.x = 0;\n        hemisphereLight.position.y = 0;\n        hemisphereLight.position.z = -this.options.global.R;\n        this._scene.add(hemisphereLight);\n        \n        // 球面\n        const globeTextureLoader = new THREE.TextureLoader();\n        globeTextureLoader.load(this.options.global.earthImgSrc, texture => {\n            const globeGgeometry = new THREE.SphereGeometry(this.options.global.R, 100, 100);\n            const globeMaterial = new THREE.MeshStandardMaterial({map: texture});\n            const globeMesh = new THREE.Mesh(globeGgeometry, globeMaterial);\n            this._scene.add(globeMesh);\n            this._scene.rotation.x = THREE.Math.degToRad(this.options.global.center[1]);\n            this._scene.rotation.y = THREE.Math.degToRad(this.options.global.center[0]);\n        });\n\n        // animate\n        this._animate();\n    }\n    _initEvents() {\n        this._onContainerResize = this._onContainerResize.bind(this);\n        this._mousemoveEvtHandler = this._mousemoveEvtHandler.bind(this);\n        window.addEventListener('resize', this._onContainerResize, false);\n        this._renderer.domElement.addEventListener('mousemove', this._mousemoveEvtHandler, false);\n    }\n    _animate() {\n        this._animateId = requestAnimationFrame(this._animate.bind(this));\n        this._orbitControl.update();\n        this._renderer.render(this._scene, this._camera);\n    }\n    _onContainerResize() {\n        const size = this.getContainerSize();\n\n        // 设置透视摄像机的长宽比\n        this._camera.aspect = size.width / size.height;\n        // 摄像机的 position 和 target 是自动更新的，而 fov、aspect、near、far 的修改则需要重新计算投影矩阵（projection matrix）\n        this._camera.updateProjectionMatrix();\n        // 设置渲染器输出的 canvas 的大小\n        this._renderer.setSize(size.width, size.height, true);\n    }\n    _mousemoveEvtHandler(e) {\n        this.emit('mousemove', e);\n    }\n    destroy() {\n        this.clearLayers();\n        window.removeEventListener('resize', this._onContainerResize, false);\n        this._renderer.domElement.removeEventListener('mousemove', this._mousemoveEvtHandler, false);\n        window.cancelAnimationFrame(this._animateId);\n        if (Util.isInPage(this._container) && Util.isInPage(this._el)) {\n            this._container.removeChild(this._el);\n            this._el = null;\n        }\n    }\n}","export function hasClass(el, className) {\n    return el.classList ? el.classList.contains(className) : new RegExp('(^|\\\\s)' + className + '(\\\\s|$)').test(el.className);\n}\n\nexport function addClass(el, className) {\n    if (el.classList !== undefined) {\n        var list = className.split(' ');\n        for (var i = 0, len = list.length; i < len; i++) {\n            el.classList.add(list[i]);\n        }\n    } else if (!hasClass(el, className)) {\n        el.className = (el.className ? el.className + ' ' : '') + className;\n    }\n}\n\nexport function removeClass(el, className) {\n    if (el.classList !== undefined) {\n        el.classList.remove(className);\n    } else {\n        el.className = ' ' + el.className + ' ';\n        el.className = el.className.replace(' ' + className + ' ', ' ');\n    }\n}\n\nexport function getCmpStyle(el) {\n    // FIXEME 兼容性写法\n    return getComputedStyle(el);\n}\n\nexport function isInPage(node) {\n    return (node === document.body) ? false : document.body.contains(node);\n}\n\nexport function getDpr() {\n    return window.devicePixelRatio || 1;\n}\n\nexport function isFunction( obj ) {\n\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n    // We don't want to classify *any* DOM node as a function.\n    return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n}\n\nexport function isPlainObject( obj ) {\n    var proto, Ctor;\n\n    // Detect obvious negatives\n    // Use toString instead of jQuery.type to catch host objects\n    if ( !obj || Object.prototype.toString.call( obj ) !== \"[object Object]\" ) {\n        return false;\n    }\n\n    proto = Object.getPrototypeOf( obj );\n\n    // Objects with no prototype (e.g., `Object.create( null )`) are plain\n    if ( !proto ) {\n        return true;\n    }\n\n    // Objects with prototype are plain iff they were constructed by a global Object function\n    Ctor = Object.prototype.hasOwnProperty.call( proto, \"constructor\" ) && proto.constructor;\n    return typeof Ctor === \"function\" && Object.prototype.hasOwnProperty.toString.call( Ctor ) === Object.prototype.hasOwnProperty.toString.call( Object );\n}\n\nexport function isEmptyObject( obj ) {\n    var name;\n\n    for ( name in obj ) {\n        return false;\n    }\n    return true;\n}\n\n// 浅拷贝\n// export function extend(srcObj) {\n//     var i, j, len, src;\n//     for (j = 1, len = arguments.length; j < len; j++) {\n//         src = arguments[j];\n//         for (var i in src) {\n//             srcObj[i] = src[i];\n//         }\n//     }\n//     return srcObj;\n// }\n\n// 深浅拷贝， 参考jquery\nexport function extend() {\n    var options, name, src, copy, copyIsArray, clone,\n    target = arguments[ 0 ] || {},\n    i = 1,\n    length = arguments.length,\n    deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && !isFunction( target ) ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                src = target[ name ];\n                copy = options[ name ];\n\n                // Prevent never-ending loop\n                if ( target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( isPlainObject( copy ) || ( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n                    if ( copyIsArray ) {\n                        copyIsArray = false;\n                        clone = src && Array.isArray( src ) ? src : [];\n\n                    } else {\n                        clone = src && isPlainObject( src ) ? src : {};\n                    }\n\n                    // Never move original objects, clone them\n                    target[ name ] = extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n    // Return the modified object\n    return target;\n}\n\nvar lastId;\nexport function stamp(obj) {\n    if (lastId == null) lastId = 0;\n    obj.__objstampid__ = obj.__objstampid__ || ++lastId;\n    return obj.__objstampid__;\n}\n\nexport function inherit (parentClass, childClass) {\n    var tempClass = function () {};\n    tempClass.prototype = parentClass.prototype;\n    childClass.prototype = new tempClass();\n    childClass.prototype.constructor = childClass;\n}\n\nexport function isNullOrUdf(val) {\n    return val == null;\n}\n\nexport function getRandomColor () {\n    return '#' + (function getColor(color) {\n        return (color += '0123456789abcdef' [Math.floor(Math.random() * 16)]) &&\n            (color.length == 6) ? color : getColor(color);\n    })('');\n}\n\nexport function isWebGLAvailable () {\n    try {\n        var canvas = document.createElement('canvas');\n        return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * 获取归一化的值，归一到区间[ymin, ymax]\n * xmax, xmin 目前数据的最大、最小值\n * ymax, ymin 目标区间的最大、最小值\n */\nexport function normalizeValue(value, xmin, xmax, ymin, ymax) {\n    if (xmax === 0 && xmin === 0) {\n        return ymin;\n    }\n    if (xmin === xmax) {\n        return (ymax + ymin) / 2;\n    }\n    return ymin + (ymax - ymin) * (value - xmin) / (xmax - xmin);\n}\n\n// 获取渐变色\nvar imgData;\nexport function getInterPolateColor(num, g) {\n    g = g || [\n        { value: 1, color: '#EF6064'},\n        { value: 0, color: '#FFA9A9'}\n    ]\n    if (imgData == null) {\n        const canvas = document.createElement('canvas');\n        canvas.height = 1;\n        canvas.width = 256;\n        const ctx = canvas.getContext('2d');\n        const grandient = ctx.createLinearGradient(0, 0, 256, 0);\n        g.forEach(item => {\n            grandient.addColorStop(item.value, item.color);\n        })\n        ctx.fillStyle = grandient;\n        ctx.fillRect(0, 0, 256, 1);\n        imgData = ctx.getImageData(0, 0, 256, 1).data;\n    }\n    return `rgba(${imgData[4 * (num-1)]},${imgData[4 * (num-1)+1]},${imgData[4 * (num-1)+2]},${imgData[4 * (num-1)+3]})`\n}\n\n// 获取一个颜色的高亮或更暗色 https://css-tricks.com/snippets/javascript/lighten-darken-color/\nexport function lightenDarkenColor(col, amt) {\n\n    var usePound = false;\n\n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n\n    var num = parseInt(col, 16);\n\n    var r = (num >> 16) + amt;\n\n    if (r > 255) r = 255;\n    else if (r < 0) r = 0;\n\n    var b = ((num >> 8) & 0x00FF) + amt;\n\n    if (b > 255) b = 255;\n    else if (b < 0) b = 0;\n\n    var g = (num & 0x0000FF) + amt;\n\n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n\n    return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}"],"sourceRoot":""}