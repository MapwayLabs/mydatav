{"version":3,"sources":["webpack://TMap/webpack/universalModuleDefinition","webpack://TMap/webpack/bootstrap","webpack://TMap/./js/bounds.js","webpack://TMap/./js/eventemiter.js","webpack://TMap/./js/index.js","webpack://TMap/./js/layers/flylinelayer.js","webpack://TMap/./js/layers/geojsonlayer.js","webpack://TMap/./js/layers/layer.js","webpack://TMap/./js/layers/shader/line.js","webpack://TMap/./js/maphelper.js","webpack://TMap/./js/threemap.js","webpack://TMap/./js/util.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AChCA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;;AAEe;;AAEA;;AAErB;AACvB;;AAEa;;;;;;;;;;;;;ACT/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACc;AACH;AAC5B,2BAA2B,8CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;AACA,wBAAwB,4BAA4B;AACpD,mBAAmB,SAAS;AAC5B,oBAAoB,SAAS;AAC7B,qBAAqB,YAAY;AACjC,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8CAAG;AAC7C;AACA,oBAAoB,oDAAS;AAC7B,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,4BAA4B;AAC5B,0BAA0B;AAC1B,yBAAyB;AACzB,2BAA2B;AAC3B,0BAA0B;;AAE1B;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,uDAAU;AACpC,4BAA4B,uDAAU;AACtC;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACc;AAC/B,2BAA2B,8CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;AAClC;AACA;AACA,QAAQ,8CAAK,iC;AACb;AACA;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,qCAAqC,oCAAoC;AACzE;AACA;AACA,SAAS;AACT,kCAAkC,mCAAmC;AACrE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4BAA4B;AAC3D;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iDAAiD,8CAA8C;AAC/F;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4CAA4C;AAC3E;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,oDAAS;AACxC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAS;AAClC,aAAa;AACb,yBAAyB,oDAAS;AAClC,aAAa;AACb,yBAAyB,oDAAS;AAClC;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,8CAAG;AACtC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA,aAAa;;AAEb,aAAa;;AAEb,aAAa;;AAEb,aAAa;AACb,yCAAyC,2CAA2C;AACpF;AACA;AACA,kDAAkD,8CAAG;AACrD;AACA;AACA;AACA;;AAEA,aAAa;AACb,yCAAyC,2CAA2C;AACpF,6CAA6C,wDAAwD;AACrG;AACA;AACA,sDAAsD,8CAAG;AACzD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACzQA;AAAA;AAAA;AAAA;AAAgC;AACS;AAC1B,oBAAoB,oDAAW;AAC9C;AACA;AACA;AACA,uBAAuB,4CAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACpBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,C;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAA8B;;AAE9B,kBAAkB;AAClB;AACA,kBAAkB,+CAAM;;AAEjB;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,iCAAiC;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wEAAwE,SAAS;AACjF;AACA;AACA;AACA,aAAa;AACb,kDAAkD,SAAS;AAC3D;AACA,+BAA+B,gBAAgB;AAC/C;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA,C;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACT;AACc;;AAE7B,uBAAuB,oDAAW;AACjD;AACA;AACA;AACA,iBAAiB,8CAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAW;;AAElC;AACA;AACA,kCAAkC,oDAAS;AAC3C,aAAa;AACb,kCAAkC,oDAAS;AAC3C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAU;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,2CAAU;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B,2CAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAgB;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,8CAAa;;AAErB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACjNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO;AACP;AACA;;AAEO;AACP;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACO;;AAEP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,C","file":"threejsmap.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TMap\"] = factory();\n\telse\n\t\troot[\"TMap\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/index.js\");\n","export default class Bounds {\n    constructor (xmin, ymin, xmax, ymax) {\n        if (Array.isArray(xmin)) {\n            this.xmin = xmin[0];\n            this.xmax = ymin[0];\n            this.ymin = xmin[1];\n            this.ymax = ymin[1];\n        } else {\n            this.xmin = xmin;\n            this.xmax = xmax;\n            this.ymin = ymin;\n            this.ymax = ymax;\n        }\n    }\n    getWidth() {\n        return Math.abs(this.xmax - this.xmin);\n    }\n    getHeight() {\n        return Math.abs(this.ymax - this.ymin);\n    }\n    getCenter() {\n        let tx = (this.xmax - this.xmin) / 2;\n        let ty = (this.ymax - this.ymin) / 2;\n        return [tx + this.xmin, ty + this.ymin];\n    }\n    scale(m) {\n        this.xmin *= m;\n        this.ymin *= m;\n        this.xmax *= m;\n        this.ymax *= m;\n        return this;\n    }\n}","export default class EventEmiter {\n    constructor() {\n        this._events = {};\n    }\n\n    on(event, cb, context) {\n        context = context || this;\n        cb.$context = context;\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.on(event[i], cb, context);\n            }\n        } else {\n            (this._events[event] || (this._events[event] = [])).push(cb);\n        }\n        return this;\n    }\n\n    once(event, cb, context) {\n        context = context || this;\n        var self = this;\n\n        function on() {\n            self.off(event, cb, context);\n            cb.apply(context, arguments);\n        }\n        on.fn = cb;\n        this.on(event, on, context);\n        return this;\n    }\n\n    off(event, cb, context) {\n        context = context || this;\n        if (!arguments.length) {\n            this._events = Object.create(null);\n            return this;\n        }\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.off(event[i], cb, context);\n            }\n            return this;\n        }\n        if (!cb) {\n            this._events[event] = null;\n            return this;\n        }\n        if (cb) {\n            let cbs = this._events[event];\n            let i = cbs.length;\n            while (i--) {\n                if (cb === cbs[i] || cb === cbs[i].fn) {\n                    cbs.splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        }\n    }\n\n    emit(event) {\n        let cbs = this._events[event];\n        let args = Array.prototype.slice.call(arguments, 1);\n        if (cbs) {\n            for (let i = 0, l = cbs.length; i < l; i++) {\n                cbs[i].apply(cbs[i].$context || this, args);\n            }\n        }\n    }\n}","export {default as ThreeMap} from './threemap';\n\nexport {default as GeoJSONLayer} from './layers/geojsonlayer';\n\nexport {default as FlyLineLayer} from './layers/flylinelayer';\n\nimport * as mapHelper from './maphelper';\nexport {mapHelper}\n\nimport * as Util from './util';\nexport {Util};","import Layer from './layer';\nimport * as Util from '../util';\nimport { mapHelper, CRS } from '../maphelper';\nimport { lineShader } from './shader/line';\nexport default class FlyLineLayer extends Layer {\n    constructor(data, options) {\n        super(data, options);\n        const defaultOptions = {\n            geojsonLayer: null,\n            lineColor: 0x0000ff,\n            lineOpacity: 1.0,\n            // lineStyle: { // 飞线样式\n            //     color: 0x00ff00,\n            //     lineWidth: 2\n            // }\n        };\n        this.options = Util.extend(defaultOptions, options);\n\n        this.uniforms = {\n            baseColor: {value: [1.0, 1.0, 1.0, 1.0]},\n            time: {value: 0},\n            speed: {value: 0},\n            period: {value: 1500},\n            trailLength: {value:1.0}\n        };\n        this.animate();\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._draw();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n        if (this._animateId) {\n            window.cancelAnimationFrame(this._animateId);\n        }\n    }\n    animate(time) {\n        this._animateId = requestAnimationFrame(this.animate.bind(this));\n        this.uniforms.time.value  = time;\n    }\n    _draw() {\n        this._data.forEach(item => {\n            let f = item.from.split(',').map(p => Number(p));\n            let t = item.to.split(',').map(p => Number(p));\n            let h = 42;\n            if (this._map.options.crs === CRS.epsg3857) {\n                let scale = this._map.options.SCALE_RATIO;\n                f = mapHelper.wgs84ToMecator(f);\n                t = mapHelper.wgs84ToMecator(t);\n                f = f.map(point => point / scale);\n                t = t.map(point => point / scale);\n                // h = h / scale;\n            }\n            this._drawFlyLine(f, t, h);\n        });\n    }\n    _drawFlyLine(startPoint, endPoint, heightLimit) {\n        let geojsonLayer = this.options.geojsonLayer;\n        let depth = 0;\n        if (geojsonLayer && geojsonLayer.options.isExtrude) {\n            depth = geojsonLayer.options.depth\n        }\n        let middleX = ( startPoint[0] + endPoint[0] ) / 2;\n        let middleY = ( startPoint[1] + endPoint[1] ) / 2;\n        let middleZ = 0 + depth + heightLimit;\n        let startVector = new THREE.Vector3(startPoint[0], startPoint[1], 0 + depth);\n        let middleVector = new THREE.Vector3(middleX, middleY, middleZ);\n        let endVector = new THREE.Vector3(endPoint[0], endPoint[1], 0 + depth);\n\n        let curve = new THREE.CatmullRomCurve3([startVector, middleVector, endVector]);\n\n        const points = curve.getPoints(50);\n\n        let verticeArr = []; // 顶点数组\n        let colorArr = []; // 颜色数组\n        let distArr = []; // 距离原点距离数组\n        let disAllArr = []; // 总距离数组\n        let startArr = []; // 起始位置数组\n        \n        let dist = 0;\n        for (let i = 0, len = points.length; i < len; i++) {\n            verticeArr.push(points[i].x, points[i].y, points[i].z);\n            let lineColor = new THREE.Color(this.options.lineColor);\n            colorArr.push(lineColor.r, lineColor.g, lineColor.b, this.options.lineOpacity);\n            if (i > 0) {\n                dist += points[i].distanceTo(points[i-1]);\n            }\n            distArr.push(dist);\n        }\n        let randomStart = Math.random() * this.uniforms.period.value;\n        for (let i = 0, len = points.length; i < len; i++) {\n            disAllArr.push(dist);\n            startArr.push(randomStart);\n        }\n        \n        let geometry = new THREE.BufferGeometry();\n        geometry.addAttribute('position', new THREE.BufferAttribute( new Float32Array(verticeArr), 3 ));\n        geometry.addAttribute('colors', new THREE.BufferAttribute( new Float32Array(colorArr), 4 ));\n        geometry.addAttribute('dist', new THREE.BufferAttribute( new Float32Array(distArr), 1 ));\n        geometry.addAttribute('distAll', new THREE.BufferAttribute( new Float32Array(disAllArr), 1 ));\n        geometry.addAttribute('start', new THREE.BufferAttribute( new Float32Array(startArr), 1 ));\n\n        let shaderMaterial = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: lineShader.vertexShader,\n            fragmentShader: lineShader.fragmentShader,\n            transparent: true,\n            alphaTest: 0.8\n        });\n        \n        let line = new THREE.Line(geometry, shaderMaterial);\n        line.rotateX(-Math.PI/2);\n\n        this._container.add(line);\n    }\n}","import Layer from './layer';\nimport * as Util from '../util';\nimport { mapHelper, CRS } from '../maphelper';\nexport default class GeoJSONLayer extends Layer {\n    constructor(data, options) {\n        super(data, options);\n        const defaultOptions = {\n            isExtrude: true, // 是否拉伸面\n            depth: 16, // 拉伸厚度\n            isAreaText: true, // 是否显示地区名称\n            fillColor: '#ddd', // 地区面块的填充色\n            // strokeColor: '#000', // 地区边缘线的颜色\n            // strokeOpacity: 0.5, // 地区边缘线的透明度\n            textColor: 'rgba(0, 0, 0, 0.8)', // 文字颜色\n            lineMaterial: {\n                color: 0x999999,\n                linewidth: 1.5\n            },\n            areaMaterial: { // 面材质配置\n                color: 0x00ff00,\n                // opacity: 0.5,\n                side: THREE.DoubleSide\n            }\n        };\n        this.options = Util.extend(defaultOptions, options);\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map); \n        this._initBoundsAndCenter();\n        this._draw();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n    }\n    getBounds() {\n        return this._bounds;\n    }\n    getCenter() {\n        return this._center;\n    }\n    createFeatureArray(json) {\n        var feature_array = [];\n        var temp_feature;\n\n        if (json.type == 'Feature') {\n            feature_array.push(json);\n        } else if (json.type == 'FeatureCollection') {\n            for (var feature_num = 0; feature_num < json.features.length; feature_num++) {\n                feature_array.push(json.features[feature_num]);\n            }\n        } else if (json.type == 'GeometryCollection') {\n            for (var geom_num = 0; geom_num < json.geometries.length; geom_num++) {\n                temp_feature = {\n                    geometry: json.geometries[geom_num]\n                }\n                feature_array.push(temp_feature);\n            }\n        } else {\n            throw new Error('The geoJSON is not valid.');\n        }\n        return feature_array;\n    }\n    createCoordinateArray(feature) {\n        //Loop through the coordinates and figure out if the points need interpolation.\n        var temp_array = [];\n        var interpolation_array = [];\n\n        for (var point_num = 0; point_num < feature.length; point_num++) {\n            var point1 = feature[point_num];\n            var point2 = feature[point_num - 1];\n\n            if (point_num > 0) {\n                if (this.needsInterpolation(point2, point1)) {\n                    interpolation_array = [point2, point1];\n                    interpolation_array = this.interpolatePoints(interpolation_array);\n\n                    for (var inter_point_num = 0; inter_point_num < interpolation_array.length; inter_point_num++) {\n                        temp_array.push(interpolation_array[inter_point_num]);\n                    }\n                } else {\n                    temp_array.push(point1);\n                }\n            } else {\n                temp_array.push(point1);\n            }\n        }\n        return temp_array;\n    }\n    needsInterpolation(point2, point1) {\n        //If the distance between two latitude and longitude values is\n        //greater than five degrees, return true.\n        var lon1 = point1[0];\n        var lat1 = point1[1];\n        var lon2 = point2[0];\n        var lat2 = point2[1];\n        var lon_distance = Math.abs(lon1 - lon2);\n        var lat_distance = Math.abs(lat1 - lat2);\n\n        if (lon_distance > 5 || lat_distance > 5) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    interpolatePoints(interpolation_array) {\n        //This function is recursive. It will continue to add midpoints to the\n        //interpolation array until needsInterpolation() returns false.\n        var temp_array = [];\n        var point1, point2;\n\n        for (var point_num = 0; point_num < interpolation_array.length - 1; point_num++) {\n            point1 = interpolation_array[point_num];\n            point2 = interpolation_array[point_num + 1];\n\n            if (this.needsInterpolation(point2, point1)) {\n                temp_array.push(point1);\n                temp_array.push(this.getMidpoint(point1, point2));\n            } else {\n                temp_array.push(point1);\n            }\n        }\n\n        temp_array.push(interpolation_array[interpolation_array.length - 1]);\n\n        if (temp_array.length > interpolation_array.length) {\n            temp_array = this.interpolatePoints(temp_array);\n        } else {\n            return temp_array;\n        }\n        return temp_array;\n    }\n    getMidpoint(point1, point2) {\n        var midpoint_lon = (point1[0] + point2[0]) / 2;\n        var midpoint_lat = (point1[1] + point2[1]) / 2;\n        var midpoint = [midpoint_lon, midpoint_lat];\n\n        return midpoint;\n    }\n    convertCoordinates(coordinateArray) {\n        return coordinateArray.map(lnglat => {\n            let mecatorPoint = mapHelper.wgs84ToMecator(lnglat);\n            return mecatorPoint.map(p => p / this._map.options.SCALE_RATIO);\n        });\n    }\n    _initBoundsAndCenter() {\n        let bounds;\n        let mapOptions = this._map.options;\n        if (mapOptions.type === 'plane') {\n            if (mapOptions.region === 'world') {\n                bounds = mapHelper.getBounds('world', mapOptions.crs);\n            } else if (mapOptions.region === 'china') {\n                bounds = mapHelper.getBounds('china', mapOptions.crs);\n            } else {\n                bounds = mapHelper.getBounds(this._data, mapOptions.crs);\n            }\n        } else {\n            // sphere\n        }\n        if (bounds) {\n            if (mapOptions.crs === CRS.epsg4326) {\n                this._bounds = bounds;\n                this._center = bounds.getCenter();\n            } else {\n                let scale = mapOptions.SCALE_RATIO;\n                this._bounds = bounds.scale(1/scale);\n                this._center = this._bounds.getCenter();\n            }\n        }\n    }\n    _draw() {\n        var geojson = this._data;\n\n        var features = this.createFeatureArray(geojson);\n\n        for (let i = 0, len = features.length; i < len; i++) {\n            let feature = features[i];\n            let geometry = feature.geometry;\n            if (geometry == null) continue;\n            if (geometry.type == 'Point') {\n\n            } else if (geometry.type == 'MultiPoint') {\n\n            } else if (geometry.type == 'LineString') {\n\n            } else if (geometry.type == 'MultiLineString') {\n\n            } else if (geometry.type == 'Polygon') {\n                for (let segment_num = 0; segment_num < geometry.coordinates.length; segment_num++) {\n                    let coordinate_array = this.createCoordinateArray(geometry.coordinates[segment_num]);\n                    let convert_array = coordinate_array;\n                    if (this._map.options.crs === CRS.epsg3857) {\n                        convert_array = this.convertCoordinates(coordinate_array);\n                    }\n                    this.drawPolygon(convert_array);\n                }\n\n            } else if (geometry.type == 'MultiPolygon') {\n                for (let polygon_num = 0; polygon_num < geometry.coordinates.length; polygon_num++) {\n                    for (let segment_num = 0; segment_num < geometry.coordinates[polygon_num].length; segment_num++) {\n                        let coordinate_array = this.createCoordinateArray(geometry.coordinates[polygon_num][segment_num]);\n                        let convert_array = coordinate_array;\n                        if (this._map.options.crs === CRS.epsg3857) {\n                            convert_array = this.convertCoordinates(coordinate_array);\n                        }\n                        this.drawPolygon(convert_array);\n                    }\n                }\n            } else {\n                throw new Error('The geoJSON is not valid.');\n            }\n        }\n    }\n    drawOutLine(points, mesh) {\n        // 画轮廓线\n        // 因为面是画在xy平面的，然后通过旋转而来，为了保持一致，轮廓线也绘制在xy平面，这样变换就能与面同步\n        let line_geom = new THREE.Geometry();\n        for (let i = 0, len=points.length; i < len ; i++) {\n            line_geom.vertices.push(new THREE.Vector3(points[i][0], points[i][1], 0));\n        }\n        let line_material = new THREE.LineBasicMaterial(this.options.lineMaterial);\n        // line_material.transparent = false;\n        // line_material.opacity = this.options.strokeOpacity;\n        let line = new THREE.Line(line_geom, line_material);\n        if (this.options.isExtrude) {\n            line.translateZ(this.options.depth);\n        }\n        line.renderOrder = 98;\n        mesh.add(line);\n    }\n    drawPolygon(points) {\n        let shape = new THREE.Shape();\n        for (let i = 0; i < points.length; i++) {\n            let point = points[i];\n            if (i === 0) {\n                shape.moveTo(point[0], point[1]);\n            } else {\n                shape.lineTo(point[0], point[1]);\n            }\n        }\n        shape.closePath();\n\n        let geometry, material;\n\n        if (this.options.isExtrude) {\n            // 拉伸\n            let extrudeSettings = {\n                depth: this.options.depth, \n                bevelEnabled: false   // 是否用斜角\n            };\n            geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);\n            material = new THREE.MeshPhongMaterial(this.options.areaMaterial);\n        } else {\n            // 不拉伸\n            geometry = new THREE.ShapeBufferGeometry(shape);\n            material = new THREE.MeshBasicMaterial(this.options.areaMaterial);\n        }\n        \n        let mesh = new THREE.Mesh(geometry, material);\n        this.drawOutLine(points, mesh);\n        mesh.rotateX(-Math.PI/2);\n        mesh.userData = {\n            type: 'area'\n        };\n        this._container.add(mesh);\n    }\n}","import * as Util from '../util';\nimport EventEmiter from '../eventemiter';\nexport default class Layer extends EventEmiter {\n    constructor(data, options) {\n        super();\n        var defaultOptions = {};\n        this.options = Util.extend(defaultOptions, options);\n        this._data = data;\n        this._container = new THREE.Group();\n    }\n    getContainer() {\n        return this._container;\n    }\n    getData() {\n        return this._data;\n    }\n    onAdd(map) {\n        this._map = map;\n    }\n    onRemove(map) {}\n}","export const lineShader = {\n   vertexShader: `\n      attribute float dist;\n      attribute float distAll;\n      attribute float start;\n      attribute vec4 colors;\n\n      uniform float speed;\n      uniform float trailLength;\n      uniform float time;\n      uniform float period;\n\n      varying vec4 v_Color;\n      varying float v_Percent;\n\n      void main()\t{\n         vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n         gl_Position = projectionMatrix * mvPosition;\n            \n         float t = mod((time + start) / period, 1. + trailLength) - trailLength;\n         float trailLen = distAll * trailLength;\n         v_Percent = (dist - t * distAll) / trailLen;\n         v_Color = colors;\n      }`,\n   fragmentShader: `            \n      uniform vec4 baseColor;\n      varying vec4 v_Color;\n      varying float v_Percent;\n\n      void main( void ) {\n        if (v_Percent > 1.0 || v_Percent < 0.0) {\n            discard;\n        }\n        gl_FragColor = baseColor * v_Color;\n        gl_FragColor.a *= v_Percent;\n      }`\n}","import Bounds from './bounds';\n\nconst R = 6378137; // 地球半径（米）\nconst R_MINOR = 6356752.314245179;\nconst BOUND = new Bounds(-20037508.34279, -15496570.73972, 20037508.34279, 18764656.23138);\n\nexport const CRS = {\n    epsg4326: 'EPSG:4326',\n    epsg3857: 'EPSG:3857'\n}\nexport const mapHelper = {\n    // 经纬度转墨卡托\n    wgs84ToMecator(lnglat) {\n\t\tvar d = Math.PI / 180,\n\t\t    r = R,\n\t\t    y = lnglat[1] * d,\n\t\t    tmp = R_MINOR / r,\n\t\t    e = Math.sqrt(1 - tmp * tmp),\n\t\t    con = e * Math.sin(y);\n\n\t\tvar ts = Math.tan(Math.PI / 4 - y / 2) / Math.pow((1 - con) / (1 + con), e / 2);\n\t\ty = -r * Math.log(Math.max(ts, 1E-10));\n\n\t\treturn [ lnglat[0] * d * r, y ];\n    },\n    // 墨卡托转经纬度\n    mecatorToWgs84(point) {\n\t\tvar d = 180 / Math.PI,\n\t\t    r = R,\n\t\t    tmp = R_MINOR / r,\n\t\t    e = Math.sqrt(1 - tmp * tmp),\n\t\t    ts = Math.exp(-point[1] / r),\n\t\t    phi = Math.PI / 2 - 2 * Math.atan(ts);\n\n\t\tfor (var i = 0, dphi = 0.1, con; i < 15 && Math.abs(dphi) > 1e-7; i++) {\n\t\t\tcon = e * Math.sin(phi);\n\t\t\tcon = Math.pow((1 - con) / (1 + con), e / 2);\n\t\t\tdphi = Math.PI / 2 - 2 * Math.atan(ts * con) - phi;\n\t\t\tphi += dphi;\n\t\t}\n\n\t\treturn [ point[0] * d / r, phi * d ];\n    },\n    // 根据geojson数据获取geo对象在墨卡托投影平面的范围\n    getBounds(geojson, crs) {\n        crs = crs || CRS.epsg4326;\n        // 中国和世界范围写死，避免大量计算\n        if (geojson === 'world') {\n            let xmin = -180;\n            let ymin = -85;\n            let xmax = 180;\n            let ymax = 85;\n            let lb = [xmin, ymin];\n            let rt = [xmax, ymax];\n            if (crs === CRS.epsg3857) {\n                lb = this.wgs84ToMecator(lb);\n                rt = this.wgs84ToMecator(rt);\n            }\n            return new Bounds(lb, rt);\n        } else if (geojson === 'china') {\n            let xmin = 73.4766;\n            let xmax = 135.0879;\n            let ymin = 18.1055;\n            let ymax = 53.5693;\n            let lb = [xmin, ymin];\n            let rt = [xmax, ymax];\n            if (crs === CRS.epsg3857) {\n                lb = this.wgs84ToMecator(lb);\n                rt = this.wgs84ToMecator(rt);\n            }\n            return new Bounds(lb, rt);\n        } else {\n            let bound = {\n                xmin: 180,\n                xmax: -180,\n                ymin: 90,\n                ymax: -90\n            };\n            let features = [];\n            let polygons = [];\n            if (geojson.type === \"FeatureCollection\") {\n                features = geojson.features;\n            } else if (geojson.type === \"Feature\") {\n                features.push(geojson);\n            }\n            features.forEach(f => {\n                if (f.geometry && f.geometry.type === \"Polygon\") {\n                    polygons.push(f.geometry.coordinates);\n                } else if (f.geometry && f.geometry.type === \"MultiPolygon\") {\n                    for (let i = 0, len = f.geometry.coordinates.length; i < len; i++) {\n                        polygons.push(f.geometry.coordinates[i]);\n                    }\n                }\n            });\n            for (let i = 0, len = polygons.length; i < len; i++) {\n                let seg = polygons[i];\n                for (let j = 0; j < seg.length; j++) {\n                    let coords = seg[j];\n                    for (let k = 0; k < coords.length; k++) {\n                        let coord = coords[k];\n                        if (coord[0] < bound.xmin) {\n                            bound.xmin = coord[0];\n                        }\n                        if (coord[0] > bound.xmax) {\n                            bound.xmax = coord[0];\n                        }\n                        if (coord[1] < bound.ymin) {\n                            bound.ymin = coord[1];\n                        }\n                        if (coord[1] > bound.ymax) {\n                            bound.ymax = coord[1];\n                        }\n                    }\n                }\n            }\n            let lb = [bound.xmin, bound.ymin];\n            let rt = [bound.xmax, bound.ymax];\n            if (crs === CRS.epsg3857) {\n                lb = this.wgs84ToMecator(lb);\n                rt = this.wgs84ToMecator(rt);\n            }\n            return new Bounds(lb, rt);\n        }\n    }\n}","import EventEmiter from './eventemiter'\nimport * as Util from './util'\nimport { mapHelper, CRS } from './maphelper'\n\nexport default class ThreeMap extends EventEmiter {\n    constructor(el, options) {\n        super();\n        var defaultOptions = {\n            crs: CRS.epsg3857, // 地图采用的地理坐标系 EPSG:4326: 经纬度，EPSG:3857: 墨卡托\n            SCALE_RATIO: 100000, // 地球墨卡托平面缩放比例\n            type: 'plane', // plane or sphere ,平面或球面\n            region: 'china', // china or world, 中国或世界地图\n            containerClassName: 'three-map-container', // 地图容器类名\n            lightColor: 0xffffff, // 灯光颜色\n            camera: {\n                fov: 45,\n                near: 0.1,\n                far: 2000\n            }\n        };\n        this.options = Util.extend(defaultOptions, options);\n    \n        if (this.options.type === 'plane') {\n            if (this.options.region === 'china') {\n                this._fullBound = mapHelper.getBounds('china', this.options.crs);\n            } else {\n                this._fullBound = mapHelper.getBounds('world', this.options.crs);\n            }\n        }\n\n        this._layers = {};\n        \n        this._initContainer(el);\n        this._init3D();\n        this._initEvents();\n    }\n    getBounds() {\n        return this._fullBound;\n    }\n    addLayer(layer) {\n        var id = Util.stamp(layer);\n        if (this._layers[id]) {\n            return this;\n        }\n\n        this._layers[id] = layer;\n        this._scene.add(layer.getContainer());\n\n        layer.onAdd(this);\n\n        return this;\n    }\n    removeLayer(layer) {\n        var id = Util.stamp(layer);\n        if (!this._layers[id]) {\n            return this;\n        }\n\n        delete this._layers[id];\n        this._scene.remove(layer.getContainer());\n\n        layer.onRemove(this);\n\n        return this;\n    }\n    hasLayer(layer) {\n        return !!layer && (Util.stamp(layer) in this._layers);\n    }\n    clearLayers() {\n        for (var id in this._layers) {\n            this.removeLayer(this._layers[id]);\n        }\n    }\n    updateSize() {\n        this._onContainerResize()\n    }\n    resetView() {\n        this._orbitControl.reset()\n    }\n    setView(bounds) {\n        if (this.options.type === 'plane') {\n            if (this.options.region === 'world') {\n                this._orbitControl.object.position.set(16.42515, 369.562538, 333.99466);\n                this._orbitControl.target = new THREE.Vector3(10.06448, 51.62625, 6.71498);\n            } else {\n                let cameraOptions = this.options.camera;\n                let a = (Math.PI / 180) * (cameraOptions.fov / 2);\n                // let b = Math.max(bounds.getWidth(), bounds.getHeight()) / 2;\n                let b = bounds.getHeight() / 2;\n                let distance = b / Math.tan(a);\n                let center = bounds.getCenter();\n                this._orbitControl.object.position.set(0, 0, distance);\n                this._orbitControl.object.translateX(center[0]);\n                this._orbitControl.object.translateY(center[1]);\n                this._orbitControl.target = new THREE.Vector3(center[0], center[1], 0);\n            }\n        } else {\n            // sphere\n        }\n        this._orbitControl.update();\n    }\n    getContainerElement() {\n        return this._el;\n    }\n    getContainerSize() {\n        const compStyle = Util.getCmpStyle(this._el);\n        let width = parseInt(compStyle.width);\n        let height = parseInt(compStyle.height);\n        return { width, height };\n    }\n    _initContainer(el) {\n        this._container = typeof el === 'string' ? document.getElementById(el) : el;\n        if (!this._container) {\n            throw new Error(\"未提供父容器,请为地图提供一个父容器！\");\n        }\n\n        this._el = document.createElement('div');\n        this._el.style.height = '100%';\n        this._el.style.margin = 0;\n        this._el.style.padding = 0;\n        Util.addClass(this._el, this.options.containerClassName);\n\n        this._container.appendChild(this._el);\n    }\n    _init3D() {\n        if (THREE === undefined) throw new Error('需先引入threejs库！');\n        if (THREE.OrbitControls === undefined) throw new Error('需先引入 THREE.OrbitControls 组件！');\n\n        let size = this.getContainerSize();\n\n        // 初始化画布\n        this._renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            preserveDrawingBuffer: true\n        });\n        this._renderer.setClearColor(0x000000, 0); // 背景透明 \n        this._renderer.setSize(size.width, size.height);\n        this._renderer.domElement.className = 'chart-canvas';\n        this._el.appendChild(this._renderer.domElement);\n\n        // 设置场景\n        this._scene = new THREE.Scene();\n\n        // 相机\n        let cameraOptions = this.options.camera;\n        this._camera = new THREE.PerspectiveCamera(cameraOptions.fov, size.width / size.height, cameraOptions.near, cameraOptions.far)\n\n        // 控件\n        this._orbitControl = new THREE.OrbitControls(this._camera, this._renderer.domElement)\n        // this._orbitControl.minDistance = 30 // 距离相机的最小距离，仅用于透视相机\n        // this._orbitControl.maxDistance = 200 // 距离相机的最大距离，仅用于透视相机\n        // 在哪个平面内就相对于哪个平面的坐标轴\n        this._orbitControl.maxPolarAngle = Math.PI / 2 // 最大翻转角度\n        this._orbitControl.maxAzimuthAngle = Math.PI / 2\n        this._orbitControl.minAzimuthAngle = -Math.PI / 2\n        // OrbitControls加入后，托管了相机，所以必须通过它来改变相机参数\n        // camera.lookAt()失效问题https://stackoverflow.com/questions/10325095/threejs-camera-lookat-has-no-effect-is-there-something-im-doing-wrong\n        // this._orbitControl.object.position.set(0, 0, 100)\n        // this._orbitControl.target = new THREE.Vector3(12245143.987260092, 0, -3482189.0854086173)\n        this._orbitControl.saveState()\n        this._orbitControl.update()\n\n        // 灯光\n        this._scene.add(new THREE.AmbientLight(this.options.lightColor, 0.6));\n        this._light = new THREE.DirectionalLight(this.options.lightColor, 0.8);\n        this._light2 = new THREE.DirectionalLight(this.options.lightColor, 0.1);\n        this._light.position.set(-1, 1, 1);\n        this._light2.position.set(1, 1, 1);\n        this._scene.add(this._light);\n        this._scene.add(this._light2);\n\n        // animate\n        this._animate();\n    }\n    _initEvents() {\n        this._onContainerResize = this._onContainerResize.bind(this);\n        this._mousemoveEvtHandler = this._mousemoveEvtHandler.bind(this);\n        window.addEventListener('resize', this._onContainerResize, false);\n        this._renderer.domElement.addEventListener('mousemove', this._mousemoveEvtHandler, false);\n    }\n    _animate() {\n        this._animateId = requestAnimationFrame(this._animate.bind(this))\n        this._orbitControl.update()\n        this._renderer.render(this._scene, this._camera)\n    }\n    _onContainerResize() {\n        let size = this.getContainerSize();\n\n        // 设置透视摄像机的长宽比\n        this._camera.aspect = size.width / size.height;\n        // 摄像机的 position 和 target 是自动更新的，而 fov、aspect、near、far 的修改则需要重新计算投影矩阵（projection matrix）\n        this._camera.updateProjectionMatrix();\n        // 设置渲染器输出的 canvas 的大小\n        this._renderer.setSize(size.width, size.height, true);\n    }\n    _mousemoveEvtHandler(e) {\n        this.emit('mousemove', e);\n    }\n    destroy() {\n        this.clearLayers()\n        window.removeEventListener('resize', this._onContainerResize, false)\n        this._renderer.domElement.removeEventListener('mousemove', this._mousemoveEvtHandler, false)\n        cancelAnimationFrame(this._animateId)\n        if (this._container && this._container.hasChildNodes(this._el)) {\n            this._container.removeChild(this._el)\n            this._el = null\n        }\n    }\n}","export function hasClass(el, className) {\n    return el.classList ? el.classList.contains(className) : new RegExp('(^|\\\\s)' + className + '(\\\\s|$)').test(el.className);\n}\n\nexport function addClass(el, className) {\n    if (el.classList !== undefined) {\n        var list = className.split(' ');\n        for (var i = 0, len = list.length; i < len; i++) {\n            el.classList.add(list[i]);\n        }\n    } else if (!hasClass(el, className)) {\n        el.className = (el.className ? el.className + ' ' : '') + className;\n    }\n}\n\nexport function removeClass(el, className) {\n    if (el.classList !== undefined) {\n        el.classList.remove(className);\n    } else {\n        el.className = ' ' + el.className + ' ';\n        el.className = el.className.replace(' ' + className + ' ', ' ');\n    }\n}\n\nexport function getCmpStyle(el) {\n    // FIXEME 兼容性写法\n    return getComputedStyle(el);\n}\n\nexport function extend(srcObj) {\n    var i, j, len, src;\n    for (j = 1, len = arguments.length; j < len; j++) {\n        src = arguments[j];\n        for (var i in src) {\n            srcObj[i] = src[i];\n        }\n    }\n    return srcObj;\n}\n\nvar lastId;\nexport function stamp(obj) {\n    if (lastId == null) lastId = 0;\n    obj.__objstampid__ = obj.__objstampid__ || ++lastId;\n    return obj.__objstampid__;\n}\n\nexport function inherit (parentClass, childClass) {\n    var tempClass = function () {};\n    tempClass.prototype = parentClass.prototype;\n    childClass.prototype = new tempClass();\n    childClass.prototype.constructor = childClass;\n}\n\nexport function isNullOrUdf(val) {\n    return val == null;\n}\n\nexport function getRandomColor () {\n    return '#' + (function getColor(color) {\n        return (color += '0123456789abcdef' [Math.floor(Math.random() * 16)]) &&\n            (color.length == 6) ? color : getColor(color);\n    })('');\n}\n\nexport function isWebGLAvailable () {\n    try {\n        var canvas = document.createElement('canvas');\n        return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n    } catch (e) {\n        return false;\n    }\n}\n\n// 获取一个颜色的高亮或更暗色 https://css-tricks.com/snippets/javascript/lighten-darken-color/\nexport function lightenDarkenColor(col, amt) {\n\n    var usePound = false;\n\n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n\n    var num = parseInt(col, 16);\n\n    var r = (num >> 16) + amt;\n\n    if (r > 255) r = 255;\n    else if (r < 0) r = 0;\n\n    var b = ((num >> 8) & 0x00FF) + amt;\n\n    if (b > 255) b = 255;\n    else if (b < 0) b = 0;\n\n    var g = (num & 0x0000FF) + amt;\n\n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n\n    return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}"],"sourceRoot":""}