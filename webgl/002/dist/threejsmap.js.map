{"version":3,"sources":["webpack://TMap/webpack/universalModuleDefinition","webpack://TMap/webpack/bootstrap","webpack://TMap/./js/util.js","webpack://TMap/./js/eventemiter.js","webpack://TMap/./js/bounds.js","webpack://TMap/./js/maphelper.js","webpack://TMap/./js/threemap.js","webpack://TMap/./js/layers/layer.js","webpack://TMap/./js/layers/geojsonlayer.js","webpack://TMap/./js/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Util","hasClass","el","className","classList","contains","RegExp","test","addClass","undefined","list","split","len","length","add","this","removeClass","remove","replace","getCmpStyle","getComputedStyle","extend","srcObj","j","src","arguments","stamp","obj","lastId","__objstampid__","inherit","parentClass","childClass","tempClass","constructor","isNullOrUdf","val","getRandomColor","getColor","color","Math","floor","random","isWebGLAvailable","canvas","document","createElement","WebGLRenderingContext","getContext","e","lightenDarkenColor","col","amt","usePound","slice","num","parseInt","b","g","toString","EventEmiter","[object Object]","_events","event","cb","context","$context","Array","isArray","on","push","self","off","apply","fn","cbs","splice","args","Bounds","xmin","ymin","xmax","ymax","tx","ty","R","BOUND","mapHelper","lnglat","PI","y","tmp","R_MINOR","sqrt","con","sin","ts","tan","pow","log","max","point","exp","phi","atan","dphi","abs","geojson","lb","wgs84ToMecator","rt","bound","features","polygons","type","forEach","f","geometry","coordinates","seg","coords","k","coord","threemap_ThreeMap","options","super","containerClassName","lightColor","region","_fullBound","getBounds","_layers","_initContainer","_init3D","_initEvents","layer","id","_scene","getContainer","onAdd","onRemove","removeLayer","_onContainerResize","_orbitControl","reset","bounds","minDistance","maxDistance","position","set","target","THREE","Vector3","center","getCenter","opt","getOptimalDistance","ratio","update","d1","getHeight","_el","compStyle","width","height","_container","getElementById","Error","style","margin","padding","appendChild","OrbitControls","size","getContainerSize","_renderer","WebGLRenderer","antialias","alpha","preserveDrawingBuffer","setClearColor","setSize","domElement","Scene","_camera","PerspectiveCamera","maxPolarAngle","maxAzimuthAngle","minAzimuthAngle","saveState","AmbientLight","_light","DirectionalLight","_light2","_animate","_mousemoveEvtHandler","addEventListener","_animateId","requestAnimationFrame","render","aspect","updateProjectionMatrix","emit","clearLayers","removeEventListener","cancelAnimationFrame","hasChildNodes","removeChild","layer_Layer","data","_data","Group","map","_map","geojsonlayer_GeoJSONLayer","defaultOptions","isExtrude","depth","isAreaText","fillColor","strokeColor","strokeOpacity","textColor","material","side","DoubleSide","draw","json","temp_feature","feature_array","feature_num","geom_num","geometries","feature","temp_array","interpolation_array","point_num","point1","point2","needsInterpolation","interpolatePoints","inter_point_num","lon1","lat1","lon2","lat2","lon_distance","lat_distance","getMidpoint","coordinateArray","createFeatureArray","segment_num","coordinate_array","createCoordinateArray","convert_array","convertCoordinates","drawPolygon","polygon_num","points","shape","Shape","moveTo","lineTo","closePath","ExtrudeBufferGeometry","bevelEnabled","MeshPhongMaterial","mesh","Mesh","__webpack_exports__"],"mappings":"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","file":"threejsmap.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TMap\"] = factory();\n\telse\n\t\troot[\"TMap\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const Util = {\n    hasClass: function (el, className) {\n        return el.classList ? el.classList.contains(className) : new RegExp('(^|\\\\s)' + className + '(\\\\s|$)').test(el.className)\n    },\n    addClass: function (el, className) {\n        if (el.classList !== undefined) {\n            var list = className.split(' ')\n            for (var i = 0, len = list.length; i < len; i++) {\n                el.classList.add(list[i])\n            }\n        } else if (!this.hasClass(el, className)) {\n            el.className = (el.className ? el.className + ' ' : '') + className\n        }\n    },\n    removeClass: function (el, className) {\n        if (el.classList !== undefined) {\n            el.classList.remove(className)\n        } else {\n            el.className = ' ' + el.className + ' '\n            el.className = el.className.replace(' ' + className + ' ', ' ')\n        }\n    },\n    getCmpStyle: function (el) {\n        // FIXEME 兼容性写法\n        return getComputedStyle(el) \n    },\n    extend: function (srcObj) {\n        var i, j, len, src\n        for (j = 1, len = arguments.length; j < len; j++) {\n            src = arguments[j]\n            for (var i in src) {\n                srcObj[i] = src[i]\n            }\n        }\n        return srcObj\n    },\n    stamp: function (obj) {\n        if (!this.lastId) this.lastId = 0\n        obj.__objstampid__ = obj.__objstampid__ || ++this.lastId\n        return obj.__objstampid__\n    },\n    inherit: function (parentClass, childClass) {\n        var tempClass = function () {}\n        tempClass.prototype = parentClass.prototype\n        childClass.prototype = new tempClass()\n        childClass.prototype.constructor = childClass\n    },\n    isNullOrUdf: function (val) {\n        return val === undefined || val === null\n    },\n    getRandomColor: function () {\n        return '#' + (function getColor(color) {\n            return (color += '0123456789abcdef' [Math.floor(Math.random() * 16)]) &&\n                (color.length == 6) ? color : getColor(color);\n        })('');\n    },\n    isWebGLAvailable: function () {\n        try {\n            var canvas = document.createElement('canvas');\n            return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n        } catch (e) {\n            return false;\n        }\n    },\n    // 获取一个颜色的高亮或更暗色 https://css-tricks.com/snippets/javascript/lighten-darken-color/\n    lightenDarkenColor: function (col, amt) {\n\n        var usePound = false;\n\n        if (col[0] == \"#\") {\n            col = col.slice(1);\n            usePound = true;\n        }\n\n        var num = parseInt(col, 16);\n\n        var r = (num >> 16) + amt;\n\n        if (r > 255) r = 255;\n        else if (r < 0) r = 0;\n\n        var b = ((num >> 8) & 0x00FF) + amt;\n\n        if (b > 255) b = 255;\n        else if (b < 0) b = 0;\n\n        var g = (num & 0x0000FF) + amt;\n\n        if (g > 255) g = 255;\n        else if (g < 0) g = 0;\n\n        return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n\n    }\n}","export class EventEmiter {\n    constructor() {\n        this._events = {};\n    }\n\n    on(event, cb, context) {\n        context = context || this;\n        cb.$context = context;\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.on(event[i], cb, context);\n            }\n        } else {\n            (this._events[event] || (this._events[event] = [])).push(cb);\n        }\n        return this;\n    }\n\n    once(event, cb, context) {\n        context = context || this;\n        var self = this;\n\n        function on() {\n            self.off(event, cb, context);\n            cb.apply(context, arguments);\n        }\n        on.fn = cb;\n        this.on(event, on, context);\n        return this;\n    }\n\n    off(event, cb, context) {\n        context = context || this;\n        if (!arguments.length) {\n            this._events = Object.create(null);\n            return this;\n        }\n        if (Array.isArray(event)) {\n            for (let i = 0, l = event.length; i < l; i++) {\n                this.off(event[i], cb, context);\n            }\n            return this;\n        }\n        if (!cb) {\n            this._events[event] = null;\n            return this;\n        }\n        if (cb) {\n            let cbs = this._events[event];\n            let i = cbs.length;\n            while (i--) {\n                if (cb === cbs[i] || cb === cbs[i].fn) {\n                    cbs.splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        }\n    }\n\n    emit(event) {\n        let cbs = this._events[event];\n        let args = Array.prototype.slice.call(arguments, 1);\n        if (cbs) {\n            for (let i = 0, l = cbs.length; i < l; i++) {\n                cbs[i].apply(cbs[i].$context || this, args);\n            }\n        }\n    }\n}","export class Bounds {\n    constructor (xmin, ymin, xmax, ymax) {\n        if (Array.isArray(xmin)) {\n            this.xmin = xmin[0];\n            this.xmax = ymin[0];\n            this.ymin = xmin[1];\n            this.ymax = ymin[1];\n        } else {\n            this.xmin = xmin;\n            this.xmax = xmax;\n            this.ymin = ymin;\n            this.ymax = ymax;\n        }\n    }\n    getWidth() {\n        return (this.xmax - this.xmin);\n    }\n    getHeight() {\n        return (this.ymax - this.ymin);\n    }\n    getCenter() {\n        let tx = (this.xmax - this.xmin) / 2;\n        let ty = (this.ymax - this.ymin) / 2;\n        return [tx + this.xmin, ty + this.ymin];\n    }\n}","import { Bounds } from './bounds';\n\nconst R = 6378137; // 地球半径（米）\nconst R_MINOR = 6356752.314245179;\nconst BOUND = new Bounds(-20037508.34279, -15496570.73972, 20037508.34279, 18764656.23138);\n\nexport const mapHelper = {\n    // 经纬度转墨卡托\n    wgs84ToMecator(lnglat) {\n\t\tvar d = Math.PI / 180,\n\t\t    r = R,\n\t\t    y = lnglat[1] * d,\n\t\t    tmp = R_MINOR / r,\n\t\t    e = Math.sqrt(1 - tmp * tmp),\n\t\t    con = e * Math.sin(y);\n\n\t\tvar ts = Math.tan(Math.PI / 4 - y / 2) / Math.pow((1 - con) / (1 + con), e / 2);\n\t\ty = -r * Math.log(Math.max(ts, 1E-10));\n\n\t\treturn [ lnglat[0] * d * r, y ];\n    },\n    // 墨卡托转经纬度\n    mecatorToWgs84(point) {\n\t\tvar d = 180 / Math.PI,\n\t\t    r = R,\n\t\t    tmp = R_MINOR / r,\n\t\t    e = Math.sqrt(1 - tmp * tmp),\n\t\t    ts = Math.exp(-point[1] / r),\n\t\t    phi = Math.PI / 2 - 2 * Math.atan(ts);\n\n\t\tfor (var i = 0, dphi = 0.1, con; i < 15 && Math.abs(dphi) > 1e-7; i++) {\n\t\t\tcon = e * Math.sin(phi);\n\t\t\tcon = Math.pow((1 - con) / (1 + con), e / 2);\n\t\t\tdphi = Math.PI / 2 - 2 * Math.atan(ts * con) - phi;\n\t\t\tphi += dphi;\n\t\t}\n\n\t\treturn [ point[0] * d / r, phi * d ];\n    },\n    getBounds(geojson) {\n        if (geojson === 'world') {\n            return BOUND;\n        } else if (geojson === 'china') {\n            let xmin = 73.4766;\n            let xmax = 135.0879;\n            let ymin = 18.1055;\n            let ymax = 53.5693;\n            let lb = this.wgs84ToMecator([xmin, ymin]);\n            let rt = this.wgs84ToMecator([xmax, ymax]);\n            return new Bounds(lb, rt);\n        } else {\n            let bound = {\n                xmin: BOUND.xmax,\n                xmax: BOUND.xmin,\n                ymin: BOUND.ymax,\n                ymax: BOUND.ymin\n            };\n            let features = [];\n            let polygons = [];\n            if (geojson.type === \"FeatureCollection\") {\n                features = geojson.features;\n            } else if (geojson.type === \"Feature\") {\n                features.push(geojson);\n            }\n            features.forEach(f => {\n                if (f.geometry.type === \"Polygon\") {\n                    polygons.push(f.geometry.coordinates);\n                } else if (f.geometry.type === \"MultiPolygon\") {\n                    for (let i = 0, len = f.geometry.coordinates.length; i < len; i++) {\n                        polygons.push(f.geometry.coordinates[i]);\n                    }\n                }\n            });\n            for (let i = 0, len = polygons.length; i < len; i++) {\n                let seg = polygons[i];\n                for (let j = 0; j < seg.length; j++) {\n                    let coords = seg[j];\n                    for (let k = 0; k < coords.length; k++) {\n                        let coord = this.wgs84ToMecator(coords[k]);\n                        if (coord[0] < bound.xmin) {\n                            bound.xmin = coord[0];\n                        }\n                        if (coord[0] > bound.xmax) {\n                            bound.xmax = coord[0];\n                        }\n                        if (coord[1] < bound.ymin) {\n                            bound.ymin = coord[1];\n                        }\n                        if (coord[1] > bound.ymax) {\n                            bound.ymax = coord[1];\n                        }\n                    }\n                }\n            }\n            return new Bounds(bound.xmin, bound.ymin, bound.xmax, bound.ymax);\n        }\n    }\n}","import { EventEmiter } from './eventemiter'\nimport { Util } from './util'\nimport { mapHelper } from './maphelper'\nexport class ThreeMap extends EventEmiter {\n    constructor(el, options) {\n        super();\n        var defaultOptions = {\n            containerClassName: 'three-map-container',\n            lightColor: 0xffffff, // 灯光颜色\n            type: '2d', // 2d or 3d\n            region: 'china' // china or world\n        };\n        this.options = Util.extend(defaultOptions, options);\n    \n        if (this.options.type === '2d') {\n            if (this.options.region === 'china') {\n                this._fullBound = mapHelper.getBounds('china');\n            } else {\n                this._fullBound = mapHelper.getBounds('world');\n            }\n        }\n\n        this._layers = {};\n        \n        this._initContainer(el);\n        this._init3D();\n        this._initEvents();\n    }\n    getBounds() {\n        return this._fullBound;\n    }\n    addLayer(layer) {\n        var id = Util.stamp(layer);\n        if (this._layers[id]) {\n            return this;\n        }\n\n        this._layers[id] = layer;\n        this._scene.add(layer.getContainer());\n\n        layer.onAdd(this);\n\n        return this;\n    }\n    removeLayer(layer) {\n        var id = Util.stamp(layer);\n        if (!this._layers[id]) {\n            return this;\n        }\n\n        delete this._layers[id];\n        this._scene.remove(layer.getContainer());\n\n        layer.onRemove(this);\n\n        return this;\n    }\n    hasLayer(layer) {\n        return !!layer && (Util.stamp(layer) in this._layers);\n    }\n    clearLayers() {\n        for (var id in this._layers) {\n            this.removeLayer(this._layers[id]);\n        }\n    }\n    updateSize() {\n        this._onContainerResize()\n    }\n    resetView() {\n        this._orbitControl.reset()\n    }\n    setView(bounds) {\n        const deafultMinDis = 30, defaultMaxDis = 200;\n        if (this.options.type === '2d') {\n            if (this.options.region === 'world') {\n\n            } else if (this.options.region === 'china') {\n                this._orbitControl.minDistance = deafultMinDis;\n                this._orbitControl.maxDistance = defaultMaxDis;\n                this._orbitControl.object.position.set(109.58688917016474, 16.051696751000303, -9.408028404329741);\n                this._orbitControl.target = new THREE.Vector3(106.61608780527186, -6.091, -47.26487677586227);\n            } else {\n                // other\n                let center = bounds.getCenter();\n                let opt = this.getOptimalDistance(bounds);\n                this._orbitControl.minDistance = deafultMinDis * opt.ratio;\n                this._orbitControl.maxDistance = defaultMaxDis * opt.ratio;\n                this._orbitControl.object.position.set(center[0], opt.d, -center[1]);\n                this._orbitControl.target = new THREE.Vector3(center[0], 0, -center[1]);\n            }\n        } else {\n            // 3d\n        }\n        this._orbitControl.update();\n    }\n    // 将区域 bounds 和 全国 bounds 进行对比，找到相机合适的距离，以自动适配范围\n    // 计算方式根据视角组成的相似三角形\n    getOptimalDistance(bounds) {\n        if (!bounds) {\n            return {\n                d: 60,\n                ratio: 1\n            }\n        }\n        var h0 = 35.464 // 全国区域外包矩形高度\n        var d0 = 60 // 全国区域相机初始距离，TODO 待优化，暂时写死\n        var h1 = bounds.getHeight()\n        var d1 = h1 * d0 / h0\n        return {\n            d: d1, // 实际距离\n            ratio: d1 / d0 // 距离比例\n        }\n    }\n    getContainerElement() {\n        return this._el;\n    }\n    getContainerSize() {\n        const compStyle = Util.getCmpStyle(this._el);\n        let width = parseInt(compStyle.width);\n        let height = parseInt(compStyle.height);\n        return { width, height };\n    }\n    _initContainer(el) {\n        this._container = typeof el === 'string' ? document.getElementById(el) : el;\n        if (!this._container) {\n            throw new Error(\"未提供父容器,请为地图提供一个父容器！\");\n        }\n\n        this._el = document.createElement('div');\n        this._el.style.height = '100%';\n        this._el.style.margin = 0;\n        this._el.style.padding = 0;\n        Util.addClass(this._el, this.options.containerClassName);\n\n        this._container.appendChild(this._el);\n    }\n    _init3D() {\n        if (THREE === undefined) throw new Error('需先引入threejs库！');\n        if (THREE.OrbitControls === undefined) throw new Error('需先引入 THREE.OrbitControls 组件！');\n\n        let size = this.getContainerSize();\n\n        // 初始化画布\n        this._renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            preserveDrawingBuffer: true\n        });\n        this._renderer.setClearColor(0x000000, 0); // 背景透明 \n        this._renderer.setSize(size.width, size.height);\n        this._renderer.domElement.className = 'chart-canvas';\n        this._el.appendChild(this._renderer.domElement);\n\n        // 设置场景\n        this._scene = new THREE.Scene();\n\n        // 相机\n        this._camera = new THREE.PerspectiveCamera(45, size.width / size.height, 1, 1000)\n\n        // 控件\n        this._orbitControl = new THREE.OrbitControls(this._camera, this._renderer.domElement)\n        // this._orbitControl.minDistance = 30 // 距离相机的最小距离，仅用于透视相机\n        // this._orbitControl.maxDistance = 200 // 距离相机的最大距离，仅用于透视相机\n        // 在哪个平面内就相对于哪个平面的坐标轴\n        this._orbitControl.maxPolarAngle = Math.PI / 2 // 最大翻转角度\n        this._orbitControl.maxAzimuthAngle = Math.PI / 2\n        this._orbitControl.minAzimuthAngle = -Math.PI / 2\n        // OrbitControls加入后，托管了相机，所以必须通过它来改变相机参数\n        // camera.lookAt()失效问题https://stackoverflow.com/questions/10325095/threejs-camera-lookat-has-no-effect-is-there-something-im-doing-wrong\n        // this._orbitControl.object.position.set(105.59873331348234, 44.01266686517651, 27.216466924729595)\n        // this._orbitControl.target = new THREE.Vector3(110, 0, -30)\n        this._orbitControl.saveState()\n        this._orbitControl.update()\n\n        // 灯光\n        this._scene.add(new THREE.AmbientLight(this.options.lightColor, 0.6));\n        this._light = new THREE.DirectionalLight(this.options.lightColor, 0.8);\n        this._light2 = new THREE.DirectionalLight(this.options.lightColor, 0.1);\n        this._light.position.set(-1, 1, 1);\n        this._light2.position.set(1, 1, 1);\n        this._scene.add(this._light);\n        this._scene.add(this._light2);\n\n        // animate\n        this._animate();\n    }\n    _initEvents() {\n        this._onContainerResize = this._onContainerResize.bind(this);\n        this._mousemoveEvtHandler = this._mousemoveEvtHandler.bind(this);\n        window.addEventListener('resize', this._onContainerResize, false);\n        this._renderer.domElement.addEventListener('mousemove', this._mousemoveEvtHandler, false);\n    }\n    _animate() {\n        this._animateId = requestAnimationFrame(this._animate.bind(this))\n        this._orbitControl.update()\n        this._renderer.render(this._scene, this._camera)\n    }\n    _onContainerResize() {\n        let size = this.getContainerSize();\n\n        // 设置透视摄像机的长宽比\n        this._camera.aspect = size.width / size.height;\n        // 摄像机的 position 和 target 是自动更新的，而 fov、aspect、near、far 的修改则需要重新计算投影矩阵（projection matrix）\n        this._camera.updateProjectionMatrix();\n        // 设置渲染器输出的 canvas 的大小\n        this._renderer.setSize(size.width, size.height, true);\n    }\n    _mousemoveEvtHandler(e) {\n        this.emit('mousemove', e);\n    }\n    destroy() {\n        this.clearLayers()\n        window.removeEventListener('resize', this._onContainerResize, false)\n        this._renderer.domElement.removeEventListener('mousemove', this._mousemoveEvtHandler, false)\n        cancelAnimationFrame(this._animateId)\n        if (this._container && this._container.hasChildNodes(this._el)) {\n            this._container.removeChild(this._el)\n            this._el = null\n        }\n    }\n}","import { Util } from '../util'\nimport  { EventEmiter } from '../eventemiter'\nexport class Layer extends EventEmiter {\n    constructor(data, options) {\n        super();\n        var defaultOptions = {};\n        this.options = Util.extend(defaultOptions, options);\n        this._data = data;\n        this._container = new THREE.Group();\n    }\n    getContainer() {\n        return this._container;\n    }\n    getData() {\n        return this._data;\n    }\n    onAdd(map) {\n        this._map = map;\n    }\n    onRemove(map) {}\n}","import {\n    Layer\n} from './layer'\nimport {\n    Util\n} from '../util'\nimport {\n    mapHelper\n} from '../maphelper'\n\nexport class GeoJSONLayer extends Layer {\n    constructor(data, options) {\n        super(data, options);\n        const defaultOptions = {\n            isExtrude: true, // 是否拉伸面\n            depth: 0.6, // 拉伸厚度\n            isAreaText: true, // 是否显示地区名称\n            fillColor: '#ddd', // 地区面块的填充色\n            strokeColor: '#000', // 地区边缘线的颜色\n            strokeOpacity: 0.5, // 地区边缘线的透明度\n            textColor: 'rgba(0, 0, 0, 0.8)',\n            material: {\n                color: 0x00ff00,\n                // opacity: 0.5,\n                side: THREE.DoubleSide\n            }\n        };\n        this.options = Util.extend(defaultOptions, options);\n    }\n    onAdd(map) {\n        Layer.prototype.onAdd.call(this, map);\n        this.draw();\n    }\n    onRemove(map) {\n        Layer.prototype.onRemove.call(this, map);\n    }\n    createFeatureArray(json) {\n        var feature_array = [];\n        var temp_feature;\n\n        if (json.type == 'Feature') {\n            feature_array.push(json);\n        } else if (json.type == 'FeatureCollection') {\n            for (var feature_num = 0; feature_num < json.features.length; feature_num++) {\n                feature_array.push(json.features[feature_num]);\n            }\n        } else if (json.type == 'GeometryCollection') {\n            for (var geom_num = 0; geom_num < json.geometries.length; geom_num++) {\n                temp_feature = {\n                    geometry: json.geometries[geom_num]\n                }\n                feature_array.push(temp_feature);\n            }\n        } else {\n            throw new Error('The geoJSON is not valid.');\n        }\n        return feature_array;\n    }\n    createCoordinateArray(feature) {\n        //Loop through the coordinates and figure out if the points need interpolation.\n        var temp_array = [];\n        var interpolation_array = [];\n\n        for (var point_num = 0; point_num < feature.length; point_num++) {\n            var point1 = feature[point_num];\n            var point2 = feature[point_num - 1];\n\n            if (point_num > 0) {\n                if (this.needsInterpolation(point2, point1)) {\n                    interpolation_array = [point2, point1];\n                    interpolation_array = this.interpolatePoints(interpolation_array);\n\n                    for (var inter_point_num = 0; inter_point_num < interpolation_array.length; inter_point_num++) {\n                        temp_array.push(interpolation_array[inter_point_num]);\n                    }\n                } else {\n                    temp_array.push(point1);\n                }\n            } else {\n                temp_array.push(point1);\n            }\n        }\n        return temp_array;\n    }\n    needsInterpolation(point2, point1) {\n        //If the distance between two latitude and longitude values is\n        //greater than five degrees, return true.\n        var lon1 = point1[0];\n        var lat1 = point1[1];\n        var lon2 = point2[0];\n        var lat2 = point2[1];\n        var lon_distance = Math.abs(lon1 - lon2);\n        var lat_distance = Math.abs(lat1 - lat2);\n\n        if (lon_distance > 5 || lat_distance > 5) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    interpolatePoints(interpolation_array) {\n        //This function is recursive. It will continue to add midpoints to the\n        //interpolation array until needsInterpolation() returns false.\n        var temp_array = [];\n        var point1, point2;\n\n        for (var point_num = 0; point_num < interpolation_array.length - 1; point_num++) {\n            point1 = interpolation_array[point_num];\n            point2 = interpolation_array[point_num + 1];\n\n            if (this.needsInterpolation(point2, point1)) {\n                temp_array.push(point1);\n                temp_array.push(this.getMidpoint(point1, point2));\n            } else {\n                temp_array.push(point1);\n            }\n        }\n\n        temp_array.push(interpolation_array[interpolation_array.length - 1]);\n\n        if (temp_array.length > interpolation_array.length) {\n            temp_array = this.interpolatePoints(temp_array);\n        } else {\n            return temp_array;\n        }\n        return temp_array;\n    }\n    getMidpoint(point1, point2) {\n        var midpoint_lon = (point1[0] + point2[0]) / 2;\n        var midpoint_lat = (point1[1] + point2[1]) / 2;\n        var midpoint = [midpoint_lon, midpoint_lat];\n\n        return midpoint;\n    }\n    convertCoordinates(coordinateArray) {\n        return coordinateArray.map(point => mapHelper.wgs84ToMecator(point));\n    }\n    draw() {\n        var geojson = this._data;\n        var container = this._container;\n\n        var features = this.createFeatureArray(geojson);\n\n        for (let i = 0, len = features.length; i < len; i++) {\n            let feature = features[i];\n            let geometry = feature.geometry;\n            if (geometry.type == 'Point') {\n\n            } else if (geometry.type == 'MultiPoint') {\n\n            } else if (geometry.type == 'LineString') {\n\n            } else if (geometry.type == 'MultiLineString') {\n\n            } else if (geometry.type == 'Polygon') {\n                for (let segment_num = 0; segment_num < geometry.coordinates.length; segment_num++) {\n                    let coordinate_array = this.createCoordinateArray(geometry.coordinates[segment_num]);\n                    let convert_array = this.convertCoordinates(coordinate_array);\n                    this.drawPolygon(convert_array);\n                }\n\n            } else if (geometry.type == 'MultiPolygon') {\n                for (let polygon_num = 0; polygon_num < geometry.coordinates.length; polygon_num++) {\n                    for (let segment_num = 0; segment_num < geometry.coordinates[polygon_num].length; segment_num++) {\n                        let coordinate_array = this.createCoordinateArray(geometry.coordinates[polygon_num][segment_num]);\n                        let convert_array = this.convertCoordinates(coordinate_array);\n                        this.drawPolygon(convert_array);\n                    }\n                }\n            } else {\n                throw new Error('The geoJSON is not valid.');\n            }\n        }\n    }\n    drawPolygon(points) {\n        let shape = new THREE.Shape();\n        for (let i = 0; i < points.length; i++) {\n            let point = points[i];\n            if (i === 0) {\n                shape.moveTo(point[0], point[1]);\n            } else {\n                shape.lineTo(point[0], point[1]);\n            }\n        }\n        shape.closePath();\n        var extrudeSettings = {\n            depth: 1, \n            bevelEnabled: false   // 是否用斜角\n        };\n        var geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);\n        var material = new THREE.MeshPhongMaterial({ color: 0x999999 });\n\n        var mesh = new THREE.Mesh(geometry, material);\n        // drawOutLine(x_values, y_values, z_values, mesh);\n        // mesh.rotateX(-Math.PI/2);\n        // mesh.userData = {\n        //     type: 'area'\n        // };\n        this._container.add(mesh);\n    }\n}","export * from './util';\nexport * from './threemap';\nexport * from './layers/index';"],"sourceRoot":""}